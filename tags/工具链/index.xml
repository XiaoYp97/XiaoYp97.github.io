<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具链 on Yellster - Blog</title><link>https://blog.yellster.top/tags/%E5%B7%A5%E5%85%B7%E9%93%BE/</link><description>Recent content in 工具链 on Yellster - Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>xyp_selune@163.com (Yellster)</managingEditor><webMaster>xyp_selune@163.com (Yellster)</webMaster><lastBuildDate>Sat, 19 Oct 2024 10:32:07 +0800</lastBuildDate><atom:link href="https://blog.yellster.top/tags/%E5%B7%A5%E5%85%B7%E9%93%BE/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust学习笔记00 - 开发工具和环境</title><link>https://blog.yellster.top/p/rust-development-environment/</link><pubDate>Sat, 19 Oct 2024 10:32:07 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/rust-development-environment/</guid><description>&lt;p>在开始 Rust 开发之旅之前，我们需要配置一个高效的开发环境。本文将详细介绍如何搭建一个完整的 Rust 开发环境，包括必要的工具和插件。&lt;/p>
&lt;h2 id="1-安装-rust">1. 安装 Rust
&lt;/h2>&lt;p>首先，我们需要安装 Rust 编程语言。使用以下命令安装 Rust：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl --proto &lt;span class="s1">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令会安装 Rust 编译器（rustc）和包管理器（cargo）。&lt;/p>
&lt;h2 id="2-vscode-插件配置">2. VSCode 插件配置
&lt;/h2>&lt;p>VSCode 是推荐的 Rust 开发 IDE，以下是一些必备的插件：&lt;/p>
&lt;h3 id="核心插件">核心插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>rust-analyzer&lt;/strong>: Rust 语言支持，提供代码补全、类型检查等功能&lt;/li>
&lt;li>&lt;strong>crates&lt;/strong>: Rust 包管理工具&lt;/li>
&lt;li>&lt;strong>Even Better TOML&lt;/strong>: TOML 文件支持&lt;/li>
&lt;li>&lt;strong>Better Comments&lt;/strong>: 优化注释显示&lt;/li>
&lt;li>&lt;strong>Error Lens&lt;/strong>: 错误提示优化&lt;/li>
&lt;/ul>
&lt;h3 id="开发效率插件">开发效率插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>GitLens&lt;/strong>: Git 增强功能&lt;/li>
&lt;li>&lt;strong>Github Copilot&lt;/strong>: AI 代码提示&lt;/li>
&lt;li>&lt;strong>indent-rainbow&lt;/strong>: 缩进显示优化&lt;/li>
&lt;li>&lt;strong>Prettier&lt;/strong>: 代码格式化&lt;/li>
&lt;li>&lt;strong>REST client&lt;/strong>: REST API 调试工具&lt;/li>
&lt;/ul>
&lt;h3 id="测试相关插件">测试相关插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Rust Test lens&lt;/strong>: Rust 测试支持&lt;/li>
&lt;li>&lt;strong>Rust Test Explorer&lt;/strong>: Rust 测试概览&lt;/li>
&lt;/ul>
&lt;h3 id="其他实用插件">其他实用插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>TODO Highlight&lt;/strong>: TODO 高亮&lt;/li>
&lt;li>&lt;strong>vscode-icons&lt;/strong>: 文件图标优化&lt;/li>
&lt;li>&lt;strong>YAML&lt;/strong>: YAML 文件支持&lt;/li>
&lt;/ul>
&lt;h2 id="3-开发工具链配置">3. 开发工具链配置
&lt;/h2>&lt;h3 id="cargo-generate">Cargo Generate
&lt;/h3>&lt;p>用于生成项目模板的工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install cargo-generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用模板创建新项目：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo generate tyr-rust-bootcamp/template
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="pre-commit">Pre-commit
&lt;/h3>&lt;p>代码提交前的检查工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pipx install pre-commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pre-commit install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cargo-deny">Cargo Deny
&lt;/h3>&lt;p>依赖安全检查工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install --locked cargo-deny
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="typos">Typos
&lt;/h3>&lt;p>拼写检查工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install typos-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="git-cliff">Git Cliff
&lt;/h3>&lt;p>生成 changelog 的工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install git-cliff
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cargo-nextest">Cargo Nextest
&lt;/h3>&lt;p>增强的测试工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install cargo-nextest --locked
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结
&lt;/h2>&lt;p>配置一个完整的 Rust 开发环境需要安装多个工具和插件。这些工具共同构成了一个高效的开发工作流：&lt;/p>
&lt;ol>
&lt;li>使用 rust-analyzer 提供智能的代码补全和错误检查&lt;/li>
&lt;li>通过 pre-commit 确保代码质量&lt;/li>
&lt;li>使用 cargo-deny 保证依赖安全&lt;/li>
&lt;li>借助 cargo-nextest 进行高效的测试&lt;/li>
&lt;/ol>
&lt;p>这些工具的组合使用可以显著提升 Rust 开发效率和代码质量。建议根据实际需求选择性地安装这些工具，不必一次性全部配置。&lt;/p></description></item></channel></rss>