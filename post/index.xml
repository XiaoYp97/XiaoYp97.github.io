<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Yellster - Blog</title><link>https://blog.yellster.top/post/</link><description>Recent content in Posts on Yellster - Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>xyp_selune@163.com (Yellster)</managingEditor><webMaster>xyp_selune@163.com (Yellster)</webMaster><lastBuildDate>Mon, 21 Apr 2025 17:56:08 +0800</lastBuildDate><atom:link href="https://blog.yellster.top/post/index.xml" rel="self" type="application/rss+xml"/><item><title>第一性原理</title><link>https://blog.yellster.top/p/first-principle/</link><pubDate>Mon, 21 Apr 2025 17:56:08 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/first-principle/</guid><description>&lt;img src="https://blog.yellster.top/p/first-principle/%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86.webp" alt="Featured image of post 第一性原理" />&lt;h2 id="什么是第一性原理">什么是第一性原理？
&lt;/h2>&lt;p>&lt;strong>第一性原理（First Principles）&lt;/strong> 是一种从最基本、最本质的层面思考问题的方法，要求我们抛开所有假设和成见，从最基础的真理出发重新构建认知。这种思维方式强调从根本问题出发，剖析和理解事物本质，而不是依赖传统认知或经验。&lt;/p>
&lt;h3 id="起源">起源
&lt;/h3>&lt;ul>
&lt;li>第一性原理的概念最早可以追溯到&lt;strong>亚里士多德&lt;/strong>的哲学思想。&lt;/li>
&lt;li>他认为，在任何系统中，都存在一些最基本的命题或假设，这些命题不能进一步简化或从其他命题推导出来。&lt;/li>
&lt;li>这些基本命题构成了所有知识的基础，是我们认知的出发点。&lt;/li>
&lt;/ul>
&lt;h3 id="与传统思维的区别">与传统思维的区别
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>类比思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>基于已知经验，寻找相似性，容易受限于现有认知，创新性有限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第一性原理思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>回归本质，剖析问题的基本组成要素，突破认知局限，有可能产生突破性的创新。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="实际应用案例">实际应用案例
&lt;/h2>&lt;h3 id="特斯拉的电池革新">特斯拉的电池革新
&lt;/h3>&lt;p>马斯克运用第一性原理思维降低电池成本：&lt;/p>
&lt;ol>
&lt;li>不是直接压缩现有电池的利润空间。&lt;/li>
&lt;li>而是从最基本的组成材料（如锂、钴、镍等）入手。&lt;/li>
&lt;li>通过分析原材料的成本，重新设计生产流程。&lt;/li>
&lt;li>最终成功将电池成本降低约50%。&lt;/li>
&lt;/ol>
&lt;h3 id="spacex-的火箭研发">SpaceX 的火箭研发
&lt;/h3>&lt;p>传统思维：火箭很贵，因为&amp;quot;火箭一直都很贵&amp;quot;&lt;/p>
&lt;p>运用第一性原理：&lt;/p>
&lt;ol>
&lt;li>分析火箭的基本组成材料，计算原材料成本。&lt;/li>
&lt;li>重新设计火箭制造流程。&lt;/li>
&lt;li>通过实现可重复使用的火箭，大幅降低了发射成本。&lt;/li>
&lt;/ol>
&lt;h2 id="如何运用第一性原理">如何运用第一性原理
&lt;/h2>&lt;h3 id="基本步骤">基本步骤
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>识别问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>明确要解决的核心问题，避免被表象迷惑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>拆解组成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将问题拆解为最基本的要素，识别关键变量和约束条件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重新构建&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>从基本要素出发，构建新的解决方案，探索创新的方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>验证方案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>测试新方案的可行性，并持续优化改进。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="注意事项">注意事项
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>避免过度简化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保不遗漏重要因素，避免忽视系统复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>平衡效率&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>不是所有问题都需要追溯到最基础层面，视情况决定是否采用第一性原理思维。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保持开放性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>不断质疑现有认知，愿意接受新的可能性和解决方案。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="应用领域">应用领域
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>技术创新&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过第一性原理突破技术瓶颈，开发新产品或技术。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>商业模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>重新定义市场、颠覆传统商业模式，创造新的商业机会。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题解决&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>解决复杂技术问题，优化现有流程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>个人成长&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在个人学习和职业发展中，突破思维局限，找到更高效的成长路径。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="在软件开发中的应用">在软件开发中的应用
&lt;/h2>&lt;h3 id="1-编程语言设计">1. 编程语言设计
&lt;/h3>&lt;p>&lt;strong>传统思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>借鉴已有语言的特性，模仿流行语言的语法结构。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第一性原理思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>深入思考编程语言的本质：人与机器的沟通桥梁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析目标用户的实际需求，设计符合需求的语言特性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如&lt;strong>Rust语言&lt;/strong>，从系统编程的基本需求出发，设计了&lt;strong>所有权&lt;/strong>、&lt;strong>借用&lt;/strong>和&lt;strong>生命周期&lt;/strong>等独特特性，以确保内存安全和高效并发。&lt;/p>
&lt;p>&lt;strong>&lt;a class="link" href="https://blog.yellster.top/p/ownership/" >Rust的所有权模型&lt;/a>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>所有权&lt;/strong>确保每个值只能有一个所有者，这使得内存管理变得更可控，避免了内存泄漏和悬挂指针的问题。&lt;/li>
&lt;li>&lt;strong>借用&lt;/strong>和&lt;strong>生命周期&lt;/strong>的概念，使得Rust能够通过编译时检查，确保数据不会在不合法的情况下被访问。&lt;/li>
&lt;li>这些设计原则并不是简单模仿其他语言，而是从解决内存安全和并发编程的基本问题出发，重新构建了语言的核心特性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-系统架构设计">2. 系统架构设计
&lt;/h3>&lt;p>&lt;strong>传统思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>采用流行架构模式，照搬热门技术栈或成功案例。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第一性原理思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>分析业务的本质需求，考虑系统的基本约束（性能、可用性、扩展性、维护成本等）。&lt;/li>
&lt;li>从零开始设计最适合的架构，确保架构的灵活性和可维护性。&lt;/li>
&lt;li>例如，&lt;strong>微服务架构&lt;/strong>的选择不是因为它流行，而是基于以下分析：业务模块的独立性、团队协作效率、系统扩展需求、维护成本等。&lt;/li>
&lt;/ul>
&lt;h3 id="3-代码重构">3. 代码重构
&lt;/h3>&lt;p>&lt;strong>传统思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>简单修补问题代码，堆积临时解决方案。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第一性原理思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>理解代码的核心功能，识别根本的设计问题。&lt;/li>
&lt;li>从根本上重新设计代码，遵循&lt;a class="link" href="https://blog.yellster.top/p/design-principles/" >设计原则&lt;/a>（如单一职责、开闭原则、依赖倒置等）。&lt;/li>
&lt;/ul>
&lt;h3 id="4-问题调试">4. 问题调试
&lt;/h3>&lt;p>&lt;strong>传统思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>基于经验猜测问题，尝试常见解决方案，修复表面症状。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第一性原理思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>理解系统的工作原理，收集诊断数据，分析问题根本原因。&lt;/li>
&lt;li>设计全面的解决方案，如在 &lt;strong>&lt;a class="link" href="https://blog.yellster.top/p/performance-optimization/" >性能优化&lt;/a>&lt;/strong> 中，通过分析性能瓶颈的本质，优化算法和数据结构，而非简单依赖缓存或硬件升级。&lt;/li>
&lt;/ul>
&lt;h3 id="5-技术选型">5. 技术选型
&lt;/h3>&lt;p>&lt;strong>传统思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>选择流行技术，跟随大公司的技术栈或盲目采用新技术。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第一性原理思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>基于项目的实际需求、团队能力、维护成本等因素评估技术选型。&lt;/li>
&lt;li>评估技术的本质特性，选择最适合的技术，而非仅仅追求“潮流”。&lt;/li>
&lt;/ul>
&lt;h3 id="实践建议">实践建议
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>培养基础思维&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>深入学习计算机基础理论，掌握核心算法和数据结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题分析&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在解决问题时，不急于采用现成方案，先深刻理解问题本质，分析基本约束和需求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>方案设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>从基本原则出发，设计简洁且可维护的解决方案，注重系统的扩展性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定期回顾和重构代码，关注系统的健康度，避免技术债务积累。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="总结">总结
&lt;/h3>&lt;p>运用&lt;strong>第一性原理&lt;/strong>思维，在软件开发中能够帮助我们：&lt;/p>
&lt;ul>
&lt;li>设计出更加优雅和高效的解决方案。&lt;/li>
&lt;li>构建更加可靠、可扩展的系统架构。&lt;/li>
&lt;li>编写更易维护的代码，解决更复杂的技术问题。&lt;/li>
&lt;/ul>
&lt;p>这种思维方式要求我们投入更多的时间和精力，但它所带来的长期收益是无可比拟的。因此，掌握并运用第一性原理，将是每个优秀开发者必须具备的能力。&lt;/p></description></item><item><title>进程与线程</title><link>https://blog.yellster.top/p/process-thread/</link><pubDate>Fri, 11 Apr 2025 13:38:57 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/process-thread/</guid><description>&lt;img src="https://blog.yellster.top/p/process-thread/process-thread.webp" alt="Featured image of post 进程与线程" />&lt;p>在现代操作系统中，&lt;strong>进程&lt;/strong>、&lt;strong>线程&lt;/strong>和&lt;strong>虚拟地址&lt;/strong>是支撑高效执行、内存管理与资源隔离的三大核心概念。它们相互配合，共同保证系统的稳定性、安全性与并发性能。&lt;/p>
&lt;h2 id="进程资源隔离与调度的基本单位">进程：资源隔离与调度的基本单位
&lt;/h2>&lt;h3 id="概念">概念
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>进程&lt;/strong>：正在运行的程序实例，拥有独立的地址空间、数据段、堆与栈，以及各类系统资源（文件描述符、信号、IPC 对象等）。&lt;/li>
&lt;/ul>
&lt;h3 id="创建与执行">创建与执行
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>创建&lt;/strong>：Linux 中通过 &lt;code>fork()&lt;/code> 复制父进程，再用 &lt;code>exec()&lt;/code> 系列函数加载新程序。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>fork()——复制当前进程&lt;/strong>&lt;/p>
&lt;p>父进程调用 &lt;code>fork()&lt;/code>，内核在后台复制出一个“子进程”，这个子进程和父进程几乎一模一样（地址空间、打开的文件描述符等都拷贝或共享）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>execve()（或其它 exec* 系列函数）——在子进程里加载新程序&lt;/strong>&lt;/p>
&lt;p>子进程中立即调用 &lt;code>execve(&amp;quot;/path/to/newprog&amp;quot;, argv, envp)&lt;/code>，内核就会丢弃掉原来的地址空间，把可执行文件 &lt;code>/path/to/newprog&lt;/code> 映射进来，初始化全新的代码段、数据段、堆栈，真正运行“一个全新的进程镜像”。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>调度&lt;/strong>：内核调度器（scheduler）负责分配 CPU 时间片，维护多任务并发运行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="进程间通信ipc">进程间通信（IPC）
&lt;/h3>&lt;p>由于进程地址空间独立，IPC 机制尤为重要：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方式&lt;/th>
&lt;th>场景&lt;/th>
&lt;th>优势&lt;/th>
&lt;th>注意点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>管道（Pipe）&lt;/td>
&lt;td>父子进程&lt;/td>
&lt;td>简单、快速&lt;/td>
&lt;td>仅限亲缘进程，单向&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>命名管道&lt;/td>
&lt;td>任意本地进程&lt;/td>
&lt;td>双向、可见文件系统&lt;/td>
&lt;td>性能略低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>消息队列&lt;/td>
&lt;td>异步通信&lt;/td>
&lt;td>支持优先级、可靠传输&lt;/td>
&lt;td>大量小消息时开销增大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>共享内存&lt;/td>
&lt;td>大块数据交换&lt;/td>
&lt;td>&lt;a class="link" href="https://blog.yellster.top/p/zero-copy/" >零拷贝&lt;/a>、高吞吐&lt;/td>
&lt;td>需同步机制（锁、信号量）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>套接字（Socket）&lt;/td>
&lt;td>本地／跨网络进程&lt;/td>
&lt;td>灵活、多协议&lt;/td>
&lt;td>网络开销相对较大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>信号（Signal）&lt;/td>
&lt;td>异步通知&lt;/td>
&lt;td>轻量级、实时性好&lt;/td>
&lt;td>数据传输能力有限&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;strong>IPC（进程间通信，Inter-Process Communication）&lt;/strong> 是指在操作系统中，不同进程之间为交换数据或进行同步而提供的一系列机制。&lt;/p>
&lt;p>由于操作系统给每个进程分配了独立的地址空间，直接读写对方内存是不被允许的，IPC 就是为了解决“&lt;strong>进程如何安全、高效地互相协作&lt;/strong>”而产生的。&lt;/p>&lt;/blockquote>
&lt;h2 id="线程轻量级执行流与并行处理">线程：轻量级执行流与并行处理
&lt;/h2>&lt;h3 id="概念-1">概念
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>线程&lt;/strong>：依附于进程的执行单元，共享进程的地址空间和大部分资源，但拥有各自的寄存器上下文和栈。&lt;/li>
&lt;/ul>
&lt;h3 id="创建与管理">创建与管理
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Linux 实现&lt;/strong>：基于 &lt;code>clone()&lt;/code> 系统调用；POSIX 线程库（pthread）提供了更友好的 API。&lt;/li>
&lt;li>&lt;strong>切换开销&lt;/strong>：比进程轻量，适用于高并发场景。&lt;/li>
&lt;/ul>
&lt;h3 id="并发挑战">并发挑战
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>竞态条件&lt;/strong>：无同步的并发访问可能导致数据不一致。&lt;/li>
&lt;li>&lt;strong>死锁&lt;/strong>：多线程间相互等待锁时出现永久阻塞。&lt;/li>
&lt;li>&lt;strong>活锁与饥饿&lt;/strong>：线程过度谦让或被长期剥夺执行机会。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>示例&lt;/strong>（Rust 风格伪代码）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mutex&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handles&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>::&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}).&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handles&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Result: &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;h2 id="虚拟地址抽象内存与安全保护">虚拟地址：抽象内存与安全保护
&lt;/h2>&lt;h3 id="概念-2">概念
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>虚拟地址&lt;/strong>：操作系统为每个进程提供的连续逻辑地址空间，与物理内存无直接一一映射。&lt;/li>
&lt;/ul>
&lt;h3 id="管理机制">管理机制
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>分页（Paging）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>页大小&lt;/strong>：通常 4 KB，也有大页（2 MB/1 GB）。&lt;/li>
&lt;li>&lt;strong>多级页表&lt;/strong>：如 x86_64 的 4 级页表，减少内存占用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>地址转换&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">虚拟地址 = [页目录索引][页表索引][页内偏移]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">物理地址 = 页框号 + 偏移
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>通过 MMU 与 TLB 快速完成转换。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保护与优化&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>访问权限&lt;/strong>：读/写/执行标志。&lt;/li>
&lt;li>&lt;strong>用户/内核隔离&lt;/strong>：防止越权访问。&lt;/li>
&lt;li>&lt;strong>写时复制（COW）&lt;/strong>：延迟复制，降低 fork 开销。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="能当做-ipc-吗">能当做 IPC 吗？
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>虚拟地址本身不共享&lt;/strong>，不能直接跨进程使用。&lt;/li>
&lt;li>&lt;strong>共享内存&lt;/strong> 或 &lt;strong>mmap(MAP_SHARED)&lt;/strong> 是利用虚拟地址“映射”同一段物理页到不同进程，从而实现高效的 IPC。&lt;/li>
&lt;li>你只需要在各自进程里拿到映射后自己的虚拟指针，就能像访问本地内存一样进行读写。&lt;/li>
&lt;/ul>
&lt;h2 id="协程更轻量的用户态并发">协程：更轻量的用户态并发
&lt;/h2>&lt;h3 id="概念-3">概念
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>协程（Coroutine）&lt;/strong>：用户态的轻量级执行单元，又称“微线程”或“纤程”。它在单线程内通过显式的调度点（yield）实现多任务切换，无需内核参与。&lt;/li>
&lt;/ul>
&lt;h3 id="特点">特点
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>线程&lt;/th>
&lt;th>协程&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>调度&lt;/td>
&lt;td>内核调度（抢占式）&lt;/td>
&lt;td>用户态调度（协作式）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>上下文切换开销&lt;/td>
&lt;td>高（进入内核，保存/恢复寄存器、内核栈）&lt;/td>
&lt;td>低（仅保存/恢复少量寄存器和用户栈指针）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>通信&lt;/td>
&lt;td>共享内存需锁、IPC&lt;/td>
&lt;td>函数调用/Channel/队列 等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>并发规模&lt;/td>
&lt;td>受限于内核线程数&lt;/td>
&lt;td>数万乃至数十万轻松支持&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="调度模型">调度模型
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>协作式&lt;/strong>：运行到显式 &lt;code>yield&lt;/code> 或 &lt;code>await&lt;/code> 才切换，开发者可精确控制切换点。&lt;/li>
&lt;li>&lt;strong>预emptive（部分语言支持）&lt;/strong>：语言运行时定期打断协程，但大多数主流实现（如 Python、Go）采用协作式。&lt;/li>
&lt;/ul>
&lt;h3 id="常见实现">常见实现
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Go&lt;/strong>：goroutine + M:N 调度，M 代表系统线程，N 代表用户协程，由 runtime 自动分配。&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong>：&lt;code>async def&lt;/code> + &lt;code>await&lt;/code>，基于事件循环（&lt;code>asyncio&lt;/code>）或第三方库（如 Trio、Curio）。&lt;/li>
&lt;li>&lt;strong>Rust&lt;/strong>：&lt;code>async/await&lt;/code> + Futures + executor（如 Tokio、async-std），通过状态机驱动。&lt;/li>
&lt;li>&lt;strong>JavaScript&lt;/strong>：基于事件循环的 Promise + &lt;code>async/await&lt;/code>，单线程协程模型。&lt;/li>
&lt;/ul>
&lt;h3 id="应用场景">应用场景
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>高并发 I/O&lt;/strong>：Web 服务器、爬虫、网络代理等，常用事件驱动 + 协程模型实现百万级并发。&lt;/li>
&lt;li>&lt;strong>异步任务流&lt;/strong>：管道化处理、大量小任务的并行调度。&lt;/li>
&lt;li>&lt;strong>可控并发&lt;/strong>：无需锁或细粒度锁，简化并发控制。&lt;/li>
&lt;/ul>
&lt;h2 id="四者对比与协同">四者对比与协同
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>调度方式&lt;/th>
&lt;th>切换开销&lt;/th>
&lt;th>共享资源&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>进程&lt;/td>
&lt;td>内核（抢占）&lt;/td>
&lt;td>最大&lt;/td>
&lt;td>无（需 IPC）&lt;/td>
&lt;td>资源隔离、强隔离需求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>线程&lt;/td>
&lt;td>内核（抢占）&lt;/td>
&lt;td>较大&lt;/td>
&lt;td>共享进程资源&lt;/td>
&lt;td>CPU 并行、I/O 并发&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>协程&lt;/td>
&lt;td>用户（协作）&lt;/td>
&lt;td>最小&lt;/td>
&lt;td>共享线程资源&lt;/td>
&lt;td>海量并发 I/O、异步流程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>虚拟地址&lt;/td>
&lt;td>——&lt;/td>
&lt;td>——&lt;/td>
&lt;td>——&lt;/td>
&lt;td>为进程/线程/协程提供统一内存抽象&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>进程&lt;/strong>： &lt;strong>是资源分配的基本单位&lt;/strong>，每个进程都有独立的内存空间（代码段、数据段、堆栈等），提供最强隔离。&lt;/li>
&lt;li>&lt;strong>线程&lt;/strong>： &lt;strong>是 CPU 调度的基本单位&lt;/strong>，属于进程，一个进程可以包含多个线程。共享进程的内存空间和资源（文件句柄、数据段等）在同一地址空间内并行。&lt;/li>
&lt;li>&lt;strong>协程&lt;/strong>： 在单线程内更高效地调度。&lt;/li>
&lt;li>&lt;strong>虚拟地址&lt;/strong>： 是上述模型的基础，屏蔽物理内存复杂性并提供保护。&lt;/li>
&lt;/ul>
&lt;h3 id="应用场景选型">应用场景选型
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>场景&lt;/th>
&lt;th>建议方案&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>资源隔离优先&lt;/td>
&lt;td>对安全或稳定性要求极高的组件，首选进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>并行计算&lt;/td>
&lt;td>CPU 密集任务可用多进程或多线程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高并发 I/O&lt;/td>
&lt;td>首选协程框架，结合事件驱动（如 epoll、kqueue）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>混合模式&lt;/td>
&lt;td>Web 服务常用 “多进程 + 协程” 的组合：进程隔离，协程高并发&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="总结">总结
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>进程&lt;/strong>、&lt;strong>线程&lt;/strong> 和 &lt;strong>协程&lt;/strong> 是三种层次不同的并发单元，各自有取舍。&lt;/li>
&lt;li>&lt;strong>虚拟地址&lt;/strong> 为它们提供了统一、隔离且安全的内存视图。&lt;/li>
&lt;li>在实际系统设计中，合理组合使用，才能兼顾隔离性、并发性与性能，打造高性能、高可靠的应用架构。&lt;/li>
&lt;/ul>
&lt;h2 id="进程调度算法">进程调度算法
&lt;/h2>&lt;h3 id="非抢占式调度">非抢占式调度
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>先来先服务（FCFS）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：按进程到达就绪队列的先后顺序依次调度，类似队列排队。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：简单易实现；无饥饿。&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：平均等待时间不一定最短，易出现“短作业后面跟长作业”拖慢整体效率。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>短作业优先（SJF）／最短剩余时间优先（SRTF）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SJF（非抢占）&lt;/strong>：每次选择执行时间最短的作业；&lt;/li>
&lt;li>&lt;strong>SRTF（抢占）&lt;/strong>：新作业到达时，如果其所需时间比当前剩余时间短，则抢占。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：能最小化平均等待时间；&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：需要准确估计执行时间；可能导致长作业“饥饿”。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优先级调度（Priority）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：为每个进程分配优先级，优先级高的先执行；可抢占或非抢占。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：满足关键任务优先执行；&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：低优先级可能长时间得不到调度（饥饿），需用“优先级老化”机制解决。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="抢占式调度">抢占式调度
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>时间片轮转（Round Robin，RR）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：给每个进程分配固定长度的时间片，时间片用完即切换到下一个进程，循环往复。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：响应时间可控，适合交互式系统；无进程饥饿。&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：时间片大小需平衡，过大接近 FCFS，过小切换开销大。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多级队列调度（Multilevel Queue）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：将进程按类型（交互式、批处理、系统进程等）分到多个队列，不同队列使用不同算法和优先级。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：可针对性地优化不同类型作业；&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：队列间切换策略固定，灵活性较差。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多级反馈队列（Multilevel Feedback Queue）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：允许进程在不同优先级队列间动态升降，根据其执行特性（CPU 密集或 I/O 密集）调整优先级。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：兼顾短作业和长作业，能自动提升响应性；&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：参数（队列数、时间片长度、反馈规则）较多，需要调优。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="现代与实时调度">现代与实时调度
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>最早截止时间优先（EDF, Earliest Deadline First）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>应用&lt;/strong>：实时系统&lt;/li>
&lt;li>&lt;strong>原理&lt;/strong>：总是选择截止时间最早的任务执行，可抢占。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：理论上能在系统总利用率 ≤100% 时保证所有任务准时完成；&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：需要精确的任务截止时间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>率先最小周期优先（RMS, Rate Monotonic Scheduling）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>应用&lt;/strong>：实时系统，周期性任务&lt;/li>
&lt;li>&lt;strong>原理&lt;/strong>：周期短（率高）的任务优先级高；&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：简单固定优先级；&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：在高利用率下不能保证可调度（理论上利用率上限 ≈69%）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Linux 完全公平调度器（CFS, Completely Fair Scheduler）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>应用&lt;/strong>：通用 Linux 桌面/服务器&lt;/li>
&lt;li>&lt;strong>原理&lt;/strong>：用虚拟运行时间（vruntime）衡量每个任务已经“拿过”的 CPU 时间，优先选择 vruntime 最小者执行。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：可以在多任务间实现近似理想的公平；&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：算法复杂度高于传统调度，切换开销略大。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="选择与权衡">选择与权衡
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>交互式系统&lt;/strong>（桌面应用、Web 服务器）：优先 RR、Multilevel Feedback Queue、CFS&lt;/li>
&lt;li>&lt;strong>批处理系统&lt;/strong>（后台任务、科学计算）：可选 SJF/SRTF、Multilevel Queue&lt;/li>
&lt;li>&lt;strong>实时系统&lt;/strong>（控制、嵌入式）：EDF、RMS&lt;/li>
&lt;li>&lt;strong>混合场景&lt;/strong>：多级反馈队列 + 结合优先级老化保证低优先级可执行&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>算法&lt;/th>
&lt;th>抢占&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>FCFS&lt;/td>
&lt;td>否&lt;/td>
&lt;td>简单易实现，无饥饿&lt;/td>
&lt;td>平均等待时间高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SJF / SRTF&lt;/td>
&lt;td>可选&lt;/td>
&lt;td>最小化平均等待时间&lt;/td>
&lt;td>需估计运行时长；长期作业易饥饿&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Priority&lt;/td>
&lt;td>可选&lt;/td>
&lt;td>可满足关键任务优先&lt;/td>
&lt;td>需防止低优先级饥饿&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Round Robin&lt;/td>
&lt;td>是&lt;/td>
&lt;td>响应时间可控，无饥饿&lt;/td>
&lt;td>时间片选取需平衡；频繁切换开销大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Multilevel Queue&lt;/td>
&lt;td>可选&lt;/td>
&lt;td>针对不同类型作业优化&lt;/td>
&lt;td>队列间固化策略；灵活性差&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Multilevel Feedback&lt;/td>
&lt;td>是&lt;/td>
&lt;td>自适应调度，兼顾短/长作业&lt;/td>
&lt;td>参数调优复杂&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EDF / RMS（实时）&lt;/td>
&lt;td>是&lt;/td>
&lt;td>实时可调度保证&lt;/td>
&lt;td>需准确的任务参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CFS&lt;/td>
&lt;td>是&lt;/td>
&lt;td>理想公平，适合通用场景&lt;/td>
&lt;td>实现复杂，切换开销略大&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>LLM领域的术语及其中文翻译</title><link>https://blog.yellster.top/p/llm-terminology-chinese-translations/</link><pubDate>Mon, 24 Mar 2025 22:30:59 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/llm-terminology-chinese-translations/</guid><description>&lt;h2 id="模型名称及其中英文对应">模型名称及其中英文对应
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>英文名称&lt;/strong>&lt;/th>
&lt;th>&lt;strong>中文对应&lt;/strong>&lt;/th>
&lt;th>&lt;strong>全称&lt;/strong>&lt;/th>
&lt;th>&lt;strong>中文全称翻译&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GPT-3/GPT-4&lt;/td>
&lt;td>GPT-3/GPT-4&lt;/td>
&lt;td>Generative Pre-trained Transformer 3/4&lt;/td>
&lt;td>生成式预训练变换器 3/4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BERT&lt;/td>
&lt;td>BERT&lt;/td>
&lt;td>Bidirectional Encoder Representations from Transformers&lt;/td>
&lt;td>双向编码器表示来自变换器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RoBERTa&lt;/td>
&lt;td>RoBERTa&lt;/td>
&lt;td>Robustly Optimized BERT Pre-Training Approach&lt;/td>
&lt;td>稳健优化 BERT 预训练方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>XLNet&lt;/td>
&lt;td>XLNet&lt;/td>
&lt;td>XLNet&lt;/td>
&lt;td>XLNet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>T5&lt;/td>
&lt;td>T5&lt;/td>
&lt;td>Text-to-Text Transfer Transformer&lt;/td>
&lt;td>文本到文本转移变换器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BART&lt;/td>
&lt;td>BART&lt;/td>
&lt;td>Bidirectional and Auto-Regressive Transformers&lt;/td>
&lt;td>双向和自回归变换器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ELECTRA&lt;/td>
&lt;td>ELECTRA&lt;/td>
&lt;td>Efficiently Learning an Encoder that Classifies Token Replacements Accurately&lt;/td>
&lt;td>高效学习编码器分类令牌替换准确&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DeBERTa&lt;/td>
&lt;td>DeBERTa&lt;/td>
&lt;td>Decoding-enhanced BERT with Disentangled Attention&lt;/td>
&lt;td>解码增强 BERT 具有解耦注意力&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PaLM&lt;/td>
&lt;td>PaLM&lt;/td>
&lt;td>Pathways Language Model&lt;/td>
&lt;td>路径语言模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LLaMA&lt;/td>
&lt;td>LLaMA&lt;/td>
&lt;td>Large Language Model Meta AI&lt;/td>
&lt;td>大型语言模型 Meta AI&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BLOOM&lt;/td>
&lt;td>BLOOM&lt;/td>
&lt;td>BigScience Large Open-science Open-access Multilangual language model&lt;/td>
&lt;td>BigScience 大型开源多语言语言模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Chinchilla&lt;/td>
&lt;td>Chinchilla&lt;/td>
&lt;td>Chinchilla&lt;/td>
&lt;td>Chinchilla&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OPT&lt;/td>
&lt;td>OPT&lt;/td>
&lt;td>Open Pre-trained Transformer&lt;/td>
&lt;td>开放预训练变换器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ERNIE&lt;/td>
&lt;td>ERNIE（文心一言）&lt;/td>
&lt;td>Enhanced Representation through Knowledge Integration&lt;/td>
&lt;td>通过知识集成增强表示&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPM&lt;/td>
&lt;td>CPM&lt;/td>
&lt;td>Chinese Pre-trained Model&lt;/td>
&lt;td>中文预训练模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GLM&lt;/td>
&lt;td>GLM&lt;/td>
&lt;td>General Language Model&lt;/td>
&lt;td>通用语言模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MacBert&lt;/td>
&lt;td>MacBert&lt;/td>
&lt;td>MacBert&lt;/td>
&lt;td>MacBert&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Chinese BERT&lt;/td>
&lt;td>Chinese BERT&lt;/td>
&lt;td>Chinese BERT&lt;/td>
&lt;td>中文 BERT&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="术语及其中英文对应">术语及其中英文对应
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文术语&lt;/th>
&lt;th>中文翻译&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AIGC&lt;/td>
&lt;td>人工智能生成内容&lt;/td>
&lt;td>通过AI技术自动生成的各类媒体内容（文本、图像、音频等）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Large Language Model&lt;/td>
&lt;td>大型语言模型&lt;/td>
&lt;td>LLM 的核心概念&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pre training&lt;/td>
&lt;td>预训练&lt;/td>
&lt;td>模型在大量数据上的初始训练&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Fine-tuning&lt;/td>
&lt;td>微调&lt;/td>
&lt;td>在特定任务上调整模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Transformer&lt;/td>
&lt;td>变换器&lt;/td>
&lt;td>LLM 常用的架构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Attention mechanism&lt;/td>
&lt;td>注意力机制&lt;/td>
&lt;td>变换器中的关键技术&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Word embedding&lt;/td>
&lt;td>词嵌入&lt;/td>
&lt;td>单词到向量表示&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Contextualized embedding&lt;/td>
&lt;td>上下文嵌入&lt;/td>
&lt;td>考虑上下文的嵌入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Masked language modeling&lt;/td>
&lt;td>掩码语言建模&lt;/td>
&lt;td>BERT 使用的预训练任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Next sentence prediction&lt;/td>
&lt;td>下一句预测&lt;/td>
&lt;td>BERT 早期使用的任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Transfer learning&lt;/td>
&lt;td>迁移学习&lt;/td>
&lt;td>模型在不同任务间的应用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Natural language processing&lt;/td>
&lt;td>自然语言处理&lt;/td>
&lt;td>LLM 的应用领域&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Deep learning&lt;/td>
&lt;td>深度学习&lt;/td>
&lt;td>LLM 的基础技术&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Neural network&lt;/td>
&lt;td>神经网络&lt;/td>
&lt;td>深度学习的构建块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Gradient descent&lt;/td>
&lt;td>梯度下降&lt;/td>
&lt;td>优化算法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Backpropagation&lt;/td>
&lt;td>反向传播&lt;/td>
&lt;td>训练神经网络的核心方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prompt&lt;/td>
&lt;td>提示&lt;/td>
&lt;td>输入给模型的指令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prompt engineering&lt;/td>
&lt;td>提示工程&lt;/td>
&lt;td>优化提示以改善输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Few-shot learning&lt;/td>
&lt;td>少样本学习&lt;/td>
&lt;td>少量示例下学习&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Zero-shot learning&lt;/td>
&lt;td>零样本学习&lt;/td>
&lt;td>无示例直接推理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>In-context learning&lt;/td>
&lt;td>上下文学习&lt;/td>
&lt;td>基于上下文的推理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Parameter-efficient fine-tuning&lt;/td>
&lt;td>参数高效微调&lt;/td>
&lt;td>减少参数调整的微调方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Model scaling&lt;/td>
&lt;td>模型扩展&lt;/td>
&lt;td>增加模型规模以提升性能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compute-optimal scaling&lt;/td>
&lt;td>计算最优扩展&lt;/td>
&lt;td>优化计算资源的使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Data-optimal scaling&lt;/td>
&lt;td>数据最优扩展&lt;/td>
&lt;td>优化数据使用的扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Encoder-decoder architecture&lt;/td>
&lt;td>编码解码器架构&lt;/td>
&lt;td>某些 LLM 的架构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Auto-regressive model&lt;/td>
&lt;td>自回归模型&lt;/td>
&lt;td>生成文本的模型类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bidirectional model&lt;/td>
&lt;td>双向模型&lt;/td>
&lt;td>考虑前后文的模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Self-supervision&lt;/td>
&lt;td>自监督&lt;/td>
&lt;td>无需标签的训练方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unsupervised learning&lt;/td>
&lt;td>无监督学习&lt;/td>
&lt;td>无标签数据的学习&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Supervised learning&lt;/td>
&lt;td>监督学习&lt;/td>
&lt;td>有标签数据的学习&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>计算机内存与缓存</title><link>https://blog.yellster.top/p/ram_and_cache/</link><pubDate>Wed, 19 Mar 2025 14:41:19 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/ram_and_cache/</guid><description>&lt;h2 id="计算机的存储设备">计算机的存储设备
&lt;/h2>&lt;p>计算机中包括三种类型的存储设备：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>硬盘（hard disk）&lt;/strong>, 用于长期存储大量数据&lt;/li>
&lt;li>&lt;strong>内存（random-access memory, RAM）&lt;/strong>, 用于临时存储程序运行中正在处理的数据&lt;/li>
&lt;li>&lt;strong>缓存（cache memory）&lt;/strong>, 用于存储经常访问的数据和指令&lt;/li>
&lt;/ul>
&lt;p>在程序运行时，数据会从硬盘中被读取到内存中，供 CPU 计算使用。缓存可以看作 CPU 的一部分，&lt;strong>它通过智能地从内存加载数据&lt;/strong>，给 CPU 提供高速的数据读取，从而显著提升程序的执行效率，减少对较慢的内存的依赖。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>硬盘&lt;/th>
&lt;th>内存&lt;/th>
&lt;th>缓存&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>用途&lt;/td>
&lt;td>长期存储数据，包括操作系统、程序、文件等&lt;/td>
&lt;td>临时存储当前运行的程序和正在处理的数据&lt;/td>
&lt;td>存储经常访问的数据和指令，减少 CPU 访问内存的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>易失性&lt;/td>
&lt;td>断电后数据不会丢失&lt;/td>
&lt;td>断电后数据会丢失&lt;/td>
&lt;td>断电后数据会丢失&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>容量&lt;/td>
&lt;td>较大，TB 级别&lt;/td>
&lt;td>较小，GB 级别&lt;/td>
&lt;td>非常小，MB 级别&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>速度&lt;/td>
&lt;td>较慢，几百到几千 MB/s&lt;/td>
&lt;td>较快，几十 GB/s&lt;/td>
&lt;td>非常快，几十到几百 GB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>价格&lt;/td>
&lt;td>较便宜，几毛到几元 / GB&lt;/td>
&lt;td>较贵，几十到几百元 / GB&lt;/td>
&lt;td>非常贵，随 CPU 打包计价&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="硬盘难以被内存取代">硬盘难以被内存取代
&lt;/h3>&lt;ul>
&lt;li>首先，内存中的数据在断电后会丢失，因此它不适合长期存储数据；&lt;/li>
&lt;li>其次，内存的成本是硬盘的几十倍，这使得它难以在消费者市场普及。&lt;/li>
&lt;/ul>
&lt;h3 id="缓存的大容量和高速度难以兼得">缓存的大容量和高速度难以兼得
&lt;/h3>&lt;ul>
&lt;li>随着 L1、L2、L3 缓存的容量逐步增大，其物理尺寸会变大，与 CPU 核心之间的物理距离会变远，从而导致数据传输时间增加，元素访问延迟变高。&lt;/li>
&lt;li>在当前技术下，多层级的缓存结构是容量、速度和成本之间的最佳平衡点。&lt;/li>
&lt;/ul>
&lt;h2 id="内存效率">内存效率
&lt;/h2>&lt;p>内存是有限的，且同一块内存不能被多个程序共享，因此我们希望数据结构能够尽可能高效地利用空间。&lt;/p>
&lt;p>数组的元素紧密排列，不需要额外的空间来存储链表节点间的引用（指针），因此空间效率更高。然而，数组需要一次性分配足够的连续内存空间，这可能导致内存浪费，数组扩容也需要额外的时间和空间成本。相比之下，链表以“节点”为单位进行动态内存分配和回收，提供了更大的灵活性。&lt;/p>
&lt;p>在程序运行时，&lt;strong>随着反复申请与释放内存，空闲内存的碎片化程度会越来越高&lt;/strong>，从而导致内存的利用效率降低。数组由于其连续的存储方式，相对不容易导致内存碎片化。相反，链表的元素是分散存储的，在频繁的插入与删除操作中，更容易导致内存碎片化。&lt;/p>
&lt;h3 id="内存碎片化">内存碎片化
&lt;/h3>&lt;p>在程序运行过程中，反复申请和释放内存会导致内存碎片化，从而降低内存利用效率。&lt;/p>
&lt;p>内存碎片化的本质是&lt;strong>内存分配和释放的不连续&lt;/strong>操作导致空闲内存分散，无法高效利用。&lt;/p>
&lt;p>理解这一机制有助于：&lt;/p>
&lt;ol>
&lt;li>优化内存分配策略（如减少小对象分配）。&lt;/li>
&lt;li>选择合适的工具（如内存池或高效分配器）。&lt;/li>
&lt;li>在系统设计阶段规避潜在的内存瓶颈。&lt;/li>
&lt;/ol>
&lt;h4 id="内存分配的基本机制">内存分配的基本机制
&lt;/h4>&lt;p>程序运行时，动态内存（堆内存）的分配和释放由内存管理器（如 &lt;code>malloc&lt;/code>/&lt;code>free&lt;/code>）负责。&lt;/p>
&lt;p>内存管理器需要维护一个&lt;strong>空闲内存块列表&lt;/strong>，记录哪些内存区域是未被占用的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>内存申请&lt;/strong>：当程序申请内存时，内存管理器会从空闲列表中找到一个足够大的连续内存块分配给程序。&lt;/li>
&lt;li>&lt;strong>内存释放&lt;/strong>：当程序释放内存时，内存管理器将释放的内存块&lt;strong>重新标记为空闲&lt;/strong>，并合并相邻的空闲块（如果可能）。&lt;/li>
&lt;/ul>
&lt;h4 id="内存碎片化的类型">内存碎片化的类型
&lt;/h4>&lt;p>内存碎片化分为两种类型：&lt;/p>
&lt;h5 id="外部碎片external-fragmentation">外部碎片（External Fragmentation）
&lt;/h5>&lt;p>空闲内存分散在已分配内存块之间，形成许多小的、不连续的空闲块。&lt;/p>
&lt;p>即使总的空闲内存足够，但缺乏足够大的连续内存块，导致无法满足后续较大的内存申请请求。&lt;/p>
&lt;ul>
&lt;li>假设堆内存初始为 100KB 连续空间。&lt;/li>
&lt;li>程序依次申请了 20KB、30KB、50KB 的内存块，然后释放中间的 30KB。&lt;/li>
&lt;li>此时空闲内存为 30KB，但被分割为两部分：20KB（已分配）和 30KB（空闲）之间夹着 50KB（已分配）。&lt;/li>
&lt;li>若程序需要申请 40KB，虽然总空闲内存为 30KB + 后续可能的其他空闲块，但无法找到连续的 40KB 空间，导致分配失败。&lt;/li>
&lt;/ul>
&lt;h5 id="内部碎片internal-fragmentation">内部碎片（Internal Fragmentation）
&lt;/h5>&lt;p>分配给程序的内存块中，未被实际使用的部分。浪费已分配的内存空间。&lt;/p>
&lt;ul>
&lt;li>内存管理器按固定大小（如 16KB）分配内存块，但程序仅需要 10KB。&lt;/li>
&lt;li>剩余的 6KB 未被使用，但无法被其他程序利用。&lt;/li>
&lt;/ul>
&lt;h4 id="内存碎片化的形成过程">内存碎片化的形成过程
&lt;/h4>&lt;h5 id="初始状态">初始状态
&lt;/h5>&lt;p>堆内存为连续的空闲块（例如 100KB）。&lt;/p>
&lt;h5 id="多次分配与释放">多次分配与释放
&lt;/h5>&lt;ul>
&lt;li>程序依次申请不同大小的内存块（如 20KB、30KB、40KB）。&lt;/li>
&lt;li>随后释放部分内存块（如中间的 30KB）。&lt;/li>
&lt;li>释放的内存块被标记为空闲，但可能与相邻的空闲块合并（取决于内存管理器的策略）。&lt;/li>
&lt;/ul>
&lt;h5 id="碎片化加剧">碎片化加剧
&lt;/h5>&lt;ul>
&lt;li>反复的分配和释放操作会导致空闲内存块逐渐被分割成更小的、非连续的块。&lt;/li>
&lt;li>即使总空闲内存足够，但无法满足较大的连续内存请求。&lt;/li>
&lt;/ul>
&lt;h5 id="示例场景">示例场景
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">初始内存 &lt;span class="o">[&lt;/span>----------------100KB----------------&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">分配后： &lt;span class="o">[&lt;/span>A:20KB&lt;span class="o">][&lt;/span>B:30KB &lt;span class="o">][&lt;/span>C:50KB &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">释放B后： &lt;span class="o">[&lt;/span>A:20KB&lt;span class="o">][&lt;/span>---30KB---&lt;span class="o">][&lt;/span>C:50KB &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">此时，总空闲内存为 30KB，但被分割为两部分（假设内存管理器未合并相邻空闲块）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">若申请 40KB，会失败，因为没有连续的 40KB 空间。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="内存碎片化的影响">内存碎片化的影响
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>内存利用率下降&lt;/strong>：大量小空闲块无法被有效利用。&lt;/li>
&lt;li>&lt;strong>分配延迟增加&lt;/strong>：内存管理器需要更复杂的策略来查找可用内存块。&lt;/li>
&lt;li>&lt;strong>程序崩溃风险&lt;/strong>：无法满足关键内存申请时，程序可能崩溃或抛出异常（如 &lt;code>OutOfMemoryError&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;h4 id="内存管理器的应对策略">内存管理器的应对策略
&lt;/h4>&lt;p>为减少碎片化，内存管理器会采用以下策略：&lt;/p>
&lt;h5 id="合并相邻空闲块coalescing">合并相邻空闲块（Coalescing）
&lt;/h5>&lt;ul>
&lt;li>释放内存时，检查相邻块是否空闲，若空闲则合并为一个更大的块。&lt;/li>
&lt;li>&lt;strong>示例&lt;/strong>：释放 B（30KB）后，若相邻块 A 或 C 是空闲的，则合并它们。&lt;/li>
&lt;/ul>
&lt;h5 id="内存分配算法">内存分配算法
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>首次适应（First Fit）&lt;/strong>：从空闲列表头部开始查找第一个足够大的块。&lt;/li>
&lt;li>&lt;strong>最佳适应（Best Fit）&lt;/strong>：查找最小的足够大的块。&lt;/li>
&lt;li>&lt;strong>最差适应（Worst Fit）&lt;/strong>：查找最大的块。&lt;/li>
&lt;li>&lt;strong>伙伴系统（Buddy System）&lt;/strong>：将内存按 2 的幂次大小分割，便于合并。&lt;/li>
&lt;/ul>
&lt;h5 id="内存池memory-pool">内存池（Memory Pool）
&lt;/h5>&lt;ul>
&lt;li>预分配多个固定大小的内存块，减少内部碎片（但可能增加外部碎片）。&lt;/li>
&lt;/ul>
&lt;h4 id="实际应用中的解决方案">实际应用中的解决方案
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>避免频繁小内存分配&lt;/strong>：使用对象池或缓存重用对象。&lt;/li>
&lt;li>&lt;strong>使用高效的内存分配器&lt;/strong>：如 &lt;code>jemalloc&lt;/code> 或 &lt;code>tcmalloc&lt;/code>，优化碎片化问题。&lt;/li>
&lt;li>&lt;strong>垃圾回收（GC）&lt;/strong>：在托管语言（如 Java、C#）中，GC 会自动合并碎片（但仍有停顿时间成本）。&lt;/li>
&lt;li>&lt;strong>内存压缩&lt;/strong>：移动已分配内存块以合并空闲空间（需暂停程序，如某些 GC 策略）。&lt;/li>
&lt;/ul>
&lt;h2 id="缓存效率">缓存效率
&lt;/h2>&lt;p>缓存虽然在空间容量上远小于内存，但它比内存快得多，在程序执行速度上起着至关重要的作用。&lt;/p>
&lt;p>由于缓存的容量有限，只能存储一小部分频繁访问的数据，因此当 CPU 尝试访问的数据不在缓存中时，就会发生&lt;code>缓存未命中（cache miss）&lt;/code>，此时 CPU 不得不从速度较慢的内存中加载所需数据。&lt;/p>
&lt;p>显然，“缓存未命中”越少，CPU 读写数据的效率就越高，程序性能也就越好。&lt;/p>
&lt;blockquote>
&lt;p>我们将 CPU 从缓存中成功获取数据的比例称为&lt;code>缓存命中率（cache hit rate）&lt;/code>，这个指标通常用来衡量缓存效率。&lt;/p>&lt;/blockquote>
&lt;p>为了尽可能达到更高的效率，缓存会采取以下数据加载机制。&lt;/p>
&lt;ul>
&lt;li>缓存行：缓存不是单个字节地存储与加载数据，而是以缓存行为单位。相比于单个字节的传输，缓存行的传输形式更加高效。&lt;/li>
&lt;li>预取机制：处理器会尝试预测数据访问模式（例如顺序访问、固定步长跳跃访问等），并根据特定模式将数据加载至缓存之中，从而提升命中率。&lt;/li>
&lt;li>空间局部性：如果一个数据被访问，那么它附近的数据可能近期也会被访问。因此，缓存在加载某一数据时，也会加载其附近的数据，以提高命中率。&lt;/li>
&lt;li>时间局部性：如果一个数据被访问，那么它在不久的将来很可能再次被访问。缓存利用这一原理，通过保留最近访问过的数据来提高命中率。&lt;/li>
&lt;/ul>
&lt;p>实际上，数组和链表对缓存的利用效率是不同的，主要体现在以下几个方面。&lt;/p>
&lt;ul>
&lt;li>占用空间：链表元素比数组元素占用空间更多，导致缓存中容纳的有效数据量更少。&lt;/li>
&lt;li>缓存行：链表数据分散在内存各处，而缓存是“按行加载”的，因此加载到无效数据的比例更高。&lt;/li>
&lt;li>预取机制：数组比链表的数据访问模式更具“可预测性”，即系统更容易猜出即将被加载的数据。&lt;/li>
&lt;li>空间局部性：数组被存储在集中的内存空间中，因此被加载数据附近的数据更有可能即将被访问。&lt;/li>
&lt;/ul>
&lt;p>总体而言，&lt;strong>数组具有更高的缓存命中率&lt;/strong>，因此它在操作效率上通常优于链表。但需要注意的是，&lt;strong>高缓存效率并不意味着数组在所有情况下都优于链表&lt;/strong>。实际应用中选择哪种数据结构，应根据具体需求来决定。&lt;/p></description></item><item><title>堆与栈</title><link>https://blog.yellster.top/p/heap-and-stack/</link><pubDate>Mon, 09 Dec 2024 16:19:57 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/heap-and-stack/</guid><description>&lt;p>栈和堆都是代码在运行时可供使用的内存，但是它们的结构不同。&lt;/p>
&lt;h2 id="栈stack">栈，Stack
&lt;/h2>&lt;p>栈以放入值的顺序存储值并以相反顺序取出值。这也被称作 &lt;strong>后进先出&lt;/strong>（&lt;em>last in, first out&lt;/em>）。&lt;/p>
&lt;blockquote>
&lt;p>想象一下一叠盘子：当增加更多盘子时，把它们放在盘子堆的顶部，当需要盘子时，也从顶部拿走。&lt;/p>
&lt;p>&lt;strong>不能从中间也不能从底部增加或拿走盘子！&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>增加数据叫做 &lt;strong>进栈&lt;/strong>（&lt;em>pushing onto the stack&lt;/em>），而移出数据叫做 &lt;strong>出栈&lt;/strong>（&lt;em>popping off the stack&lt;/em>）。&lt;/p>
&lt;p>栈中的所有数据都必须占用已知且固定的大小。&lt;/p>
&lt;p>&lt;em>&lt;strong>在编译时大小未知或大小可能变化的数据，要改为存储在堆上。&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="堆heap">堆，Heap
&lt;/h2>&lt;p>堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。&lt;/p>
&lt;p>内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 &lt;strong>指针&lt;/strong>（&lt;em>pointer&lt;/em>）。
这个过程称作 &lt;strong>在堆上分配内存&lt;/strong>（&lt;em>allocating on the heap&lt;/em>），有时简称为 “分配”（allocating）。（将数据推入栈中并不被认为是分配）。&lt;/p>
&lt;p>因为指向放入堆中数据的指针是已知的并且大小是固定的，你可以将该指针存储在栈上，不过当需要实际数据时，必须访问指针。&lt;/p>
&lt;blockquote>
&lt;p>想象一下去餐馆就座吃饭。当进入时，你说明有几个人，餐馆员工会找到一个够大的空桌子并领你们过去。
如果有人来迟了，他们也可以通过询问来找到你们坐在哪。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://blog.yellster.top/p/heap-and-stack/%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.png"
width="869"
height="489"
srcset="https://blog.yellster.top/p/heap-and-stack/%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_hu_d3f078da91f14f2c.png 480w, https://blog.yellster.top/p/heap-and-stack/%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_hu_fbb293b7abfb0dbc.png 1024w"
loading="lazy"
alt="堆内存管理常见问题"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h2 id="比较">比较
&lt;/h2>&lt;p>入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。
相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。&lt;/p>
&lt;p>访问堆上的数据比访问栈上的数据慢，因为必须通过指针来访问。现代处理器在内存中跳转越少就越快（缓存）。&lt;/p>
&lt;blockquote>
&lt;p>继续类比，假设有一个服务员在餐厅里处理多个桌子的点菜。
在一个桌子报完所有菜后再移动到下一个桌子是最有效率的。
从桌子 A 听一个菜，接着桌子 B 听一个菜，然后再桌子 A，然后再桌子 B 这样的流程会更加缓慢。
出于同样原因，处理器在处理的数据彼此较近的时候（比如在栈上）比较远的时候（比如可能在堆上）能更好的工作。&lt;/p>&lt;/blockquote>
&lt;p>当你的代码调用一个函数时，传递给函数的值（包括可能指向堆上数据的指针）和函数的局部变量被压入栈中。当函数结束时，这些值被移出栈。&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/heap-and-stack/%E5%A0%86%E4%B8%8E%E6%A0%88%E6%AF%94%E8%BE%83.png"
width="869"
height="489"
srcset="https://blog.yellster.top/p/heap-and-stack/%E5%A0%86%E4%B8%8E%E6%A0%88%E6%AF%94%E8%BE%83_hu_932e44b5127ea0a5.png 480w, https://blog.yellster.top/p/heap-and-stack/%E5%A0%86%E4%B8%8E%E6%A0%88%E6%AF%94%E8%BE%83_hu_89082f8e6472426f.png 1024w"
loading="lazy"
alt="堆与栈比较"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p></description></item><item><title>Rust学习笔记01 - 所有权</title><link>https://blog.yellster.top/p/ownership/</link><pubDate>Mon, 09 Dec 2024 12:46:41 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/ownership/</guid><description>&lt;h2 id="所有权ownership">所有权，ownership
&lt;/h2>&lt;p>&lt;a class="link" href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html" target="_blank" rel="noopener"
>What is Ownership? - The Rust Programming Language (rust-lang.org)&lt;/a>&lt;/p>
&lt;h3 id="所有权规则">所有权规则
&lt;/h3>&lt;ul>
&lt;li>Rust 中的每一个值都有一个 &lt;strong>所有者&lt;/strong>（&lt;em>owner&lt;/em>）&lt;/li>
&lt;li>值在任一时刻有且只有一个所有者&lt;/li>
&lt;li>当所有者（变量）离开作用域，这个值将被丢弃，（例如，函数执行完）&lt;/li>
&lt;/ul>
&lt;h3 id="变量作用域">变量作用域
&lt;/h3>&lt;p>变量的作用域从声明开始，到最后一次使用的地方结束&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="c1">// s 在这里无效，它尚未声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">    &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 从此处起，s 是有效的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">    &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 使用 s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 此作用域已结束，s 不再有效
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>[!tip]&lt;/p>
&lt;ul>
&lt;li>当 &lt;code>s&lt;/code> &lt;strong>进入作用域&lt;/strong> 时，它就是有效的&lt;/li>
&lt;li>这一直持续到它 &lt;strong>离开作用域&lt;/strong> 为止&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h3 id="内存与分配">内存与分配
&lt;/h3>&lt;p>在有 &lt;strong>垃圾回收&lt;/strong>（&lt;em>garbage collector&lt;/em>，&lt;em>GC&lt;/em>）的语言中，GC 记录并清除不再使用的内存，而我们并不需要关心它。
在大部分没有 GC 的语言中，识别出不再使用的内存并调用代码显式释放就是我们的责任了，跟请求内存的时候一样。
从历史的角度上说正确处理内存回收曾经是一个困难的编程问题。&lt;/p>
&lt;ul>
&lt;li>如果忘记回收了会浪费内存&lt;/li>
&lt;li>如果过早回收了，将会出现无效变量&lt;/li>
&lt;li>如果重复回收，这也是个 bug、&lt;/li>
&lt;li>我们需要精确的为一个 &lt;code>allocate&lt;/code> 配对一个 &lt;code>free&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Rust 采取了一个不同的策略：内存在拥有它的变量离开作用域后就被自动释放。&lt;/strong>&lt;/p>
&lt;p>当变量离开作用域，Rust 为我们调用一个特殊的函数。这个函数叫做 &lt;a class="link" href="https://doc.rust-lang.org/std/ops/trait.Drop.html#tymethod.drop" target="_blank" rel="noopener"
>&lt;code>drop&lt;/code>&lt;/a>。
在这里 &lt;code>String&lt;/code> 的作者可以放置释放内存的代码，Rust 在结尾的 &lt;code>}&lt;/code> 处自动调用 &lt;code>drop&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 从此处起，s 是有效的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 使用 s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 此作用域已结束，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// s 不再有效
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>[!warning]
在 C++ 中，这种 item 在生命周期结束时释放资源的模式有时被称作 &lt;strong>资源获取即初始化&lt;/strong>（&lt;em>Resource Acquisition Is Initialization (RAII)&lt;/em>）&lt;/p>&lt;/blockquote>
&lt;h4 id="移动-变量与数据交互的方式">移动: 变量与数据交互的方式
&lt;/h4>&lt;p>在 Rust 中，多个变量可以采取不同的方式与同一数据进行交互。&lt;/p>
&lt;p>将变量 &lt;code>x&lt;/code> 的整数值赋给 &lt;code>y&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>将 &lt;code>5&lt;/code> 绑定到 &lt;code>x&lt;/code>&lt;/li>
&lt;li>将 &lt;code>x&lt;/code> 的拷贝并绑定到 &lt;code>y&lt;/code>&lt;/li>
&lt;li>整数是有已知固定大小的简单值，所以这两个 &lt;code>5&lt;/code> 被放入了栈中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在看看这个 &lt;code>String&lt;/code> 版本：
第二行可能会生成一个 &lt;code>s1&lt;/code> 的拷贝并绑定到 &lt;code>s2&lt;/code> 上。不过，事实上并不完全是这样&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>String&lt;/code> 由三部分组成&lt;/p>
&lt;ul>
&lt;li>左侧所示：
&lt;ul>
&lt;li>&lt;code>ptr&lt;/code>，指向存放字符串内容内存的指针&lt;/li>
&lt;li>&lt;code>len&lt;/code>，长度，表示当前 &lt;code>String&lt;/code> 内容使用了多少字符数&lt;/li>
&lt;li>&lt;code>capacity&lt;/code>，容量，表示当前 &lt;code>String&lt;/code> 内容从分配器总共获取了多少字节的内存&lt;/li>
&lt;li>&lt;code>capacity &amp;gt;= len&lt;/code>，&lt;code>capacity&lt;/code> 包括了为字符串内容预留的内存量，即使在字符串为空时也是如此&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>这一组数据存储在栈上，右侧则是堆上存放内容的内存部分
![[1.学习/1.开发语言/Rust/assets/trpl04-01.svg|300]]&lt;/li>
&lt;/ul>
&lt;p>当我们将 &lt;code>s1&lt;/code> 赋值给 &lt;code>s2&lt;/code>，&lt;code>String&lt;/code> 的数据被&lt;strong>复制&lt;/strong>了，这意味着我们从栈上拷贝了它的指针、长度和容量。
我们并没有复制指针指向的堆上数据。
![[1.学习/1.开发语言/Rust/assets/trpl04-02.svg|300]]&lt;/p>
&lt;p>如果 Rust 也&lt;strong>拷贝&lt;/strong>了堆上的数据，那么内存看起来就是这样的。
如果 Rust 这么做了，那么操作 &lt;code>s2 = s1&lt;/code> 在堆上数据比较大的时候会对运行时性能造成非常大的影响。
![[1.学习/1.开发语言/Rust/assets/trpl04-03.svg|300]]&lt;/p>
&lt;blockquote>
&lt;p>[!WANING]
当变量离开作用域后，Rust 自动调用 &lt;code>drop&lt;/code> 函数并清理变量的堆内存。
复制，两个数据指针指向了同一位置。
这就有了一个问题：当 &lt;code>s2&lt;/code> 和 &lt;code>s1&lt;/code> 离开作用域，它们都会尝试释放相同的内存。
这是一个叫做 &lt;strong>二次释放&lt;/strong>（&lt;em>double free&lt;/em>）的错误，也是之前提到过的内存安全性 bug 之一。
两次释放（相同）内存会导致内存污染，它可能会导致潜在的安全漏洞。&lt;/p>&lt;/blockquote>
&lt;p>为了确保内存安全，在 &lt;code>let s2 = s1;&lt;/code> 之后，Rust 认为 &lt;code>s1&lt;/code> 不再有效，因此 Rust 不需要在 &lt;code>s1&lt;/code> 离开作用域后清理任何东西。
这段代码不能运行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{s1}&lt;/span>&lt;span class="s">, world!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你会得到一个类似如下的错误，因为 Rust 禁止你使用无效的引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ cargo run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compiling ownership v0.1.0 &lt;span class="o">(&lt;/span>file:///projects/ownership&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error&lt;span class="o">[&lt;/span>E0382&lt;span class="o">]&lt;/span>: borrow of moved value: &lt;span class="sb">`&lt;/span>s1&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --&amp;gt; kafka-producer/src/main.rs:16:15
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">14&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">let&lt;/span> &lt;span class="nv">s1&lt;/span> &lt;span class="o">=&lt;/span> String::from&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span> -- move occurs because &lt;span class="sb">`&lt;/span>s1&lt;span class="sb">`&lt;/span> has &lt;span class="nb">type&lt;/span> &lt;span class="sb">`&lt;/span>String&lt;span class="sb">`&lt;/span>, which does not implement the &lt;span class="sb">`&lt;/span>Copy&lt;span class="sb">`&lt;/span> trait
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">15&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">let&lt;/span> &lt;span class="nv">s2&lt;/span> &lt;span class="o">=&lt;/span> s1&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span> -- value moved here
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">16&lt;/span> &lt;span class="p">|&lt;/span> println!&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;{s1}, world!&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span> ^^^^ value borrowed here after move
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">=&lt;/span> note: this error originates in the macro &lt;span class="sb">`&lt;/span>&lt;span class="nv">$crate&lt;/span>::format_args_nl&lt;span class="sb">`&lt;/span> which comes from the expansion of the macro &lt;span class="sb">`&lt;/span>println&lt;span class="sb">`&lt;/span> &lt;span class="o">(&lt;/span>in Nightly builds, run with -Z macro-backtrace &lt;span class="k">for&lt;/span> more info&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">help: consider cloning the value &lt;span class="k">if&lt;/span> the performance cost is acceptable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">15&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">let&lt;/span> &lt;span class="nv">s2&lt;/span> &lt;span class="o">=&lt;/span> s1.clone&lt;span class="o">()&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span> ++++++++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">For more information about this error, try &lt;span class="sb">`&lt;/span>rustc --explain E0382&lt;span class="sb">`&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">warning: &lt;span class="sb">`&lt;/span>kafka-producer&lt;span class="sb">`&lt;/span> &lt;span class="o">(&lt;/span>bin &lt;span class="s2">&amp;#34;kafka-producer&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> generated &lt;span class="m">1&lt;/span> warning
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error: could not compile &lt;span class="sb">`&lt;/span>kafka-producer&lt;span class="sb">`&lt;/span> &lt;span class="o">(&lt;/span>bin &lt;span class="s2">&amp;#34;kafka-producer&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> due to &lt;span class="m">1&lt;/span> previous error
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>[!TIP]
如果你在其他语言中听说过术语 &lt;strong>浅拷贝&lt;/strong>（&lt;em>shallow copy&lt;/em>）和 &lt;strong>深拷贝&lt;/strong>（&lt;em>deep copy&lt;/em>），那么拷贝指针、长度和容量而不拷贝数据可能听起来像浅拷贝。
不过因为 Rust 同时使第一个变量无效了，这个操作被称为 &lt;strong>移动&lt;/strong>（&lt;em>move&lt;/em>），而不是叫做浅拷贝。
上面的例子可以解读为 &lt;code>s1&lt;/code> 被 &lt;strong>移动&lt;/strong> 到了 &lt;code>s2&lt;/code> 中。
![[1.学习/1.开发语言/Rust/assets/trpl04-04.svg|300]]&lt;/p>&lt;/blockquote>
&lt;p>这样就解决了我们的问题！因为只有 &lt;code>s2&lt;/code> 是有效的，当其离开作用域，它就释放自己的内存，完毕。&lt;/p>
&lt;p>另外，这里还隐含了一个设计选择：Rust 永远也不会自动创建数据的 “深拷贝”。
因此，任何 &lt;strong>自动&lt;/strong> 的复制都可以被认为是对运行时性能影响较小的。&lt;/p>
&lt;h4 id="克隆-变量与数据交互的方式">克隆: 变量与数据交互的方式
&lt;/h4>&lt;p>如果 &lt;strong>确实&lt;/strong> 需要深度复制 &lt;code>String&lt;/code> 中堆上的数据，而不仅仅是栈上的数据，可以使用一个叫做 &lt;code>clone&lt;/code> 的通用函数。&lt;/p>
&lt;p>这是一个实际使用 &lt;code>clone&lt;/code> 方法的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;s1 = &lt;/span>&lt;span class="si">{s1}&lt;/span>&lt;span class="s">, s2 = &lt;/span>&lt;span class="si">{s2}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码能正常运行，这里堆上的数据 &lt;strong>确实&lt;/strong> 被复制了。
![[1.学习/1.开发语言/Rust/assets/trpl04-03.svg|300]]&lt;/p>
&lt;h4 id="拷贝-只在栈上的数据">拷贝: 只在栈上的数据
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x = &lt;/span>&lt;span class="si">{x}&lt;/span>&lt;span class="s">, y = &lt;/span>&lt;span class="si">{y}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但这段代码似乎似乎和上面的内容相矛盾：没有调用 &lt;code>clone&lt;/code>，不过 &lt;code>x&lt;/code> 依然有效且没有被移动到 &lt;code>y&lt;/code> 中。&lt;/p>
&lt;p>原因是像整型这样的在编译时已知大小的类型被整个存储在栈上，所以拷贝其实际的值是快速的。&lt;strong>这意味着没有理由在创建变量 &lt;code>y&lt;/code> 后使 &lt;code>x&lt;/code> 无效&lt;/strong>。
换句话说，这里没有深浅拷贝的区别，所以这里调用 &lt;code>clone&lt;/code> 并不会与通常的浅拷贝有什么不同，可以不用管它。&lt;/p>
&lt;p>Rust 有一个叫做 &lt;code>Copy&lt;/code> trait 的特殊注解，可以用在类似整型这样的存储在栈上的类型上。
如果一个类型实现了 &lt;code>Copy&lt;/code> trait，那么一个旧的变量在将其赋值给其他变量后仍然可用。&lt;/p>
&lt;p>Rust 不允许自身或其任何部分实现了 &lt;code>Drop&lt;/code> trait 的类型使用 &lt;code>Copy&lt;/code> trait。
如果我们对其值离开作用域时需要特殊处理的类型使用 &lt;code>Copy&lt;/code> 注解，将会出现一个编译时错误。&lt;/p>
&lt;p>那么哪些类型实现了 &lt;code>Copy&lt;/code> trait 呢？你可以查看给定类型的文档来确认，不过作为一个通用的规则，任何一组简单标量值的组合都可以实现 &lt;code>Copy&lt;/code>，任何不需要分配内存或某种形式资源的类型都可以实现 &lt;code>Copy&lt;/code> 。如下是一些 &lt;code>Copy&lt;/code> 的类型：&lt;/p>
&lt;ul>
&lt;li>所有整数类型，比如 &lt;code>u32&lt;/code>。&lt;/li>
&lt;li>布尔类型，&lt;code>bool&lt;/code>，它的值是 &lt;code>true&lt;/code> 和 &lt;code>false&lt;/code>。&lt;/li>
&lt;li>所有浮点数类型，比如 &lt;code>f64&lt;/code>。&lt;/li>
&lt;li>字符类型，&lt;code>char&lt;/code>。&lt;/li>
&lt;li>元组，当且仅当其包含的类型也都实现 &lt;code>Copy&lt;/code> 的时候。比如，&lt;code>(i32, i32)&lt;/code> 实现了 &lt;code>Copy&lt;/code>，但 &lt;code>(i32, String)&lt;/code> 就没有。&lt;/li>
&lt;/ul>
&lt;h3 id="所有权与函数">所有权与函数
&lt;/h3>&lt;p>将值传递给函数与给变量赋值的原理相似。向函数传递值可能会移动或者复制，就像赋值语句一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// s 进入作用域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">takes_ownership&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// s 的值移动到函数里 ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... 所以到这里不再有效
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// x 进入作用域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">makes_copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// x 应该移动函数里，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 但 i32 是 Copy 的，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 所以在后面可继续使用 x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这里，x 先移出了作用域，然后是 s。但因为 s 的值已被移走，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 没有特殊之处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">takes_ownership&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">some_string&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// some_string 进入作用域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_string&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这里，some_string 移出作用域并调用 `drop` 方法。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 占用的内存被释放
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">makes_copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">some_integer&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// some_integer 进入作用域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_integer&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这里，some_integer 移出作用域。没有特殊之处
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当尝试在调用 &lt;code>takes_ownership&lt;/code> 后使用 &lt;code>s&lt;/code> 时，Rust 会抛出一个编译时错误。这些静态检查使我们免于犯错。&lt;/p>
&lt;h3 id="返回值与作用域">返回值与作用域
&lt;/h3>&lt;p>返回值也可以转移所有权。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gives_ownership&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// gives_ownership 将返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 转移给 s1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// s2 进入作用域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">takes_and_gives_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// s2 被移动到
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// takes_and_gives_back 中，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 它也将返回值移给 s3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这里，s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 所以什么也不会发生。s1 离开作用域并被丢弃
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">gives_ownership&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// gives_ownership 会将
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 返回值移动给
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 调用它的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_string&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;yours&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// some_string 进入作用域。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">some_string&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 返回 some_string
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 并移出给调用的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// takes_and_gives_back 将传入字符串并返回该值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">takes_and_gives_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a_string&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// a_string 进入作用域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">a_string&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 返回 a_string 并移出给调用的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它。
当持有堆中数据值的变量离开作用域时，其值将通过 &lt;code>drop&lt;/code> 被清理掉，除非数据被移动为另一个变量所有。&lt;/p>
&lt;p>虽然这样是可以的，但是在每一个函数中都获取所有权并接着返回所有权有些啰嗦。如果我们想要函数使用一个值但不获取所有权该怎么办呢？如果我们还要接着使用它的话，每次都传进去再返回来就有点烦人了，除此之外，我们也可能想返回函数体中产生的一些数据。&lt;/p>
&lt;p>我们可以使用元组来返回多个值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">calculate_length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The length of &amp;#39;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#39; is &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">calculate_length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// len() 返回字符串的长度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是这未免有些形式主义，而且这种场景应该很常见。幸运的是，Rust 对此提供了一个不用获取所有权就可以使用值的功能，叫做 &lt;strong>引用&lt;/strong>（&lt;em>references&lt;/em>）。&lt;/p></description></item><item><title>Rust学习笔记00 - 开发工具和环境</title><link>https://blog.yellster.top/p/rust-development-environment/</link><pubDate>Sat, 19 Oct 2024 10:32:07 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/rust-development-environment/</guid><description>&lt;p>在开始 Rust 开发之旅之前，我们需要配置一个高效的开发环境。本文将详细介绍如何搭建一个完整的 Rust 开发环境，包括必要的工具和插件。&lt;/p>
&lt;h2 id="1-安装-rust">1. 安装 Rust
&lt;/h2>&lt;p>首先，我们需要安装 Rust 编程语言。使用以下命令安装 Rust：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl --proto &lt;span class="s1">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令会安装 Rust 编译器（rustc）和包管理器（cargo）。&lt;/p>
&lt;h2 id="2-vscode-插件配置">2. VSCode 插件配置
&lt;/h2>&lt;p>VSCode 是推荐的 Rust 开发 IDE，以下是一些必备的插件：&lt;/p>
&lt;h3 id="核心插件">核心插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>rust-analyzer&lt;/strong>: Rust 语言支持，提供代码补全、类型检查等功能&lt;/li>
&lt;li>&lt;strong>crates&lt;/strong>: Rust 包管理工具&lt;/li>
&lt;li>&lt;strong>Even Better TOML&lt;/strong>: TOML 文件支持&lt;/li>
&lt;li>&lt;strong>Better Comments&lt;/strong>: 优化注释显示&lt;/li>
&lt;li>&lt;strong>Error Lens&lt;/strong>: 错误提示优化&lt;/li>
&lt;/ul>
&lt;h3 id="开发效率插件">开发效率插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>GitLens&lt;/strong>: Git 增强功能&lt;/li>
&lt;li>&lt;strong>Github Copilot&lt;/strong>: AI 代码提示&lt;/li>
&lt;li>&lt;strong>indent-rainbow&lt;/strong>: 缩进显示优化&lt;/li>
&lt;li>&lt;strong>Prettier&lt;/strong>: 代码格式化&lt;/li>
&lt;li>&lt;strong>REST client&lt;/strong>: REST API 调试工具&lt;/li>
&lt;/ul>
&lt;h3 id="测试相关插件">测试相关插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Rust Test lens&lt;/strong>: Rust 测试支持&lt;/li>
&lt;li>&lt;strong>Rust Test Explorer&lt;/strong>: Rust 测试概览&lt;/li>
&lt;/ul>
&lt;h3 id="其他实用插件">其他实用插件
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>TODO Highlight&lt;/strong>: TODO 高亮&lt;/li>
&lt;li>&lt;strong>vscode-icons&lt;/strong>: 文件图标优化&lt;/li>
&lt;li>&lt;strong>YAML&lt;/strong>: YAML 文件支持&lt;/li>
&lt;/ul>
&lt;h2 id="3-开发工具链配置">3. 开发工具链配置
&lt;/h2>&lt;h3 id="cargo-generate">Cargo Generate
&lt;/h3>&lt;p>用于生成项目模板的工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install cargo-generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用模板创建新项目：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo generate tyr-rust-bootcamp/template
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="pre-commit">Pre-commit
&lt;/h3>&lt;p>代码提交前的检查工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pipx install pre-commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pre-commit install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cargo-deny">Cargo Deny
&lt;/h3>&lt;p>依赖安全检查工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install --locked cargo-deny
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="typos">Typos
&lt;/h3>&lt;p>拼写检查工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install typos-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="git-cliff">Git Cliff
&lt;/h3>&lt;p>生成 changelog 的工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install git-cliff
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cargo-nextest">Cargo Nextest
&lt;/h3>&lt;p>增强的测试工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo install cargo-nextest --locked
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结
&lt;/h2>&lt;p>配置一个完整的 Rust 开发环境需要安装多个工具和插件。这些工具共同构成了一个高效的开发工作流：&lt;/p>
&lt;ol>
&lt;li>使用 rust-analyzer 提供智能的代码补全和错误检查&lt;/li>
&lt;li>通过 pre-commit 确保代码质量&lt;/li>
&lt;li>使用 cargo-deny 保证依赖安全&lt;/li>
&lt;li>借助 cargo-nextest 进行高效的测试&lt;/li>
&lt;/ol>
&lt;p>这些工具的组合使用可以显著提升 Rust 开发效率和代码质量。建议根据实际需求选择性地安装这些工具，不必一次性全部配置。&lt;/p></description></item><item><title>零拷贝</title><link>https://blog.yellster.top/p/zero-copy/</link><pubDate>Sat, 21 Sep 2024 16:09:09 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/zero-copy/</guid><description>&lt;img src="https://blog.yellster.top/p/zero-copy/zero-copy.png" alt="Featured image of post 零拷贝" />&lt;p>&lt;strong>​零拷贝（Zero-Copy）&lt;/strong> 是一种操作系统级别的 I/O 优化技术，旨在减少或避免数据在内存中的多次拷贝，降低 CPU 占用率，提高数据传输效率，尤其适用于高并发、大吞吐量的场景，如网络通信、文件传输等。&lt;/p>
&lt;h2 id="传统-io-的调用">传统 I/O 的调用
&lt;/h2>&lt;p>传统 I/O 操作中，数据需要从磁盘文件拷贝到内核空间，再从内核空间拷贝到用户空间，然后再拷贝到 &lt;code>Socket Buffer&lt;/code> 中，再拷贝到网卡设备。&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/zero-copy/%E4%BC%A0%E7%BB%9F%E6%8B%B7%E8%B4%9D.png"
width="1080"
height="607"
srcset="https://blog.yellster.top/p/zero-copy/%E4%BC%A0%E7%BB%9F%E6%8B%B7%E8%B4%9D_hu_f7b29adf1e79d7de.png 480w, https://blog.yellster.top/p/zero-copy/%E4%BC%A0%E7%BB%9F%E6%8B%B7%E8%B4%9D_hu_d56501e2b550c485.png 1024w"
loading="lazy"
alt="传统拷贝"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/p>
&lt;p>传统的 I/O 操作过程中，涉及到 &lt;strong>4 次上下文切换&lt;/strong>（用户态和内核态的上下文切换）和 &lt;strong>4 次数据拷贝&lt;/strong>（2 次 CPU 拷贝、2 次 DMA 拷贝）：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>上下文从用户态切换到内核态&lt;/strong>：应用程序进程调用 &lt;code>read&lt;/code> ，发起 &lt;code>I/O 调用&lt;/code>；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 将数据从 &lt;code>磁盘文件（硬件设备）&lt;/code> 拷贝到 &lt;code>内核缓冲区（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>上下文从内核态切换到用户态&lt;/strong>：&lt;code>read&lt;/code> 调用返回；&lt;/li>
&lt;li>&lt;strong>CPU 拷贝&lt;/strong>：&lt;code>CPU&lt;/code> 将数据从 &lt;code>内核缓冲区（内核空间）&lt;/code> 拷贝到 &lt;code>用户缓冲区（用户空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>上下文从用户态切换到内核态&lt;/strong>：应用程序进程调用 &lt;code>write&lt;/code> ，发起 &lt;code>I/O 调用&lt;/code>；&lt;/li>
&lt;li>&lt;strong>CPU 拷贝&lt;/strong>：&lt;code>CPU&lt;/code> 将数据从 &lt;code>用户缓冲区（用户空间）&lt;/code> 拷贝到 &lt;code>Socket Buffer（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 将数据从 &lt;code>Socket Buffer（内核空间）&lt;/code> 拷贝到 &lt;code>网卡设备（硬件设备）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>上下文从内核态切换到用户态&lt;/strong>：&lt;code>wirte&lt;/code> 调用返回。&lt;/li>
&lt;/ol>
&lt;h2 id="零拷贝">零拷贝
&lt;/h2>&lt;p>相比 传统 I/O 调用，零拷贝通过直接拷贝数据，避免了多次拷贝操作。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>零拷贝并不是没有拷贝数据，而是减少用户态/内核态的切换次数以及CPU拷贝的次数&lt;/strong>。&lt;/p>&lt;/blockquote>
&lt;h2 id="零拷贝的实现方式">零拷贝的实现方式
&lt;/h2>&lt;h3 id="mmap--write">mmap + write
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>上下文从用户态切换到内核态&lt;/strong>：应用程序进程发起 &lt;code>mmap&lt;/code> 调用；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 将数据从 &lt;code>磁盘文件（硬件设备）&lt;/code> 拷贝到 &lt;code>内核缓冲区（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>上下文从内核态切换到用户态&lt;/strong>：&lt;code>内核缓冲区（内核空间）&lt;/code> 地址和 &lt;code>用户缓冲区（用户空间）&lt;/code>地址映射，内核缓冲区和应用缓冲区共享，&lt;code>mmap&lt;/code> 调用返回；&lt;/li>
&lt;li>&lt;strong>上下文从用户态切换到内核态&lt;/strong>：应用程序进程调用 &lt;code>write&lt;/code> ，发起 &lt;code>I/O 调用&lt;/code>；&lt;/li>
&lt;li>&lt;strong>CPU 拷贝&lt;/strong>：&lt;code>CPU&lt;/code> 将数据从 &lt;code>用户缓冲区（用户空间）&lt;/code> 拷贝到 &lt;code>Socket Buffer（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 根据 &lt;strong>文件描述符信息&lt;/strong> 直接把数据从 &lt;code>内核缓冲区（内核空间）&lt;/code> 拷贝到 &lt;code>网卡设备（硬件设备）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>上下文从内核态切换到用户态&lt;/strong>：&lt;code>write&lt;/code> 调用返回。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.yellster.top/p/zero-copy/mmap.png"
width="2140"
height="1274"
srcset="https://blog.yellster.top/p/zero-copy/mmap_hu_5a941f8777696c89.png 480w, https://blog.yellster.top/p/zero-copy/mmap_hu_34d26fd28530ab6.png 1024w"
loading="lazy"
alt="mmap &amp;#43; write"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="403px"
>&lt;/p>
&lt;p>mmap + write 调用涉及到 &lt;strong>4 次上下文切换&lt;/strong> 和 &lt;strong>3 次数据拷贝&lt;/strong>（1 次 CPU 拷贝、2 次 DMA 拷贝）。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>mmap&lt;/code> 是将读缓冲区的地址和用户缓冲区的地址进行映射，内核缓冲区和应用缓冲区共享，所以节省了一次CPU拷贝，并且用户进程内存是&lt;strong>虚拟的&lt;/strong>，只是&lt;strong>映射到内核的读缓冲区&lt;/strong>，可以节省一半的内存空间。&lt;/p>&lt;/blockquote>
&lt;h3 id="sendfile">sendfile
&lt;/h3>&lt;p>sendfile表示在两个文件描述符之间传输数据，它是在 &lt;strong>操作系统内核&lt;/strong> 中操作的，&lt;strong>避免了数据从内核缓冲区和用户缓冲区之间的拷贝操作&lt;/strong>，因此可以使用它来实现零拷贝。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>上下文从用户态切换到内核态&lt;/strong>：应用程序进程发起 &lt;code>sendfile&lt;/code> 调用；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 将数据从 &lt;code>磁盘文件（硬件设备）&lt;/code> 拷贝到 &lt;code>内核缓冲区（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>CPU 拷贝&lt;/strong>：&lt;code>CPU&lt;/code> 将数据从 &lt;code>内核缓冲区（内核空间）&lt;/code> 拷贝到 &lt;code>Socket Buffer（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 将数据从 &lt;code>Socket Buffer（内核空间）&lt;/code> 拷贝到 &lt;code>网卡设备（硬件设备）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>上下文从内核态切换到用户态&lt;/strong>：&lt;code>sendfile&lt;/code> 调用返回。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.yellster.top/p/zero-copy/sendfile.png"
width="1080"
height="602"
srcset="https://blog.yellster.top/p/zero-copy/sendfile_hu_e7b239b45142fd65.png 480w, https://blog.yellster.top/p/zero-copy/sendfile_hu_9c62413f8190d489.png 1024w"
loading="lazy"
alt="sendfile"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>相比传统 I/O 调用，&lt;code>sendfile&lt;/code> 调用涉及到 &lt;strong>2 次上下文切换&lt;/strong> 和 &lt;strong>3 次数据拷贝&lt;/strong>（1 次 CPU 拷贝、2 次 DMA 拷贝）。&lt;/p>
&lt;h3 id="sendfile--sg-dma">sendfile + SG-DMA
&lt;/h3>&lt;blockquote>
&lt;p>Linux 2.4+版本提出。&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>&lt;strong>上下文从用户态切换到内核态&lt;/strong>：应用程序进程发起 &lt;code>sendfile&lt;/code> 调用；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 将数据从 &lt;code>磁盘文件（硬件设备）&lt;/code> 拷贝到 &lt;code>内核缓冲区（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>只拷贝文件描述符信息&lt;/strong>：&lt;code>CPU&lt;/code> 将 &lt;code>内核缓冲区（内核空间）&lt;/code> 中的 &lt;strong>文件描述符信息&lt;/strong>（包括内核缓冲区的内存地址和偏移量） 拷贝到 &lt;code>Socket Buffer（内核空间）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>DMA 拷贝&lt;/strong>：&lt;code>DMA 控制器&lt;/code> 根据 &lt;strong>文件描述符信息&lt;/strong> 直接把数据从 &lt;code>内核缓冲区（内核空间）&lt;/code> 拷贝到 &lt;code>网卡设备（硬件设备）&lt;/code>；&lt;/li>
&lt;li>&lt;strong>上下文从内核态切换到用户态&lt;/strong>：&lt;code>sendfile&lt;/code> 调用返回。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.yellster.top/p/zero-copy/sendfile&amp;#43;SG-DMA.png"
width="1080"
height="606"
srcset="https://blog.yellster.top/p/zero-copy/sendfile&amp;#43;SG-DMA_hu_7557d5dfc97a5e05.png 480w, https://blog.yellster.top/p/zero-copy/sendfile&amp;#43;SG-DMA_hu_3efc44873afcaced.png 1024w"
loading="lazy"
alt="sendfile &amp;#43; SG-DMA"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>相比单独的 sendfile，&lt;code>sendfile + SG-DMA&lt;/code> 调用涉及到 &lt;strong>2 次上下文切换&lt;/strong> 和 &lt;strong>2 次数据拷贝&lt;/strong>（2 次 DMA 拷贝）。&lt;/p>
&lt;blockquote>
&lt;p>真正实现了 零拷贝，全程都没有通过CPU来搬运数据，所有的数据都是通过DMA来进行传输的。&lt;/p>&lt;/blockquote>
&lt;h3 id="对比">对比
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>上下文切换&lt;/th>
&lt;th>拷贝次数&lt;/th>
&lt;th>CPU参与&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>传统I/O&lt;/td>
&lt;td>4次&lt;/td>
&lt;td>4次&lt;/td>
&lt;td>2次&lt;/td>
&lt;td>通用场景（性能较低）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mmap + write&lt;/td>
&lt;td>4次&lt;/td>
&lt;td>3次&lt;/td>
&lt;td>1次&lt;/td>
&lt;td>需用户态处理数据的场景&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sendfile&lt;/td>
&lt;td>2次&lt;/td>
&lt;td>3次&lt;/td>
&lt;td>1次&lt;/td>
&lt;td>文件到网络的高性能传输&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sendfile + SG-DMA&lt;/td>
&lt;td>2次&lt;/td>
&lt;td>2次&lt;/td>
&lt;td>0次&lt;/td>
&lt;td>文件到网络的高性能传输&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="扩展">扩展
&lt;/h2>&lt;h3 id="内核空间和用户空间">内核空间和用户空间
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>内核空间&lt;/strong>：操作系统内核运行的内存区域，具有最高权限，可以直接访问硬件、内存管理、文件系统等底层资源。&lt;/li>
&lt;li>&lt;strong>用户空间&lt;/strong>：应用程序运行的内存区域，具有较低权限，只能访问受限的资源，如自己的内存、文件等，必须通过 &lt;strong>系统调用（System Call）&lt;/strong> 请求内核资源。&lt;/li>
&lt;/ul>
&lt;h4 id="地址空间划分以-32-位系统4gb-为例">&lt;strong>地址空间划分（以 32 位系统、4GB 为例）：&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>内核空间&lt;/strong>：0xC0000000 ~ 0xFFFFFFFF，约占 1GB，所有进程共享，用于存放内核代码、内核数据、设备驱动等。&lt;/li>
&lt;li>&lt;strong>用户空间&lt;/strong>：0x00000000 ~ 0xBFFFFFFF，约占 3GB，每个进程独享，用于存放用户代码、用户数据、栈、堆等。&lt;/li>
&lt;/ul>
&lt;h4 id="隔离性">&lt;strong>隔离性&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>安全性&lt;/strong>：防止用户程序误操作（如内存越界）导致系统崩溃。例如，用户态程序无法直接清空内存或配置硬件参数。&lt;/li>
&lt;li>&lt;strong>稳定性&lt;/strong>：若用户程序崩溃（如空指针异常），仅影响自身用户空间，内核空间仍可正常运行，保障系统其他进程。&lt;/li>
&lt;li>&lt;strong>资源管理&lt;/strong>：内核统一管理硬件资源（CPU、内存、I/O），避免用户程序直接竞争资源。&lt;/li>
&lt;/ul>
&lt;h3 id="内核态和用户态">内核态和用户态
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>内核态&lt;/strong>：操作系统内核运行的模式，具有最高权限，可直接访问硬件、内存管理、文件系统等底层资源。&lt;/li>
&lt;li>&lt;strong>用户态&lt;/strong>：应用程序运行的模式，具有较低权限，只能访问受限的资源，如自己的内存、文件等，必须通过 &lt;strong>系统调用（System Call）&lt;/strong> 请求内核资源。&lt;/li>
&lt;/ul>
&lt;h4 id="如何切换">&lt;strong>如何切换？&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>场景&lt;/strong>&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>系统调用&lt;/strong>&lt;/td>
&lt;td>用户程序主动请求内核服务（如&lt;code>write()&lt;/code>），通过&lt;code>int 0x80&lt;/code>指令触发切换。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>异常&lt;/strong>&lt;/td>
&lt;td>CPU执行用户程序时发生错误（如缺页异常），强制切换到内核态处理。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>硬件中断&lt;/strong>&lt;/td>
&lt;td>外设完成操作后（如磁盘I/O完成），中断信号触发切换。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>用户态 → 内核态&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>执行特权指令（如&lt;code>int 0x80&lt;/code>），CPU切换到Ring 0。&lt;/li>
&lt;li>保存用户态现场（寄存器、用户栈指针）到内核栈。&lt;/li>
&lt;li>执行内核代码（如系统调用处理程序）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>内核态 → 用户态&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>内核代码执行完毕（如文件写入完成）。&lt;/li>
&lt;li>恢复用户态现场（从内核栈加载寄存器、用户栈指针）。&lt;/li>
&lt;li>通过&lt;code>sysret&lt;/code>指令切换回Ring 3，继续用户程序。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>示例&lt;/strong>：用户程序调用&lt;code>write()&lt;/code>写入文件时：&lt;/p>
&lt;ol>
&lt;li>用户态程序通过库函数触发系统调用。&lt;/li>
&lt;li>CPU切换到内核态，保存用户栈到内核栈。&lt;/li>
&lt;li>内核执行文件写入，完成后恢复用户栈。&lt;/li>
&lt;li>CPU切换回用户态，程序继续执行。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h3 id="微内核和宏内核">微内核和宏内核
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>微内核（Micro Kernel）&lt;/strong>：
&lt;ul>
&lt;li>一种精简的内核设计，仅包含操作系统最基本的核心功能，如进程管理、线程管理、IPC和基本的内存管理。&lt;/li>
&lt;li>其他操作系统功能，如设备驱动、文件系统和网络协议等，则以用户态进程的形式运行。这种设计使得内核代码量小、结构清晰，便于扩展和维护，同时提高了系统的稳定性和安全性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>宏内核（Monolithic Kernel）&lt;/strong>：
&lt;ul>
&lt;li>一种将大部分操作系统功能（如进程管理、内存管理、设备驱动、文件系统等）集成在一个大内核中的设计。&lt;/li>
&lt;li>所有这些功能都运行在内核空间，通过函数调用直接交互。这种设计使得系统性能较高，因为减少了上下文切换和IPC的开销，但内核代码庞大且复杂，维护困难，且一个模块的崩溃可能导致整个系统崩溃。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>主要区别&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>结构设计&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>微内核&lt;/strong> 将大部分功能分离到用户空间，通过IPC通信；&lt;/li>
&lt;li>&lt;strong>宏内核&lt;/strong> 将所有功能集成在内核空间，通过函数调用通信；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>性能&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>微内核&lt;/strong> 由于频繁的IPC和上下文切换，性能可能较低；&lt;/li>
&lt;li>&lt;strong>宏内核&lt;/strong> 通常性能更高，因为减少了IPC开销；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>稳定性和安全性&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>微内核&lt;/strong> 由于内核代码少，攻击面小，且服务隔离，稳定性更高；&lt;/li>
&lt;li>&lt;strong>宏内核&lt;/strong> 由于功能集中，一个模块的崩溃可能导致整个系统崩溃；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>扩展性和维护&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>微内核&lt;/strong> 的模块化设计便于扩展和维护；&lt;/li>
&lt;li>&lt;strong>宏内核&lt;/strong> 由于代码复杂，维护和扩展较为困难。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>典型例子&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>微内核&lt;/strong>：QNX、Minix、华为鸿蒙系统；&lt;/li>
&lt;li>&lt;strong>宏内核&lt;/strong>：Linux、传统的Unix系统、Windows。&lt;/li>
&lt;/ul>
&lt;h3 id="上下文切换">上下文切换
&lt;/h3>&lt;p>&lt;strong>上下文切换&lt;/strong> 是操作系统在CPU核心上切换任务执行状态的过程，具体包括：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>保存当前任务状态&lt;/strong>：用户态虚拟内存、寄存器、程序计数器、内核堆栈等。&lt;/li>
&lt;li>&lt;strong>加载新任务状态&lt;/strong>：从内核的进程控制块（PCB）中恢复新任务的资源。&lt;/li>
&lt;li>&lt;strong>触发条件&lt;/strong>：进程调度（时间片耗尽、I/O完成）、线程切换、中断响应等。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>关键点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>系统调用会触发两次上下文切换（用户态→内核态→用户态），但&lt;strong>不涉及进程切换&lt;/strong>。&lt;/li>
&lt;li>切换耗时：每次约几十纳秒到数微秒，高频切换会显著降低CPU利用率。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>类型&lt;/strong>&lt;/th>
&lt;th>&lt;strong>触发场景&lt;/strong>&lt;/th>
&lt;th>&lt;strong>涉及资源&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>进程切换&lt;/strong>&lt;/td>
&lt;td>多进程竞争CPU（时间片耗尽、进程终止、资源等待）&lt;/td>
&lt;td>用户态虚拟内存、内核堆栈、寄存器、全局变量（需完全切换）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>线程切换&lt;/strong>&lt;/td>
&lt;td>多线程共享进程资源（同进程内线程切换更高效）&lt;/td>
&lt;td>仅切换线程私有数据（寄存器、栈），共享进程虚拟内存和全局变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>中断切换&lt;/strong>&lt;/td>
&lt;td>硬件中断（如I/O完成、定时器中断）触发内核中断服务程序（ISR）&lt;/td>
&lt;td>仅内核态资源（寄存器、内核堆栈），不涉及用户态资源&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>进程切换耗时更高&lt;/strong>：需刷新TLB（Translation Lookaside Buffer），导致内存访问延迟。&lt;/li>
&lt;li>&lt;strong>线程切换更轻量&lt;/strong>：共享虚拟内存，无需刷新TLB，耗时约为进程切换的1/10。&lt;/li>
&lt;/ul>
&lt;h3 id="dma">DMA
&lt;/h3>&lt;p>&lt;strong>DMA（Direct Memory Access，直接内存访问）&lt;/strong> 是一种硬件机制，允许外设直接与计算机内存交换数据，&lt;strong>不需要 CPU 介入每一步拷贝&lt;/strong>。它是现代计算机系统中提升效率、减少CPU占用率的核心技术。&lt;/p>
&lt;p>&lt;strong>以从磁盘读取数据到内存为例&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>传统数据传输&lt;/strong>：
&lt;ol>
&lt;li>CPU发送读取命令；&lt;/li>
&lt;li>磁盘将数据读取到设备侧的 &lt;strong>内部缓冲区（Buffer）&lt;/strong> 中；&lt;/li>
&lt;li>CPU 通过 &lt;strong>轮询或中断&lt;/strong> 方式获取数据，&lt;strong>逐字节或逐块&lt;/strong> 读取设备 Buffer 中的数据，再写入内存；&lt;/li>
&lt;li>在数据传输期间，&lt;strong>CPU 需持续参与搬运工作，无法执行其他任务&lt;/strong>，效率较低。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>DMA 数据传输&lt;/strong>：
&lt;ol>
&lt;li>CPU发送读取命令，并配置 DMA 控制器（源地址、目的地址、数据长度）；&lt;/li>
&lt;li>磁盘将数据读取到设备缓冲区；&lt;/li>
&lt;li>DMA控制器 &lt;strong>自动将数据从设备 Buffer 直接写入内存&lt;/strong>，无需 CPU 参与；&lt;/li>
&lt;li>传输完成后，DMA 发出 &lt;strong>中断通知&lt;/strong> CPU，&lt;strong>CPU 可在此期间处理其他任务&lt;/strong>，整体效率显著提升。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.yellster.top/p/zero-copy/DMA.png"
width="1080"
height="525"
srcset="https://blog.yellster.top/p/zero-copy/DMA_hu_9dc8951193a0bfda.png 480w, https://blog.yellster.top/p/zero-copy/DMA_hu_be4799bd5e34cdde.png 1024w"
loading="lazy"
alt="DMA"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>&lt;/p></description></item><item><title>KISS原则</title><link>https://blog.yellster.top/p/kiss-principle/</link><pubDate>Tue, 17 Sep 2024 19:44:43 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/kiss-principle/</guid><description>&lt;img src="https://blog.yellster.top/p/kiss-principle/kiss.webp" alt="Featured image of post KISS原则" />&lt;h2 id="什么是kiss原则">什么是KISS原则？
&lt;/h2>&lt;p>&lt;strong>KISS原则&lt;/strong>（Keep It Simple, Stupid - 保持简单，笨蛋）是一种强调&lt;strong>简洁性&lt;/strong>的设计哲学，主张在面对问题时，采用最直接、最简单的解决方案，避免不必要的复杂性。&lt;/p>
&lt;blockquote>
&lt;p>这个原则最初由洛克希德公司的首席工程师&lt;strong>凯利·约翰逊&lt;/strong>提出，他要求设计的飞机必须足够简单，普通机械师只需基础工具便能进行维修。这一理念随后被广泛应用到软件开发领域。&lt;/p>&lt;/blockquote>
&lt;h2 id="核心思想">核心思想
&lt;/h2>&lt;h3 id="1-追求简单性">1. 追求简单性
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>选择最直接的解决方案&lt;/strong>：每个问题都有多种解决方案，选择其中最简洁的一种。&lt;/li>
&lt;li>&lt;strong>避免过度设计和不必要的功能&lt;/strong>：避免“过度工程”导致的冗余和复杂性。&lt;/li>
&lt;li>&lt;strong>保持代码清晰易懂&lt;/strong>：通过简洁明了的命名和结构，提高代码的可读性。&lt;/li>
&lt;/ul>
&lt;h3 id="2-消除复杂性">2. 消除复杂性
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>减少依赖关系&lt;/strong>：尽量避免复杂的相互依赖，让系统更易于扩展和维护。&lt;/li>
&lt;li>&lt;strong>避免深层嵌套&lt;/strong>：避免过深的层级结构，使代码更加直观。&lt;/li>
&lt;li>&lt;strong>简化业务逻辑&lt;/strong>：简化逻辑实现，减少不必要的分支和判断。&lt;/li>
&lt;/ul>
&lt;h3 id="3-关注可维护性">3. 关注可维护性
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>编写自文档化的代码&lt;/strong>：代码应该本身就能表达它的功能和意图，减少依赖外部文档。&lt;/li>
&lt;li>&lt;strong>保持代码结构扁平&lt;/strong>：避免过多的嵌套和深层次的层级结构，保持代码结构简单明了。&lt;/li>
&lt;li>&lt;strong>提高代码复用性&lt;/strong>：编写高内聚、低耦合的模块，增加代码的可复用性。&lt;/li>
&lt;/ul>
&lt;h2 id="实践指南">实践指南
&lt;/h2>&lt;h3 id="代码层面">代码层面
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>函数设计&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>保持函数短小精悍，专注于单一职责。&lt;/li>
&lt;li>每个函数只做一件事，避免函数承担过多任务。&lt;/li>
&lt;li>命名要清晰、准确，避免模糊不清。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类设计&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>避免过度继承，适当使用组合来减少类之间的耦合。&lt;/li>
&lt;li>使用设计模式时，选择最合适的模式，避免过度设计。&lt;/li>
&lt;li>限制类的大小，使其职责单一，保持代码可维护性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>架构设计&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>采用模块化设计，分解复杂问题为更简单的子问题。&lt;/li>
&lt;li>低耦合，高内聚：确保模块之间的依赖最小化，内部功能紧密相关。&lt;/li>
&lt;li>简化数据流和控制流，让系统的工作方式一目了然。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="最佳实践">最佳实践
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 反面示例：过度复杂，逻辑分散&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_user_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;age&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;email&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="s1">&amp;#39;@&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;email&amp;#39;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 处理逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;处理成功&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;处理失败&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 好的示例：简洁且易于维护，逻辑清晰&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_user_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">is_valid_user&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;处理失败&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;处理成功&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_valid_user&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">is_valid_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">is_valid_age&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;age&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">is_valid_email&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;email&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_valid_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_valid_age&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_valid_email&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;@&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">email&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="常见误区">常见误区
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>过度简化&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>简单不等于简陋：过度简化可能会让系统功能丧失，需要在简单性和功能性之间找到平衡。&lt;/li>
&lt;li>需要有适当的复杂度：一些复杂的问题需要通过合理的设计进行解决，不能一味追求简单。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>理解偏差&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>KISS原则并不意味着功能简陋或牺牲必要的功能。简洁应该是经过深思熟虑的“简约”设计，而不是忽略某些核心需求。&lt;/li>
&lt;li>简单并不等于易于实现：复杂问题有时需要更细致的解决方案，简化不意味着放弃细节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="相关原则">相关原则
&lt;/h2>&lt;p>KISS原则与其他设计原则和思想有密切的联系：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>奥卡姆剃刀&lt;/strong>：
&amp;ldquo;如无必要，勿增实体&amp;rdquo;
强调在多个解释中选择最简单的方案，避免不必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>爱因斯坦&lt;/strong>：
&amp;ldquo;让一切尽可能简单，但不要过于简单&amp;rdquo;
强调简单的同时，需要考虑适度的复杂性，以保证功能的全面性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>达芬奇&lt;/strong>：
&amp;ldquo;简单是最终的复杂性&amp;rdquo;
通过深入的思考和提炼，最终可以将复杂的事物简化到最本质的层面。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="实际应用价值">实际应用价值
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>提高开发效率&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>通过减少复杂性和冗余，减少开发时间。&lt;/li>
&lt;li>更容易理解和调试，提升开发团队的工作效率。&lt;/li>
&lt;li>能快速定位并解决问题，减少开发周期。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>降低维护成本&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>简洁的代码更容易修改和扩展，降低后期维护的复杂度。&lt;/li>
&lt;li>清晰的结构和良好的命名使得代码更易于理解，减少了开发人员的学习曲线。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提升系统质量&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>通过简化设计和减少不必要的功能，减少潜在的bug。&lt;/li>
&lt;li>更可靠的系统架构，便于后期扩展和优化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>KISS原则不仅是一个技术原则，更是一种思维方式。它提醒我们，在软件开发中，我们始终应该追求简洁性，但这种简洁并不是功能简陋，而是在保证系统功能的同时，去除冗余和不必要的复杂性。遵循KISS原则可以帮助我们开发出更加可靠、可维护、易扩展的系统。&lt;/p></description></item><item><title>性能优化：从数据出发，基于实际需求</title><link>https://blog.yellster.top/p/performance-optimization/</link><pubDate>Wed, 11 Sep 2024 18:19:26 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/performance-optimization/</guid><description>&lt;img src="https://blog.yellster.top/p/performance-optimization/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.webp" alt="Featured image of post 性能优化：从数据出发，基于实际需求" />&lt;blockquote>
&lt;ul>
&lt;li>&lt;strong>脱离场景谈性能，都是耍流氓。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>过早的优化是万恶之源。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>优化要基于数据，而非猜测。&lt;/strong>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h2 id="性能的本质">性能的本质
&lt;/h2>&lt;p>性能优化的最终目标是提升用户体验，并提高系统的效率。要达成这一目标，我们需要从系统最基本的组成部分和性能指标入手。&lt;/p>
&lt;h2 id="计算机系统的基本组成">计算机系统的基本组成
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>CPU&lt;/strong>：执行计算的核心&lt;/p>
&lt;ul>
&lt;li>&lt;strong>指令执行&lt;/strong>：处理各种指令，影响程序的执行速度。&lt;/li>
&lt;li>&lt;strong>数据处理&lt;/strong>：进行数值计算、数据操作。&lt;/li>
&lt;li>&lt;strong>任务调度&lt;/strong>：协调系统中的多个任务并合理分配资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存&lt;/strong>：临时数据存储&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数据读写&lt;/strong>：内存的读写速度直接影响系统的响应时间。&lt;/li>
&lt;li>&lt;strong>缓存管理&lt;/strong>：缓存优化有助于减少重复计算，提高效率。&lt;/li>
&lt;li>&lt;strong>内存分配&lt;/strong>：合理管理内存的分配与回收，避免内存泄漏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>I/O&lt;/strong>：数据交换&lt;/p>
&lt;ul>
&lt;li>&lt;strong>网络通信&lt;/strong>：数据在网络中传输的延迟和带宽。&lt;/li>
&lt;li>&lt;strong>磁盘读写&lt;/strong>：磁盘操作的延迟和吞吐量。&lt;/li>
&lt;li>&lt;strong>设备交互&lt;/strong>：外部设备的访问速度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="性能的关键指标">性能的关键指标
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>响应时间 (Response Time)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：从请求发起到响应完成的时间。&lt;/li>
&lt;li>&lt;strong>衡量方式&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>平均响应时间&lt;/strong>：常用的基准，衡量系统的总体性能。&lt;/li>
&lt;li>&lt;strong>P95 / P99&lt;/strong>：95%或99%的请求响应时间，可以更准确地反映系统在高负载下的表现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>影响因素&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>计算复杂度&lt;/strong>：算法和数据结构的设计。&lt;/li>
&lt;li>&lt;strong>资源等待时间&lt;/strong>：CPU、内存或I/O的占用情况。&lt;/li>
&lt;li>&lt;strong>网络延迟&lt;/strong>：数据传输中的延迟。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>吞吐量 (Throughput)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：单位时间内系统处理的请求数量。&lt;/li>
&lt;li>&lt;strong>衡量方式&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>TPS（每秒事务数）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>QPS（每秒查询数）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>影响因素&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>系统资源容量&lt;/strong>：硬件性能的上限。&lt;/li>
&lt;li>&lt;strong>并发处理能力&lt;/strong>：系统处理多个请求的能力。&lt;/li>
&lt;li>&lt;strong>请求处理效率&lt;/strong>：处理每个请求的速度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源利用率&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CPU 使用率&lt;/strong>：CPU资源是否被充分利用。&lt;/li>
&lt;li>&lt;strong>内存占用&lt;/strong>：内存是否得到了合理使用，避免内存过度使用或浪费。&lt;/li>
&lt;li>&lt;strong>I/O 负载&lt;/strong>：磁盘与网络的负载情况，避免出现I/O瓶颈。&lt;/li>
&lt;li>&lt;strong>网络带宽&lt;/strong>：数据传输的速度和效率。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="性能优化的方法论">性能优化的方法论
&lt;/h2>&lt;h3 id="确定优化目标">确定优化目标
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>明确业务需求&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>响应时间&lt;/strong>：设定用户期望的响应时间。&lt;/li>
&lt;li>&lt;strong>并发量&lt;/strong>：定义系统能承载的最大并发请求数。&lt;/li>
&lt;li>&lt;strong>资源成本&lt;/strong>：优化是否能控制在可接受的资源消耗范围内。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设定具体指标&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>性能目标&lt;/strong>：设置明确、量化的性能目标。&lt;/li>
&lt;li>&lt;strong>可测量标准&lt;/strong>：确保所有优化都可以通过实际数据进行验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="性能分析">性能分析
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>收集性能数据&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>系统监控&lt;/strong>：使用监控工具采集实时的系统指标。&lt;/li>
&lt;li>&lt;strong>性能测试&lt;/strong>：通过负载测试、压力测试等手段获取数据。&lt;/li>
&lt;li>&lt;strong>用户反馈&lt;/strong>：关注用户的使用体验，发现性能瓶颈。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定位性能瓶颈&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CPU 密集型&lt;/strong>：算法或代码的计算量过大。&lt;/li>
&lt;li>&lt;strong>内存问题&lt;/strong>：内存分配不当，可能导致频繁的垃圾回收或内存泄漏。&lt;/li>
&lt;li>&lt;strong>I/O 瓶颈&lt;/strong>：磁盘或网络读写延迟过高。&lt;/li>
&lt;li>&lt;strong>网络延迟&lt;/strong>：服务器与客户端之间的传输延迟。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="优化策略">优化策略
&lt;/h3>&lt;h4 id="cpu-优化">CPU 优化
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>算法优化&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>降低时间复杂度&lt;/strong>：选择合适的算法来减少计算量。&lt;/li>
&lt;li>&lt;strong>减少不必要的计算&lt;/strong>：优化代码，避免重复的计算操作。&lt;/li>
&lt;li>&lt;strong>利用缓存&lt;/strong>：缓存计算结果，避免重复计算。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并发处理&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>多线程优化&lt;/strong>：通过多核 CPU 的并行计算提高效率。&lt;/li>
&lt;li>&lt;strong>异步处理&lt;/strong>：避免阻塞操作，提高响应速度。&lt;/li>
&lt;li>&lt;strong>任务调度优化&lt;/strong>：合理安排任务执行的顺序，减少等待时间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="内存优化">内存优化
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>内存管理&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>避免内存泄漏&lt;/strong>：及时释放不再使用的内存。&lt;/li>
&lt;li>&lt;strong>优化对象创建与回收&lt;/strong>：减少内存分配的频率，避免频繁的GC。&lt;/li>
&lt;li>&lt;strong>合理设置内存参数&lt;/strong>：根据业务需求调优JVM或其他内存配置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存策略&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>多级缓存设计&lt;/strong>：使用本地缓存、分布式缓存等技术提高读取性能。&lt;/li>
&lt;li>&lt;strong>缓存预热&lt;/strong>：提前加载常用数据，减少请求时的延迟。&lt;/li>
&lt;li>&lt;strong>缓存更新策略&lt;/strong>：确保缓存中的数据保持最新，避免缓存不一致问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="io-优化">I/O 优化
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>磁盘 I/O&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>批量处理&lt;/strong>：减少频繁的磁盘读写，采用批量处理来提高效率。&lt;/li>
&lt;li>&lt;strong>异步 I/O&lt;/strong>：避免阻塞操作，通过异步方式提高吞吐量。&lt;/li>
&lt;li>&lt;strong>数据压缩&lt;/strong>：通过压缩数据减少磁盘读写的负载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络 I/O&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>连接池管理&lt;/strong>：有效管理网络连接，避免频繁创建和销毁连接。&lt;/li>
&lt;li>&lt;strong>数据传输优化&lt;/strong>：优化数据传输协议，减少数据传输的延迟。&lt;/li>
&lt;li>&lt;strong>协议优化&lt;/strong>：使用合适的协议提高通信效率，如 HTTP/2 或 gRPC。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="优化实施">优化实施
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>循序渐进&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>从瓶颈开始&lt;/strong>：先优化影响最大、最容易解决的瓶颈。&lt;/li>
&lt;li>&lt;strong>一处改动，一次验证&lt;/strong>：避免一次性改动过多，确保每次优化都有明确的效果验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>验证效果&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>性能测试&lt;/strong>：每次优化后进行详细的性能测试，确保效果可量化。&lt;/li>
&lt;li>&lt;strong>A/B 测试&lt;/strong>：在真实用户环境中验证优化效果。&lt;/li>
&lt;li>&lt;strong>生产环境验证&lt;/strong>：持续在生产环境中监控优化后的效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="常见优化场景">常见优化场景
&lt;/h2>&lt;h3 id="web-应用优化">Web 应用优化
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>前端优化&lt;/strong>：减少资源加载时间，提升渲染性能。&lt;/li>
&lt;li>&lt;strong>后端优化&lt;/strong>：优化接口响应时间，减少数据库查询延迟。&lt;/li>
&lt;li>&lt;strong>数据库优化&lt;/strong>：使用索引、查询优化等手段提升数据库性能。&lt;/li>
&lt;/ul>
&lt;h3 id="分布式系统优化">分布式系统优化
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>负载均衡&lt;/strong>：均衡地分配请求到多个服务节点，提高系统的并发能力。&lt;/li>
&lt;li>&lt;strong>服务拆分&lt;/strong>：将单一服务拆分为多个小服务，减少单一服务的压力。&lt;/li>
&lt;li>&lt;strong>数据分片&lt;/strong>：将数据分片存储，减少单节点的数据压力。&lt;/li>
&lt;/ul>
&lt;h3 id="大数据处理优化">大数据处理优化
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>数据分区&lt;/strong>：将数据按一定规则分区，减少单个查询的扫描量。&lt;/li>
&lt;li>&lt;strong>并行计算&lt;/strong>：利用分布式计算框架（如 Spark）进行并行计算，提高处理速度。&lt;/li>
&lt;li>&lt;strong>资源调度&lt;/strong>：合理分配资源，避免资源浪费和过载。&lt;/li>
&lt;/ul>
&lt;h2 id="优化的注意事项">优化的注意事项
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>避免过早优化&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>优化应基于真实的性能数据，而不是主观臆断。&lt;/li>
&lt;li>&lt;strong>先保证功能正确&lt;/strong>，再根据数据进行优化。&lt;/li>
&lt;li>优化时要考虑成本和收益，不要在不必要的地方过度优化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保持简单性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>可维护性优先&lt;/strong>，避免过度设计和复杂化。&lt;/li>
&lt;li>优化应该以简洁、可扩展的方式进行，避免对系统产生负担。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续监控&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>建立监控体系&lt;/strong>：对系统性能进行实时监控。&lt;/li>
&lt;li>&lt;strong>及时发现问题&lt;/strong>：通过监控数据及时发现潜在的性能瓶颈。&lt;/li>
&lt;li>&lt;strong>评估优化效果&lt;/strong>：通过监控工具评估每次优化的实际效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>性能优化是一个持续不断的过程，需要：&lt;/p>
&lt;ul>
&lt;li>深入理解系统架构，准确定位瓶颈。&lt;/li>
&lt;li>建立科学的优化方法，避免过早优化和盲目优化。&lt;/li>
&lt;li>持续进行监控和改进，以确保系统始终处于最佳状态。&lt;/li>
&lt;/ul>
&lt;p>最重要的是，&lt;strong>性能优化永远要基于实际需求和数据，而不是单纯的经验或猜测&lt;/strong>。始终保持对性能的敏感度，并根据业务变化进行动态调整。&lt;/p></description></item><item><title>ODBC</title><link>https://blog.yellster.top/p/odbc/</link><pubDate>Mon, 12 Aug 2024 12:57:17 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/odbc/</guid><description>&lt;ul>
&lt;li>&lt;strong>ODBC, Open Database Connectivity&lt;/strong> 是由 Microsoft 开发的数据库连接标准。&lt;/li>
&lt;li>它允许应用程序使用标准化的接口访问不同的数据库系统。&lt;/li>
&lt;/ul>
&lt;h2 id="特点">特点
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>跨语言支持&lt;/strong>：
&lt;ul>
&lt;li>ODBC 不是绑定于某种编程语言的，因此可以用于多种编程语言，包括 C、C++、Python 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>平台依赖性&lt;/strong>：
&lt;ul>
&lt;li>ODBC 原本是为 Windows 平台设计的，但也有跨平台版本，如 unixODBC 用于 Linux 系统。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>使用方式&lt;/strong>：
&lt;ul>
&lt;li>ODBC 通过 ODBC 驱动与数据库通信。驱动程序通常由数据库供应商提供，或者可以使用第三方驱动。&lt;/li>
&lt;li>ODBC 需要在系统中配置数据源名称（DSN），通过 DSN 来标识和连接数据库。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.easysoft.com/developer/interfaces/odbc/linux.html#getting_unixodbc" target="_blank" rel="noopener"
>参考地址&lt;/a>&lt;/p>
&lt;h3 id="安装驱动">安装驱动
&lt;/h3>&lt;ul>
&lt;li>Ubuntu/Debian
&lt;ul>
&lt;li>&lt;code>sudo apt-get install unixodbc unixodbc-dev odbcinst&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CentOS/RHEL
&lt;ul>
&lt;li>&lt;code>sudo yum install unixODBC unixODBC-devel&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Windows
在 Windows 上，你可以通过安装 ODBC 数据源管理器和相应的数据库驱动来支持 ODBC。&lt;/li>
&lt;/ul>
&lt;h3 id="配置数据源">配置数据源
&lt;/h3>&lt;p>Linux下，odbc依赖两个配置文件（以达梦8为例）&lt;/p>
&lt;h4 id="配置驱动-etcodbcinstini">配置驱动, /etc/odbcinst.ini
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[DM8]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">ODBC DRIVER FOR Dameng8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Driver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/data0/dm_db/dmdbms/drivers/odbc/libdodbc.so&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>两个属性，&lt;/p>
&lt;ul>
&lt;li>Description，驱动说明&lt;/li>
&lt;li>Driver，驱动文件&lt;/li>
&lt;/ul>
&lt;h4 id="配置数据源-etcodbcini">配置数据源, /etc/odbc.ini
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[DM8]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">DM ODBC DSN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Driver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">DM8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">SERVER&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">UID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">SYSDBA&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">PWD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">SYSDBA&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">TCP_PORT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5236&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">LANGUAGE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">CHINESE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Description，数据源说明&lt;/li>
&lt;li>Driver，驱动，要和 odbcinst.ini 中的 &lt;strong>selection&lt;/strong> 保持一致&lt;/li>
&lt;li>SERVER，连接的ip&lt;/li>
&lt;li>UID，账户名称&lt;/li>
&lt;li>PWD，账户密码&lt;/li>
&lt;li>TCP_PORT，连接端口&lt;/li>
&lt;li>LANGUAGE，环境语言&lt;/li>
&lt;/ul>
&lt;h2 id="测试">测试
&lt;/h2>&lt;p>&lt;code>isql &amp;lt;DSN数据源名称&amp;gt; [UID [PWD]]&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/odbc/isql.png"
width="804"
height="354"
srcset="https://blog.yellster.top/p/odbc/isql_hu_b5d6120f34669dd3.png 480w, https://blog.yellster.top/p/odbc/isql_hu_776897a581b61958.png 1024w"
loading="lazy"
alt="isql"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="545px"
>&lt;/p></description></item><item><title>I/O</title><link>https://blog.yellster.top/p/io/</link><pubDate>Fri, 31 May 2024 11:20:31 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/io/</guid><description>&lt;img src="https://blog.yellster.top/p/io/io.png" alt="Featured image of post I/O" />&lt;h2 id="什么是io">什么是I/O
&lt;/h2>&lt;p>I/O，&lt;strong>Input/Output&lt;/strong>，&lt;strong>即输入/输出&lt;/strong>，是计算机系统中用于数据传输的机制，指的是在计算机和外部设备（键盘、显示器、磁盘等）之间，或在计算机内部组件（内存和 CPU）之间的数据传输过程。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>输入（input）&lt;/strong>：指将数据从外部设备或内存传入到计算机系统的过程。&lt;/li>
&lt;li>&lt;strong>输出（output）&lt;/strong>：指将数据从计算机系统传送到外部设备或内存的过程。&lt;/li>
&lt;/ul>
&lt;p>I/O 设备类型：&lt;/p>
&lt;ul>
&lt;li>块设备：磁盘、光盘、USB设备等，以块为单位读写数据，适合随机访问。&lt;/li>
&lt;li>字符设备：键盘、鼠标、串口、打印机等，以字符流为单位读写数据，适合顺序访问。&lt;/li>
&lt;/ul>
&lt;h3 id="计算机角度的io">计算机角度的I/O
&lt;/h3>&lt;p>我们常说的输入输出，比较直观的意思就是&lt;strong>计算机的输入输出&lt;/strong>，&lt;strong>计算机就是主体&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>冯.诺依曼结构&lt;/strong>，它将计算机分成分为5个部分：运算器、控制器、存储器、输入设备、输出设备。&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/%E5%86%AF-%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84.png"
width="1784"
height="932"
srcset="https://blog.yellster.top/p/io/%E5%86%AF-%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84_hu_604897a2b548d3fb.png 480w, https://blog.yellster.top/p/io/%E5%86%AF-%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84_hu_b2a2d5a893c71c27.png 1024w"
loading="lazy"
alt="冯.诺依曼结构"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>输入设备&lt;/strong>是向计算机输入数据和信息的设备，键盘，鼠标都属于输入设备；&lt;/li>
&lt;li>&lt;strong>输出设备&lt;/strong>是计算机硬件系统的终端设备，用于接收计算机数据的输出显示，一般显示器、打印机属于输出设备。&lt;/li>
&lt;/ul>
&lt;p>鼠标、显示器这只是直观表面的输入输出，回到计算机架构来说，&lt;strong>涉及计算机核心与其他设备间数据迁移的过程，就是I/O&lt;/strong>。&lt;/p>
&lt;p>如磁盘I/O，就是从磁盘读取数据到内存，这算一次输入，对应的，将内存中的数据写入磁盘，就算输出。这就是I/O的本质。&lt;/p>
&lt;h3 id="操作系统的io">操作系统的I/O
&lt;/h3>&lt;p>我们要将内存中的数据写入到磁盘的话，主体会是什么呢？主体可能是一个应用程序，比如一个Java进程（假设网络传来二进制流，一个Java进程可以把它写入到磁盘）。&lt;/p>
&lt;p>&lt;strong>操作系统&lt;/strong>负责计算机的资源管理和进程的调度。我们电脑上跑着的应用程序，其实是需要经过&lt;strong>操作系统&lt;/strong>，才能做一些特殊操作，如&lt;strong>磁盘文件读写、内存的读写&lt;/strong>等等。因为这些都是比较危险的操作，不可以由应用程序乱来，只能交给底层操作系统来。也就是说，你的应用程序要把数据写入磁盘，只能通过调用操作系统开放出来的API来操作。&lt;/p>
&lt;p>我们应用程序是跑在用户空间的，它不存在实质的I/O过程，真正的I/O是在&lt;strong>操作系统&lt;/strong>执行的。即应用程序的I/O操作分为两种动作：&lt;strong>I/O调用和I/O执行&lt;/strong>。&lt;/p>
&lt;p>I/O调用是由进程（应用程序的运行态）发起，而I/O执行是&lt;strong>操作系统内核&lt;/strong>的工作。此时所说的I/O是应用程序对操作系统I/O功能的一次触发，即I/O调用。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>什么是用户空间？什么是内核空间?&lt;/strong>&lt;/p>
&lt;p>以32位操作系统为例，它为每一个进程都分配了4G(2的32次方)的内存空间。这4G可访问的内存空间分为二部分，一部分是用户空间，一部分是内核空间。内核空间是操作系统内核访问的区域，是受保护的内存空间，而用户空间是用户应用程序访问的内存区域。&lt;/p>&lt;/blockquote>
&lt;h3 id="操作系统的一次io过程">操作系统的一次I/O过程
&lt;/h3>&lt;p>应用程序发起的一次I/O操作包含两个阶段：&lt;/p>
&lt;ul>
&lt;li>I/O调用：应用程序进程向&lt;strong>操作系统内核&lt;/strong>发起调用。&lt;/li>
&lt;li>I/O执行：操作系统内核完成I/O操作。&lt;/li>
&lt;/ul>
&lt;p>操作系统内核完成I/O操作还包括两个过程：&lt;/p>
&lt;ul>
&lt;li>准备数据：内核等待I/O设备准备好数据。&lt;/li>
&lt;li>拷贝数据：将数据从内核缓冲区拷贝到用户进程缓冲区。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/IO%E8%BF%87%E7%A8%8B.png"
width="2160"
height="1106"
srcset="https://blog.yellster.top/p/io/IO%E8%BF%87%E7%A8%8B_hu_8deae71b6d751300.png 480w, https://blog.yellster.top/p/io/IO%E8%BF%87%E7%A8%8B_hu_5e8163623202590d.png 1024w"
loading="lazy"
alt="I/O过程"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;p>其实I/O就是把进程的内部数据转移到外部设备，或者把外部设备的数据迁移到进程内部。外部设备一般指硬盘、socket通讯的网卡。一个完整的&lt;strong>I/O过程&lt;/strong>包括以下几个步骤：&lt;/p>
&lt;ul>
&lt;li>应用程序进程向操作系统发起&lt;strong>I/O调用请求&lt;/strong>&lt;/li>
&lt;li>操作系统&lt;strong>准备数据&lt;/strong>，把I/O外部设备的数据，加载到&lt;strong>内核缓冲区&lt;/strong>&lt;/li>
&lt;li>操作系统拷贝数据，即将内核缓冲区的数据，拷贝到用户进程缓冲区&lt;/li>
&lt;/ul>
&lt;h2 id="io模型">I/O模型
&lt;/h2>&lt;h3 id="阻塞-vs-非阻塞-vs-异步">阻塞 vs 非阻塞 vs 异步
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>阻塞&lt;/strong>：调用 &lt;code>read()/write()&lt;/code> 时，进程被挂起直至操作完成，简单易用但会导致资源空转。&lt;/li>
&lt;li>&lt;strong>非阻塞&lt;/strong>：通过在文件描述符上设置 &lt;code>O_NONBLOCK&lt;/code> 标志，使得 &lt;code>read()/write()&lt;/code> 调用不会阻塞，而是立即返回，需配合 &lt;code>select/poll&lt;/code> 等多路复用手段实现效率提升。&lt;/li>
&lt;li>&lt;strong>异步&lt;/strong>：调用类似 &lt;code>aio_read()/aio_write()&lt;/code>，进程发起调用后立即返回，内核完成I/O操作后通过&lt;strong>回调或事件通知&lt;/strong>告知进程，无需轮询，允许并行处理其他任务。&lt;/li>
&lt;/ul>
&lt;h3 id="五种经典-io-模型">五种经典 I/O 模型
&lt;/h3>&lt;h4 id="阻塞io模型-bio-blocking-io">阻塞I/O模型 (BIO, Blocking I/O)
&lt;/h4>&lt;p>假设应用程序的进程发起&lt;strong>I/O调用&lt;/strong>（&lt;code>read()&lt;/code> 或 &lt;code>write()&lt;/code>），但是如果&lt;strong>内核的数据还没准备好&lt;/strong>的话，那应用程序进程就一直在&lt;strong>阻塞等待&lt;/strong>，一直等到内核数据准备好了，从内核拷贝到用户空间，才返回成功提示，此次I/O操作，称之为&lt;strong>阻塞I/O&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/%E9%98%BB%E5%A1%9EIO%E6%A8%A1%E5%9E%8B.png"
width="2160"
height="1130"
srcset="https://blog.yellster.top/p/io/%E9%98%BB%E5%A1%9EIO%E6%A8%A1%E5%9E%8B_hu_96fa08004de89fd9.png 480w, https://blog.yellster.top/p/io/%E9%98%BB%E5%A1%9EIO%E6%A8%A1%E5%9E%8B_hu_e19611a2a189f803.png 1024w"
loading="lazy"
alt="阻塞I/O模型"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;ul>
&lt;li>阻塞I/O比较经典的应用就是&lt;strong>阻塞socket、Java BIO&lt;/strong>。&lt;/li>
&lt;li>阻塞I/O的缺点就是：如果内核数据一直没准备好，那用户进程将一直阻塞，&lt;strong>浪费性能&lt;/strong>，可以使用&lt;strong>非阻塞I/O&lt;/strong>优化。&lt;/li>
&lt;/ul>
&lt;h4 id="非阻塞io模型-nio-non-blocking-io">非阻塞I/O模型 (NIO, Non-Blocking I/O)
&lt;/h4>&lt;p>在文件描述符上设置 &lt;code>O_NONBLOCK&lt;/code>，使 &lt;code>read()/write()&lt;/code> 调用立即返回，若无法立刻完成则返回 &lt;code>EAGAIN&lt;/code>（对于套接字也可能是 &lt;code>EWOULDBLOCK&lt;/code>），要求开发者主动轮询或结合多路复用进行事件驱动处理。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;strong>成功完成&lt;/strong>：返回实际读写的字节数（0 表示 EOF）&lt;/li>
&lt;li>&lt;strong>无法立即完成（会阻塞）&lt;/strong>：返回 -1，&lt;code>errno == EAGAIN&lt;/code>；若是套接字，也可能 &lt;code>errno == EWOULDBLOCK&lt;/code>&lt;/li>
&lt;li>&lt;strong>其他错误&lt;/strong>：如 &lt;code>EBADF&lt;/code>、&lt;code>EFAULT&lt;/code>、&lt;code>EINTR&lt;/code> 等，根据具体场景返回对应错误码&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/%E9%9D%9E%E9%98%BB%E5%A1%9EIO.png"
width="2160"
height="1528"
srcset="https://blog.yellster.top/p/io/%E9%9D%9E%E9%98%BB%E5%A1%9EIO_hu_4c28639776292d8e.png 480w, https://blog.yellster.top/p/io/%E9%9D%9E%E9%98%BB%E5%A1%9EIO_hu_53fadcaaef01d490.png 1024w"
loading="lazy"
alt="非阻塞I/O"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>非阻塞I/O模型，简称&lt;strong>NIO&lt;/strong>，&lt;code>Non-Blocking I/O&lt;/code>。它相对于阻塞I/O，虽然大幅提升了性能，但是它依然存在&lt;strong>性能问题&lt;/strong>，即&lt;strong>频繁的轮询&lt;/strong>，导致频繁的系统调用，同样会消耗大量的CPU资源。可以考虑&lt;strong>I/O复用模型&lt;/strong>，去解决这个问题。&lt;/p>
&lt;h4 id="多路复用io模型-mio-multiplexing-io">多路复用I/O模型 (MIO, Multiplexing I/O)
&lt;/h4>&lt;p>既然&lt;strong>NIO&lt;/strong>无效的轮询会导致CPU资源消耗，我们等到内核数据准备好了，主动通知应用进程再去进行系统调用，那不就好了嘛？&lt;/p>
&lt;p>I/O复用模型核心思路：系统给我们提供&lt;strong>一类函数&lt;/strong>（&lt;strong>select、poll、epoll&lt;/strong>函数），在单个线程中监控大量&lt;strong>文件描述符&lt;/strong>的可读写状态，实现阻塞或边缘触发的事件分发机制，从而避免因阻塞 I/O 导致的线程资源浪费。&lt;/p>
&lt;blockquote>
&lt;p>在 UNIX/Linux 中，&lt;strong>文件描述符（FD，File Descriptor）&lt;/strong> 是内核为每个已打开资源（常见有普通文件、管道、套接字、字符设备等）分配的一个&lt;strong>非负整数&lt;/strong>，它充当用户空间进程与内核 I/O 子系统之间的句柄。例如：&lt;/p>
&lt;ul>
&lt;li>FD = 0：标准输入（stdin）&lt;/li>
&lt;li>FD = 1：标准输出（stdout）&lt;/li>
&lt;li>FD ≥ 3：其他打开的文件或套接字&lt;/li>
&lt;/ul>
&lt;p>所有 I/O 系统调用（如 &lt;code>read(fd, buf, n)&lt;/code>、&lt;code>write(fd, buf, n)&lt;/code>）均通过这个整数索引来标识目标资源。&lt;/p>&lt;/blockquote>
&lt;h5 id="select">select
&lt;/h5>&lt;p>应用进程通过调用&lt;strong>select&lt;/strong>函数，可以同时监控多个 &lt;code>fd&lt;/code>，在 &lt;code>select&lt;/code>函数监控的 &lt;code>fd&lt;/code> 中，只要有任何一个数据状态准备就绪了，&lt;code>select&lt;/code> 函数就会返回可读状态，这时应用进程再发起 &lt;code>recvfrom&lt;/code> 请求去读取数据。&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/select.png"
width="2160"
height="1320"
srcset="https://blog.yellster.top/p/io/select_hu_7d14980e6febe213.png 480w, https://blog.yellster.top/p/io/select_hu_bd2e0c412fc285a6.png 1024w"
loading="lazy"
alt="select"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>非阻塞I/O模型（NIO）中，需要 &lt;code>N&lt;/code>（N&amp;gt;=1）次轮询系统调用，然而借助 &lt;code>select&lt;/code> 的I/O多路复用模型，只需要发起一次询问就够了，大大优化了性能。&lt;/p>
&lt;p>但是呢，&lt;code>select&lt;/code>有几个缺点：&lt;/p>
&lt;ul>
&lt;li>监听的I/O最大连接数有限，在Linux系统上一般为1024。&lt;/li>
&lt;li>select函数返回后，是通过&lt;strong>遍历&lt;/strong> &lt;code>fdset&lt;/code>，找到就绪的描述符 &lt;code>fd&lt;/code>。（仅知道有I/O事件发生，却不知是哪几个流，所以&lt;strong>遍历所有流&lt;/strong>）&lt;/li>
&lt;/ul>
&lt;p>因为&lt;strong>存在连接数限制&lt;/strong>，所以后来又提出了&lt;strong>poll&lt;/strong>。与select相比，&lt;strong>poll&lt;/strong>解决了&lt;strong>连接数限制问题&lt;/strong>。但是呢，select和poll一样，还是需要通过遍历文件描述符来获取已经就绪的 &lt;code>socket&lt;/code>。如果同时连接的大量客户端，在一时刻可能只有极少处于就绪状态，伴随着监视的描述符数量的增长，&lt;strong>效率也会线性下降&lt;/strong>。&lt;/p>
&lt;p>因此经典的多路复用模型 &lt;code>epoll&lt;/code>诞生。&lt;/p>
&lt;h5 id="epoll">epoll
&lt;/h5>&lt;p>为了解决 &lt;code>select/poll&lt;/code>存在的问题，多路复用模型 &lt;code>epoll&lt;/code>诞生，它采用事件驱动来实现，流程图如下：&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/epoll.png"
width="2160"
height="1312"
srcset="https://blog.yellster.top/p/io/epoll_hu_26385753c109246.png 480w, https://blog.yellster.top/p/io/epoll_hu_3fd15b2fd037a372.png 1024w"
loading="lazy"
alt="epoll"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>&lt;strong>epoll&lt;/strong>先通过 &lt;code>epoll_ctl()&lt;/code> 来注册一个 &lt;code>fd&lt;/code>，一旦基于某个 &lt;code>fd&lt;/code> 就绪时，内核会采用回调机制，迅速激活这个 &lt;code>fd&lt;/code>，当进程调用 &lt;code>epoll_wait()&lt;/code>时便得到通知。这里去掉了&lt;strong>遍历文件描述符&lt;/strong>的操作，而是采用&lt;strong>监听事件回调&lt;/strong>的机制。这就是epoll的亮点。&lt;/p>
&lt;h5 id="selectpollepoll的区别">select、poll、epoll的区别
&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>select&lt;/th>
&lt;th>poll&lt;/th>
&lt;th>epoll&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>底层数据结构&lt;/td>
&lt;td>数组&lt;/td>
&lt;td>链表&lt;/td>
&lt;td>红黑树和双链表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>获取就绪的fd&lt;/td>
&lt;td>遍历&lt;/td>
&lt;td>遍历&lt;/td>
&lt;td>事件回调&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>事件复杂度&lt;/td>
&lt;td>O(n)&lt;/td>
&lt;td>O(n)&lt;/td>
&lt;td>O(1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>最大连接数&lt;/td>
&lt;td>1024&lt;/td>
&lt;td>无限制&lt;/td>
&lt;td>无限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fd数据拷贝&lt;/td>
&lt;td>每次调用select，需要将fd数据从用户空间拷贝到内核空间&lt;/td>
&lt;td>每次调用poll，需要将fd数据从用户空间拷贝到内核空间&lt;/td>
&lt;td>使用内存映射(mmap)，不需要从用户空间频繁拷贝fd数据到内核空间&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>epoll&lt;/strong>明显优化了I/O的执行效率，但在进程调用 &lt;code>epoll_wait()&lt;/code>时，仍然可能被阻塞。&lt;/p>
&lt;h4 id="信号驱动io模型-sdio-signal-driven-io">信号驱动I/O模型 (SDIO, Signal-driven I/O)
&lt;/h4>&lt;p>信号驱动I/O不再用主动询问的方式去确认数据是否就绪，而是向内核发送一个信号（调用 &lt;code>sigaction&lt;/code> 的时候建立一个 &lt;code>SIGIO&lt;/code> 的信号），然后应用用户进程可以去做别的事，不用阻塞。当内核数据准备好后，再通过 &lt;code>SIGIO&lt;/code> 信号通知应用进程，数据准备好后的可读状态。应用用户进程收到信号之后，立即调用 &lt;code>recvfrom&lt;/code>，去读取数据。&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8IO%E6%A8%A1%E5%9E%8B.png"
width="2160"
height="1324"
srcset="https://blog.yellster.top/p/io/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8IO%E6%A8%A1%E5%9E%8B_hu_a20f69c0ec854949.png 480w, https://blog.yellster.top/p/io/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8IO%E6%A8%A1%E5%9E%8B_hu_fb0f40ed63b73bfa.png 1024w"
loading="lazy"
alt="信号驱动I/O模型"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/p>
&lt;p>信号驱动I/O模型，在应用进程发出信号后，是立即返回的，不会阻塞进程。它已经有异步操作的感觉了。但是你细看上面的流程图，&lt;strong>发现数据复制到应用缓冲的时候&lt;/strong>，应用进程还是阻塞的。回过头来看下，不管是BIO，还是NIO，还是信号驱动，在数据从内核复制到应用缓冲的时候，都是阻塞的。&lt;/p>
&lt;h4 id="异步io模型-aio-asynchronous-io">异步I/O模型 (AIO, Asynchronous I/O)
&lt;/h4>&lt;p>前面讲的 &lt;code>BIO&lt;/code>，&lt;code>NIO&lt;/code>和&lt;code>SDIO&lt;/code>，在数据从内核复制到应用缓冲的时候，都是&lt;strong>阻塞&lt;/strong>的，因此都不算是真正的异步。&lt;code>AIO&lt;/code>实现了I/O全流程的非阻塞，就是应用进程发出系统调用后，是立即返回的，但是&lt;strong>立即返回的不是处理结果，而是表示提交成功类似的意思&lt;/strong>。等内核数据准备好，将数据拷贝到用户进程缓冲区，发送信号通知用户进程I/O操作执行完毕。&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/io/%E5%BC%82%E6%AD%A5IO%E6%A8%A1%E5%9E%8B.png"
width="2160"
height="1352"
srcset="https://blog.yellster.top/p/io/%E5%BC%82%E6%AD%A5IO%E6%A8%A1%E5%9E%8B_hu_7c09de5e6fbebc58.png 480w, https://blog.yellster.top/p/io/%E5%BC%82%E6%AD%A5IO%E6%A8%A1%E5%9E%8B_hu_bb84c71d731079d4.png 1024w"
loading="lazy"
alt="异步I/O模型"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>异步I/O的优化思路很简单，只需要向内核发送一次请求，就可以完成数据状态询问和数据拷贝的所有操作，并且不用阻塞等待结果。日常开发中，有类似思想的业务场景：&lt;/p>
&lt;blockquote>
&lt;p>比如发起一笔批量转账，但是批量转账处理比较耗时，这时候后端可以先告知前端转账提交成功，等到结果处理完，再通知前端结果即可。&lt;/p>&lt;/blockquote>
&lt;h3 id="io-模型对比">I/O 模型对比
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>调用时阻塞？&lt;/th>
&lt;th>数据就绪时阻塞？&lt;/th>
&lt;th>特点&lt;/th>
&lt;th>常见应用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>阻塞 I/O（Blocking I/O）&lt;/td>
&lt;td>是&lt;/td>
&lt;td>—&lt;/td>
&lt;td>最简单，单线程也能完成&lt;/td>
&lt;td>Java BIO&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>非阻塞 I/O（Non-Blocking）&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;td>需轮询 &lt;code>EAGAIN&lt;/code>&lt;/td>
&lt;td>C++ low-level&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>多路复用 I/O&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;td>单线程管理上万 FD，不轮询所有 FD&lt;/td>
&lt;td>Nginx、Node.js&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>信号驱动 I/O（SIGIO）&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;td>用信号通知，信号处理函数中读写&lt;/td>
&lt;td>较少使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>异步 I/O（POSIX AIO）&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;td>真异步，全流程不阻塞&lt;/td>
&lt;td>高性能文件服务&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="何时选哪种模型">何时选哪种模型
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>简单脚本／小工具&lt;/strong>：阻塞 I/O 足矣。&lt;/li>
&lt;li>&lt;strong>多连接高并发&lt;/strong>：首选多路复用（&lt;code>epoll&lt;/code>/&lt;code>kqueue&lt;/code>）＋非阻塞。&lt;/li>
&lt;li>&lt;strong>极致性能&lt;/strong>：结合零拷贝（&lt;code>sendfile&lt;/code>、&lt;code>splice&lt;/code>）或 Linux &lt;code>io_uring&lt;/code>。&lt;/li>
&lt;li>&lt;strong>跨平台服务&lt;/strong>：可借助 Java Netty、Rust Tokio、Go runtime 等，它们底层封装了最佳模型。&lt;/li>
&lt;/ul>
&lt;h2 id="拓展">拓展
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>&lt;a class="link" href="https://blog.yellster.top/p/zero-copy/" >零拷贝技术&lt;/a>&lt;/strong>：&lt;code>sendfile()&lt;/code>、&lt;code>splice()&lt;/code>、&lt;code>mmap()&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="https://blog.yellster.top/p/io_uring/" >io_uring&lt;/a>&lt;/strong>：Linux 5.1+ 提供的真正零系统调用异步接口&lt;/li>
&lt;li>&lt;strong>Windows IOCP&lt;/strong>：高性能 proactor 模型&lt;/li>
&lt;li>&lt;strong>虚拟化 I/O&lt;/strong>：Virtio、SR-IOV、DDIO 加速&lt;/li>
&lt;/ul></description></item><item><title>Web攻击之 SQL注入</title><link>https://blog.yellster.top/p/web-attack-sql-injection/</link><pubDate>Sun, 07 Apr 2024 14:48:30 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/web-attack-sql-injection/</guid><description>&lt;h2 id="sql-注入是什么">SQL 注入是什么？
&lt;/h2>&lt;blockquote>
&lt;p>SQL 注入（SQL Injection）是一种攻击方式，攻击者通过“拼接用户输入”和数据库语句，让服务器执行恶意 SQL 命令，进而&lt;strong>读取、修改、删除数据，甚至控制数据库主机&lt;/strong>。&lt;/p>&lt;/blockquote>
&lt;h2 id="sql-注入是怎么产生的">SQL 注入是怎么产生的？
&lt;/h2>&lt;blockquote>
&lt;p>本质：&lt;strong>用户输入参与了 SQL 拼接，且没有做安全处理。&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>比如你写了这样的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;admin&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;123456&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用户在登录框输入：&lt;/p>
&lt;ul>
&lt;li>用户名：&lt;code>admin' --&lt;/code>&lt;/li>
&lt;li>密码：（随便填）&lt;/li>
&lt;/ul>
&lt;p>结果 SQL 变成了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;admin&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">--&amp;#39; AND password = &amp;#39;xxx&amp;#39;;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>--&lt;/code> 是 SQL 中的注释符，后面的部分被忽略，攻击者绕过了密码验证，&lt;strong>成功登录后台&lt;/strong>！&lt;/p>
&lt;h2 id="sql-注入能造成什么危害">SQL 注入能造成什么危害？
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>危害类别&lt;/th>
&lt;th>具体描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>登录绕过&lt;/td>
&lt;td>修改 SQL 语句逻辑，&lt;strong>无需密码直接登录账号&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据泄露&lt;/td>
&lt;td>&lt;code>UNION SELECT&lt;/code> 等方式读取敏感数据（账号、密码、银行卡）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据篡改&lt;/td>
&lt;td>执行 &lt;code>UPDATE&lt;/code>、&lt;code>DELETE&lt;/code> 操作，&lt;strong>删库跑路&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>写入后门&lt;/td>
&lt;td>某些情况下配合文件写入，&lt;strong>写入 Webshell&lt;/strong>，反弹命令行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>拓展攻击&lt;/td>
&lt;td>通过数据库获取服务器权限，进一步横向移动攻击其他系统&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="如何防御-sql-注入核心方法">如何防御 SQL 注入？（核心方法）
&lt;/h2>&lt;h3 id="使用-预编译语句prepared-statement">使用 &lt;strong>预编译语句（Prepared Statement）&lt;/strong>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>千万别直接拼接字符串！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>千万别直接拼接字符串！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>千万别直接拼接字符串！&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>错误写法（易被注入）：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sql&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;SELECT * FROM users WHERE username = &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>正确写法（参数绑定，防注入）：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cursor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;SELECT * FROM users WHERE username = &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>各种语言通用写法推荐使用：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>语言&lt;/th>
&lt;th>推荐库&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>PHP&lt;/td>
&lt;td>PDO + bindParam&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Python&lt;/td>
&lt;td>&lt;code>cursor.execute(sql, param)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Java&lt;/td>
&lt;td>&lt;code>PreparedStatement&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Node.js&lt;/td>
&lt;td>&lt;code>mysql.format()&lt;/code>、ORM&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="输入校验--白名单限制">输入校验 + 白名单限制
&lt;/h3>&lt;ul>
&lt;li>只允许合法字符（如用户名只能是字母、数字）&lt;/li>
&lt;li>限制字段长度、格式（如手机号必须 11 位）&lt;/li>
&lt;/ul>
&lt;h3 id="最小权限原则">最小权限原则
&lt;/h3>&lt;ul>
&lt;li>数据库账号只给必要权限&lt;/li>
&lt;li>不要用 &lt;code>root&lt;/code> 账户连接数据库！&lt;/li>
&lt;/ul>
&lt;h3 id="错误信息不暴露">错误信息不暴露
&lt;/h3>&lt;ul>
&lt;li>SQL 报错不能直接显示给用户（容易泄露表名、字段名）&lt;/li>
&lt;li>使用统一的错误提示页面&lt;/li>
&lt;/ul>
&lt;h3 id="使用-orm-框架但要小心">使用 ORM 框架（但要小心）
&lt;/h3>&lt;p>ORM（如 Django ORM、Hibernate）默认防注入，但：&lt;/p>
&lt;ul>
&lt;li>仍可能因原生 SQL 被误用而注入&lt;/li>
&lt;li>ORM 的 &lt;code>extra()&lt;/code> / &lt;code>raw()&lt;/code> / &lt;code>execute()&lt;/code> 等接口使用时要小心&lt;/li>
&lt;/ul>
&lt;h3 id="wafips-网络层防御">WAF/IPS 网络层防御
&lt;/h3>&lt;ul>
&lt;li>使用 Web 应用防火墙拦截注入关键词&lt;/li>
&lt;li>配合日志报警、验证码限制等方式增强防御深度&lt;/li>
&lt;/ul>
&lt;h2 id="总结一句话">总结一句话
&lt;/h2>&lt;blockquote>
&lt;p>&lt;strong>SQL 注入之所以可怕，是因为开发者信了用户的“输入”，数据库却把它当“命令”。&lt;/strong>&lt;/p>&lt;/blockquote></description></item><item><title>Web攻击之 XSS</title><link>https://blog.yellster.top/p/web-attack-xss/</link><pubDate>Mon, 01 Apr 2024 14:48:30 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/web-attack-xss/</guid><description>&lt;h2 id="xss-是什么">XSS 是什么？
&lt;/h2>&lt;p>XSS (Cross-Site Scripting) 是一种网站安全漏洞，其原理是放入恶意脚本，让用户的浏览器执行网站未筛查的 JS 脚本，导致数据被窃取、表单被作弊、页面被篡改等。&lt;/p>
&lt;blockquote>
&lt;p>XSS 不只是技术漏洞，更是信任的破坏者!&lt;/p>
&lt;p>XSS 看起来是弹个窗，实际上是把钥匙偷了、钱抽了、后面还跟你说是你自愿的。&lt;/p>&lt;/blockquote>
&lt;h2 id="xss-类型">XSS 类型
&lt;/h2>&lt;h3 id="反射型-xssreflected-xss">&lt;strong>反射型 XSS（Reflected XSS）&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>过程&lt;/strong>：攻击者构造一个恶意链接，把 &lt;code>&amp;lt;script&amp;gt;&lt;/code> 放在 URL 里 → 受害者点击链接 → 服务端把参数原样“反射”回网页 → 浏览器执行脚本。&lt;/li>
&lt;li>&lt;strong>关键点&lt;/strong>：攻击代码不在服务端持久保存，靠“钓鱼链接”触发。&lt;/li>
&lt;li>&lt;strong>常见场景&lt;/strong>：搜索框、跳转链接、错误提示信息。&lt;/li>
&lt;/ul>
&lt;p>🧠 类比记忆：像“回音墙”，你说什么它就回什么。&lt;/p>
&lt;hr>
&lt;h3 id="存储型-xssstored-xss">&lt;strong>存储型 XSS（Stored XSS）&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>过程&lt;/strong>：攻击者提交脚本（比如发评论）→ 服务端保存到数据库 → 其他用户访问这条评论 → 浏览器执行脚本。&lt;/li>
&lt;li>&lt;strong>关键点&lt;/strong>：脚本 &lt;strong>被存储下来&lt;/strong>，访问页面时自动触发，不需要特意点击链接。&lt;/li>
&lt;li>&lt;strong>常见场景&lt;/strong>：评论区、论坛帖子、个人资料页、客服聊天记录等。&lt;/li>
&lt;/ul>
&lt;p>🧠 类比记忆：像病毒藏在快递里，每个人收件就会感染。&lt;/p>
&lt;hr>
&lt;h3 id="dom-型-xssdom-based-xss">&lt;strong>DOM 型 XSS（DOM-based XSS）&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>过程&lt;/strong>：浏览器 JS 读取 URL 参数、Hash、Cookie 等 → 动态写入页面（innerHTML、document.write） → 没有做转义 → 执行脚本。&lt;/li>
&lt;li>&lt;strong>关键点&lt;/strong>：&lt;strong>完全不经过服务端&lt;/strong>，漏洞存在于前端 JS 的处理逻辑中。&lt;/li>
&lt;li>&lt;strong>常见场景&lt;/strong>：单页应用（SPA）、前端框架中常见。&lt;/li>
&lt;/ul>
&lt;p>🧠 类比记忆：像是浏览器自己给自己挖坑，自己跳进去。&lt;/p>
&lt;h3 id="一个例子三种写法对比">一个例子，三种写法对比
&lt;/h3>&lt;p>以攻击者想弹窗 &lt;code>alert(1)&lt;/code> 为例：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>反射型&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//site.com/search?q=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>存储型&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;comment&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后这个评论被存进数据库，别人一打开就触发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DOM 型&lt;/strong>（JS 代码）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// JS 代码直接取 URL 参数插到页面
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;output&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hash&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 访问： http://site.com/#&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="核心区别">核心区别
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>恶意脚本位置&lt;/th>
&lt;th>触发方式&lt;/th>
&lt;th>是否存储&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>反射型 XSS&lt;/td>
&lt;td>URL 参数中&lt;/td>
&lt;td>点击恶意链接&lt;/td>
&lt;td>❌ 否&lt;/td>
&lt;td>搜索“&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;”&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>存储型 XSS&lt;/td>
&lt;td>数据库 / 日志&lt;/td>
&lt;td>打开启用页面&lt;/td>
&lt;td>✅ 是&lt;/td>
&lt;td>评论区中的 script&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DOM 型 XSS&lt;/td>
&lt;td>前端 DOM 操作&lt;/td>
&lt;td>JS 代码动态触发&lt;/td>
&lt;td>❌ 否&lt;/td>
&lt;td>JS 把 location.hash 写入 HTML&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="xss-的害处">XSS 的害处
&lt;/h2>&lt;h3 id="对个人">【对个人】
&lt;/h3>&lt;ul>
&lt;li>窃取 Cookie/会话凭证：偷取登录状态，偷取账号&lt;/li>
&lt;li>伪造页面：伪认证/伪支付码&lt;/li>
&lt;li>强制操作：切换场景合成 CSRF&lt;/li>
&lt;li>推光性弹窗/跳转：骗屏/色情/转账&lt;/li>
&lt;/ul>
&lt;h3 id="对系统">【对系统】
&lt;/h3>&lt;ul>
&lt;li>数据大量被偷取&lt;/li>
&lt;li>网站内容被乱篡改&lt;/li>
&lt;li>添加 iframe 或动态下载构成木马&lt;/li>
&lt;/ul>
&lt;h3 id="对业务">【对业务】
&lt;/h3>&lt;ul>
&lt;li>用户信任层层坏坏&lt;/li>
&lt;li>规范风险（如 GDPR、网安法）&lt;/li>
&lt;li>被搜索引擎/安全网站拦截&lt;/li>
&lt;/ul>
&lt;h2 id="防御">防御
&lt;/h2>&lt;h3 id="输出编码最核心">输出编码（最核心！）
&lt;/h3>&lt;blockquote>
&lt;p>原则：&lt;strong>“信用户输入，死得很惨；编码输出，活得很稳。”&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>根据输出位置做对应编码（不只是替换 &lt;code>&amp;lt; &amp;gt;&lt;/code> 这么简单）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>输出位置&lt;/th>
&lt;th>编码方式&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>HTML 元素内容&lt;/td>
&lt;td>&lt;code>htmlEncode()&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;div&amp;gt;${userInput}&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HTML 属性值&lt;/td>
&lt;td>&lt;code>attributeEncode()&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;a href=&amp;quot;${userInput}&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>JS 中的变量&lt;/td>
&lt;td>&lt;code>jsEncode()&lt;/code>&lt;/td>
&lt;td>&lt;code>var msg = '${input}';&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>URL 中的参数&lt;/td>
&lt;td>&lt;code>encodeURIComponent()&lt;/code>&lt;/td>
&lt;td>&lt;code>location.href = ...&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>✍️ 记住一句话：&lt;strong>不要原样输出用户输入，必须根据上下文编码！&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h3 id="输入过滤辅助防线">输入过滤（辅助防线）
&lt;/h3>&lt;p>虽然不能完全防止 XSS，但能大幅降低攻击难度。&lt;/p>
&lt;ul>
&lt;li>去除标签：如 &lt;code>&amp;lt;script&amp;gt;&lt;/code>, &lt;code>&amp;lt;iframe&amp;gt;&lt;/code> 等。&lt;/li>
&lt;li>黑名单法有限，推荐使用白名单法：只允许部分 HTML 标签。
&lt;ul>
&lt;li>推荐库：&lt;code>DOMPurify&lt;/code>（前端） / &lt;code>OWASP Java HTML Sanitizer&lt;/code>（后端）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="http-安全头部设置">HTTP 安全头部设置
&lt;/h3>&lt;p>&lt;strong>Content-Security-Policy (CSP):&lt;/strong>&lt;/p>
&lt;p>定义允许加载的资源类型、域名，阻止恶意脚本执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">Content-Security-Policy: default-src &amp;#39;self&amp;#39;; script-src &amp;#39;self&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>作用：&lt;/p>
&lt;ul>
&lt;li>禁止内联 &lt;code>&amp;lt;script&amp;gt;&lt;/code> 执行&lt;/li>
&lt;li>阻止第三方 JS 加载&lt;/li>
&lt;li>检测异常行为&lt;/li>
&lt;/ul>
&lt;h3 id="httponly--secure-cookie">HttpOnly + Secure Cookie
&lt;/h3>&lt;p>&lt;strong>设置 Cookie 为 HttpOnly:&lt;/strong>&lt;/p>
&lt;p>防止 JS 读取 Cookie（攻击者窃取失败）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">Set-Cookie: session=xxx; HttpOnly; Secure
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="前端框架防护机制但别完全依赖">前端框架防护机制（但别完全依赖）
&lt;/h3>&lt;ul>
&lt;li>Vue、React 等默认会对数据做 HTML 转义&lt;/li>
&lt;li>&lt;strong>但要注意&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>v-html&lt;/code>（Vue）/ &lt;code>dangerouslySetInnerHTML&lt;/code>（React） 这些接口绕过了防护！&lt;/li>
&lt;li>千万不要对用户数据使用这些 API！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="其他补充措施">其他补充措施
&lt;/h3>&lt;ul>
&lt;li>表单提交加验证码：减缓自动化脚本攻击&lt;/li>
&lt;li>日志记录 + 异常监控：配合 WAF 实时监控异常行为&lt;/li>
&lt;li>使用 Web 安全网关 / 云 WAF：防护基础设施级别的 XSS 尝试&lt;/li>
&lt;/ul>
&lt;h3 id="一句话总结">一句话总结
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>XSS 防不住的根本原因，不是框架不行，是开发者在瞎传字符串。&lt;/strong>&lt;/p>
&lt;p>所以防御的关键在于：&lt;strong>凡是用户输入的，都不要相信；凡是输出前的，都要处理。&lt;/strong>&lt;/p>&lt;/blockquote></description></item><item><title>动态代理？</title><link>https://blog.yellster.top/p/java-dynamic-proxy/</link><pubDate>Wed, 27 Mar 2024 17:24:03 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/java-dynamic-proxy/</guid><description>&lt;h2 id="代理模式">代理模式
&lt;/h2>&lt;p>&lt;strong>代理模式（Proxy Pattern）&lt;/strong> 是一种结构型设计模式，通过为其他对象提供一种代理以控制对这个对象的访问。&lt;/p>
&lt;p>​它通常用于在不修改原始对象的情况下，增加对对象的控制和扩展功能，例如访问控制、延迟加载、日志记录等。​&lt;/p>
&lt;h3 id="静态代理">静态代理
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>定义:&lt;/strong> 在编译时，代理类已经存在，代理对象和被代理对象之间是一对一的关系。&lt;/li>
&lt;li>&lt;strong>实现方式:&lt;/strong> 手动创建代理类，实现与被代理类相同的接口，在代理类中持有被代理类的实例，通过调用被代理类的方法来实现代理功能。&lt;/li>
&lt;li>&lt;strong>优点:&lt;/strong> 代码简单，易于理解。&lt;/li>
&lt;li>&lt;strong>缺点:&lt;/strong> 每增加一个被代理类，都需要创建一个对应的代理类，代码重复度高，维护困难。&lt;/li>
&lt;/ul>
&lt;h3 id="动态代理">动态代理
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>定义:&lt;/strong> 在运行时动态生成代理类，无需在编译时预先定义代理类。&lt;/li>
&lt;li>&lt;strong>实现方式:&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>JDK 动态代理:&lt;/strong> 利用 Java 的反射机制，在运行时生成实现了指定接口的代理对象。要求被代理类必须实现接口。&lt;/li>
&lt;li>&lt;strong>CGLIB 动态代理:&lt;/strong> 通过继承目标类，生成目标类的子类来实现代理。适用于没有实现接口的类，但无法代理 &lt;code>final&lt;/code> 类和方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优点:&lt;/strong> 提高了代码的灵活性和复用性，减少了代理类的数量。&lt;/li>
&lt;li>&lt;strong>缺点:&lt;/strong> 相对于静态代理，性能开销略大，因为涉及到反射和动态生成类。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>很多场景都是利用类似机制做到的，比如用来包装 RPC 调用、面向切面的编程（AOP）。&lt;/p>
&lt;p>通过代理可以让调用者与实现者之间解耦。比如进行 RPC 调用，框架内部的寻址、序列化、反序列化等，对于调用者往往是没有太大意义的。&lt;/p>&lt;/blockquote>
&lt;h2 id="jdk-动态代理">JDK 动态代理
&lt;/h2>&lt;p>JDK 动态代理基于 Java 的&lt;a class="link" href="https://blog.yellster.top/p/java-reflection" >反射机制&lt;/a>，代理对象需要 &lt;strong>实现至少一个接口&lt;/strong>，代理类在运行时动态生成要求。&lt;/p>
&lt;ul>
&lt;li>代理对象由 &lt;code>Proxy.newProxyInstance()&lt;/code> 动态生成，其实现了 &lt;code>HelloService&lt;/code> 接口。&lt;/li>
&lt;li>在 &lt;code>InvocationHandler&lt;/code> 中对方法调用进行了拦截，可在调用前后加入额外处理逻辑。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// HelloService.java&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">HelloService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// HelloServiceImpl.java&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloServiceImpl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HelloService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// DynamicProxyDemo.java&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.lang.reflect.InvocationHandler&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.lang.reflect.Method&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.lang.reflect.Proxy&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">DynamicProxyDemo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 创建原始对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">HelloService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HelloServiceImpl&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 利用 Proxy.newProxyInstance 创建代理对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">HelloService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxyInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">HelloService&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newProxyInstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">HelloService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InvocationHandler&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxy&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Method&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Before method: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;After method: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 调用代理对象的方法&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">proxyInstance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="cglib-动态代理">CGLIB 动态代理
&lt;/h2>&lt;p>当目标类没有实现接口时，可以使用 &lt;code>CGLIB&lt;/code> 动态代理，基于 ASM 字节码操作框架，通过继承目标类生成代理类。 &lt;em>&lt;strong>需要添加 CGLIB 的依赖&lt;/strong>&lt;/em>。&lt;/p>
&lt;p>因为是子类化，我们可以达到近似使用被调用者本身的效果。在 Spring 编程中，框架通常会处理这种情况。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Enhancer&lt;/code> 用于生成目标类（这里是 Person 类）的子类。&lt;/li>
&lt;li>在 &lt;code>MethodInterceptor&lt;/code> 的 &lt;code>intercept&lt;/code> 方法中可以对方法调用进行拦截，添加前置或后置逻辑。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- pom.xml --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>cglib&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>cglib&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>3.3.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// CGLIBProxyDemo.java&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">net.sf.cglib.proxy.Enhancer&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">net.sf.cglib.proxy.MethodInterceptor&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">net.sf.cglib.proxy.MethodProxy&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.lang.reflect.Method&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">CGLIBProxyDemo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Enhancer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Enhancer&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 指定需要代理的目标类&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setSuperclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 设置方法拦截器&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MethodInterceptor&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">intercept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Method&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MethodProxy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxy&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Before method: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">invokeSuper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;After method: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 创建代理对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cglib-注意事项">CGLIB 注意事项
&lt;/h3>&lt;p>自 &lt;strong>JDK 9&lt;/strong> 引入 &lt;strong>模块化系统（JPMS）&lt;/strong> 以来，对 CGLIB 的使用受到了一定限制。&lt;/p>
&lt;p>​CGLIB 通过生成目标类的子类来实现代理，这需要在运行时访问目标类的构造方法和方法。&lt;/p>
&lt;p>&lt;strong>​然而，JDK 9 的模块系统对&lt;a class="link" href="https://blog.yellster.top/p/java-reflection" >反射&lt;/a>访问进行了严格控制，默认情况下，模块之间的访问是受限的&lt;/strong>。因此，CGLIB 在尝试通过&lt;a class="link" href="https://blog.yellster.top/p/java-reflection" >反射&lt;/a>访问 &lt;code>ClassLoader.defineClass&lt;/code> 时会抛出 &lt;code>InaccessibleObjectException&lt;/code>。&lt;/p>
&lt;p>&lt;strong>解决办法:&lt;/strong> 可以在启动应用时添加 JVM 参数，显式打开需要的模块包，以允许 CGLIB 进行&lt;a class="link" href="https://blog.yellster.top/p/java-reflection" >反射&lt;/a>访问。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--add-opens java.base/java.lang&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该参数的作用是将 java.base 模块中的 java.lang 包对所有未命名模块（即没有显式声明模块的代码）开放，从而允许&lt;a class="link" href="https://blog.yellster.top/p/java-reflection" >反射&lt;/a>访问。&lt;/p>
&lt;h2 id="jdk-动态代理-vs-cglib-动态代理">JDK 动态代理 VS CGLIB 动态代理
&lt;/h2>&lt;p>JDK 动态代理&lt;/p>
&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>&lt;strong>简洁易用&lt;/strong>：利用 Java 内置的&lt;a class="link" href="https://blog.yellster.top/p/java-reflection" >反射&lt;/a>机制，无需引入第三方依赖&lt;/li>
&lt;li>&lt;strong>接口驱动&lt;/strong>：代理类必须实现接口，符合面向接口编程的设计原则&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>&lt;strong>只能代理接口&lt;/strong>：无法对没有实现接口的类进行代理&lt;/li>
&lt;li>&lt;strong>性能开销&lt;/strong>：通过&lt;a class="link" href="https://blog.yellster.top/p/java-reflection" >反射&lt;/a>实现，性能较低&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>CGLIB 动态代理&lt;/p>
&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>&lt;strong>无需接口&lt;/strong>：可以代理没有实现接口的类&lt;/li>
&lt;li>&lt;strong>性能较高&lt;/strong>：生成的代理类方法调用性能优于 JDK动态代理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>&lt;strong>类限制&lt;/strong>：无法代理被 &lt;code>final&lt;/code> 修饰的类和方法，因为 CGLIB 通过继承实现代理&lt;/li>
&lt;li>&lt;strong>引入依赖&lt;/strong>：需要引入 CGLIB 的依赖&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在实际应用中，框架如 Spring 会根据目标对象的情况，选择使用 JDK 动态代理或 CGLIB 动态代理，以实现 AOP 功能。​&lt;/p>&lt;/blockquote>
&lt;h2 id="与装饰器模式的区别">与装饰器模式的区别？
&lt;/h2>&lt;p>代理模式和装饰器模式在结构上可能相似，但它们在&lt;strong>目的&lt;/strong>、&lt;strong>关注点&lt;/strong>和&lt;strong>使用方式&lt;/strong>上有显著区别。&lt;/p>
&lt;p>&lt;strong>1. 目的:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>代理模式（Proxy Pattern）:&lt;/strong> 主要目的是控制对目标对象的访问。代理对象通常用于在客户端和真实对象之间提供一个中介，控制对真实对象的访问权限或添加额外的操作，例如延迟加载、安全检查或远程调用等。&lt;/li>
&lt;li>&lt;strong>装饰器模式（Decorator Pattern）:&lt;/strong> 主要目的是动态地增强对象的功能。通过将原始对象包装在装饰器中，可以在不修改原始类的情况下，添加新的行为或功能。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. 关注点:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>代理模式:&lt;/strong> 关注于对对象访问的控制和管理，强调如何代理和控制对真实对象的操作。&lt;/li>
&lt;li>&lt;strong>装饰器模式:&lt;/strong> 关注于对对象功能的扩展和增强，强调如何在运行时添加新的功能或行为。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>3. 使用方式:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>代理模式:&lt;/strong> 代理类通常在编译时就确定，与真实对象实现相同的接口，并持有对真实对象的引用。在客户端通过代理对象访问真实对象，代理对象可以在调用真实对象的方法前后添加额外的操作。&lt;/li>
&lt;li>&lt;strong>装饰器模式:&lt;/strong> 装饰器类也实现与被装饰对象相同的接口，但通常在运行时动态创建，并将被装饰对象作为构造参数传入。装饰器对象通过组合的方式，将增强功能添加到被装饰对象上。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>代理模式:&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">request&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">RealSubject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">request&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;RealSubject request&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ProxySubject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RealSubject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">realSubject&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ProxySubject&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">realSubject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RealSubject&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">request&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 代理操作，例如访问控制&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ProxySubject request&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">realSubject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>装饰器模式:&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">request&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">RealSubject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">request&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;RealSubject request&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">DecoratorSubject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">DecoratorSubject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">request&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 装饰操作，例如功能增强&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DecoratorSubject request&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>总结而言，代理模式侧重于控制对对象的访问，而装饰器模式侧重于增强对象的功能。代理对象通常用于控制对真实对象的访问权限，而装饰器对象用于在运行时动态地添加新的功能或行为。&lt;/p></description></item><item><title>反射？</title><link>https://blog.yellster.top/p/java-reflection/</link><pubDate>Tue, 26 Mar 2024 17:24:03 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/java-reflection/</guid><description>&lt;p>&lt;strong>反射（Reflection）&lt;/strong> 是&lt;code>Java&lt;/code>语言的一个特性，它允许程序在 &lt;strong>运行时(runtime)&lt;/strong> 动态分析、检查和修改类、对象、方法、字段等的能力。它突破了传统代码的静态限制，允许程序在运行期间 &lt;strong>自省（introspect）&lt;/strong> 和 &lt;strong>动态操作&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>: 将类的结构（方法、字段、构造函数等）映射为Java对象，通过API直接操作。&lt;/p>
&lt;p>&lt;strong>类对象是何时产生的？&lt;/strong>: 在类加载时产生的。在Java程序启动时，JVM会加载所需的类，并为每个类创建一个Class对象，这个对象包含了该类的所有结构信息，可以通过反射机制获取。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>反射机制&lt;/strong> 是Java被视为&lt;code>动态语言&lt;/code>的关键特性之一。&lt;/p>
&lt;p>&lt;strong>自省（Introspection）&lt;/strong> 指的是程序在运行时检查自身类型信息的能力&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://blog.yellster.top/p/java-reflection/%E5%8F%8D%E5%B0%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png"
width="1488"
height="790"
srcset="https://blog.yellster.top/p/java-reflection/%E5%8F%8D%E5%B0%84%E6%B5%81%E7%A8%8B%E5%9B%BE_hu_2b173f7bca4db030.png 480w, https://blog.yellster.top/p/java-reflection/%E5%8F%8D%E5%B0%84%E6%B5%81%E7%A8%8B%E5%9B%BE_hu_6cabec9b3d6de7e.png 1024w"
loading="lazy"
alt="反射流程图"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;h2 id="核心原理">核心原理
&lt;/h2>&lt;p>Java反射的核心原理基于JVM的类加载机制和Java的类型系统:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>类加载机制&lt;/strong>: 当Java程序运行时，JVM会加载所需的类，并为每个类创建一个Class对象，这个对象包含了该类的所有结构信息。&lt;/li>
&lt;li>&lt;strong>Class对象&lt;/strong>: 每个类在JVM中都有且只有一个对应的Class对象，这个对象是反射的入口点。&lt;/li>
&lt;li>&lt;strong>运行时类型信息(RTTI)&lt;/strong>: Java在运行时保留了对象的类型信息，这使得反射成为可能。&lt;/li>
&lt;/ul>
&lt;h2 id="核心api">核心API
&lt;/h2>&lt;p>Java反射的核心类位于 &lt;code>java.lang.reflect&lt;/code> 包中，关键API包括:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类/接口&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>java.lang.Class&lt;/code>&lt;/td>
&lt;td>表示一个类或接口的特性，如名称、字段、方法等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>java.lang.reflect.Field&lt;/code>&lt;/td>
&lt;td>提供了类或接口的单个字段的信息和动态访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>java.lang.reflect.Method&lt;/code>&lt;/td>
&lt;td>提供了类或接口上单个方法的信息和访问权限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>java.lang.reflect.Constructor&lt;/code>&lt;/td>
&lt;td>提供了类的单个构造函数的信息和访问权限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>java.lang.reflect.Array&lt;/code>&lt;/td>
&lt;td>提供了动态创建和访问 Java 数组的静态方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>java.lang.reflect.Modifier&lt;/code>&lt;/td>
&lt;td>提供了静态方法和常量，用于解码类和成员访问修改器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="典型场景">典型场景
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>框架开发&lt;/strong>
&lt;ul>
&lt;li>Spring的依赖注入（IoC）、MyBatis的ORM映射。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>动态代理&lt;/strong>
&lt;ul>
&lt;li>结合&lt;code>InvocationHandler&lt;/code>实现AOP（如日志、事务）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>序列化与反序列化&lt;/strong>
&lt;ul>
&lt;li>如Jackson/GSON通过反射读取字段生成JSON。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>IDE和调试工具&lt;/strong>
&lt;ul>
&lt;li>代码自动提示、对象属性查看。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>测试框架&lt;/strong>
&lt;ul>
&lt;li>JUnit通过反射调用测试方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="核心操作步骤">核心操作步骤
&lt;/h2>&lt;h3 id="获取类的class对象">获取类的&lt;code>Class&lt;/code>对象
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 方式1: 通过类名.class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 方式2: 通过对象.getClass()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 方式3: 通过Class.forName()（最常用）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;java.lang.String&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 方式4: 调用类的加载器&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">ClassLoader&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">loadClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;java.lang.String&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="操作构造函数-动态创建对象">操作构造函数: 动态创建对象
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取无参构造器并创建对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Constructor&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">constructor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getConstructor&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">constructor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 获取有参构造器（例如: String的byte[]构造器）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Constructor&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">constructor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getConstructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">constructor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">65&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">66&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="getxxx-和-getdeclaredxxx-的区别">getXXX() 和 getDeclaredXXX() 的区别
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>访问范围&lt;/th>
&lt;th>是否包含私有成员&lt;/th>
&lt;th>是否包含继承成员&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>&lt;code>getXXX()&lt;/code>&lt;/strong>&lt;/td>
&lt;td>仅返回 &lt;strong>public&lt;/strong> 成员&lt;/td>
&lt;td>❌ 不包含&lt;/td>
&lt;td>✅ 包含父类的 &lt;code>public&lt;/code> 成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>getDeclaredXXX()&lt;/code>&lt;/strong>&lt;/td>
&lt;td>返回 &lt;strong>所有权限&lt;/strong> 的成员（public/protected/private/default）&lt;/td>
&lt;td>✅ 包含&lt;/td>
&lt;td>❌ 仅限当前类&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="getxxx-和-getdeclaredxxx-的使用场景对比">getXXX() 和 getDeclaredXXX() 的使用场景对比
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>场景&lt;/strong>&lt;/th>
&lt;th>&lt;strong>推荐方法&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>获取公共 API（如框架调用）&lt;/td>
&lt;td>&lt;code>getXXX()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>访问私有成员（如测试、破解单例）&lt;/td>
&lt;td>&lt;code>getDeclaredXXX()&lt;/code> + &lt;code>setAccessible(true)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>需要继承的成员&lt;/td>
&lt;td>&lt;code>getXXX()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>仅操作当前类成员&lt;/td>
&lt;td>&lt;code>getDeclaredXXX()&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="注意事项">注意事项
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>继承关系&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>getXXX()&lt;/code> 会查找父类的 &lt;code>public&lt;/code> 成员。&lt;/li>
&lt;li>&lt;code>getDeclaredXXX()&lt;/code> 仅限当前类，不检查父类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>访问私有成员&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过 &lt;code>getDeclaredXXX()&lt;/code> 获取私有成员后，需调用 &lt;code>setAccessible(true)&lt;/code> 解除访问限制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能影响&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>反射操作比直接调用慢，必要时可缓存 &lt;code>Method&lt;/code>/&lt;code>Field&lt;/code> 对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模块化系统（Java 9+）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果类在模块中，需在 &lt;code>module-info.java&lt;/code> 中开放权限（&lt;code>opens&lt;/code>）才能反射访问非 &lt;code>public&lt;/code> 成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.yellster.top/p/java-reflection/java.lang.reflect.Member.png"
width="1476"
height="820"
srcset="https://blog.yellster.top/p/java-reflection/java.lang.reflect.Member_hu_d810bcc6b7d95a72.png 480w, https://blog.yellster.top/p/java-reflection/java.lang.reflect.Member_hu_8228d7ae83c859c3.png 1024w"
loading="lazy"
alt="java.lang.reflect.Member"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;h3 id="操作方法-动态调用">操作方法: 动态调用
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取方法（例如: String的substring方法）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Method&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;substring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 调用方法（对某个实例执行）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Reflection&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出 &amp;#34;fle&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="methodinvoke-的返回值规则">&lt;code>Method.invoke()&lt;/code> 的返回值规则
&lt;/h4>&lt;p>&lt;code>result&lt;/code> 的可能情况：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>被调用方法的返回类型&lt;/th>
&lt;th>&lt;code>invoke()&lt;/code> 返回的 &lt;code>result&lt;/code> 类型&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>有返回值的方法&lt;/strong>&lt;/td>
&lt;td>返回 &lt;code>Object&lt;/code>（实际为方法返回值）&lt;/td>
&lt;td>&lt;code>String.substring()&lt;/code> → &lt;code>String&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>返回 &lt;code>void&lt;/code> 的方法&lt;/strong>&lt;/td>
&lt;td>返回 &lt;code>null&lt;/code>&lt;/td>
&lt;td>&lt;code>List.clear()&lt;/code> → &lt;code>null&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>基本类型（如 &lt;code>int&lt;/code>）&lt;/strong>&lt;/td>
&lt;td>自动装箱为包装类（如 &lt;code>Integer&lt;/code>）&lt;/td>
&lt;td>&lt;code>String.length()&lt;/code> → &lt;code>Integer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>静态方法&lt;/strong>&lt;/td>
&lt;td>正常返回（&lt;code>obj&lt;/code> 参数传 &lt;code>null&lt;/code>）&lt;/td>
&lt;td>&lt;code>Math.max()&lt;/code> → &lt;code>Integer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>方法抛出异常&lt;/strong>&lt;/td>
&lt;td>封装成 &lt;code>InvocationTargetException&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="为什么返回-object-而不是具体类型">为什么返回 &lt;code>Object&lt;/code> 而不是具体类型？
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>反射的通用性&lt;/strong>：&lt;code>Method.invoke()&lt;/code> 需要适配任意方法签名，&lt;code>Object&lt;/code> 是所有类型的超类。&lt;/li>
&lt;li>&lt;strong>类型安全&lt;/strong>：由开发者自行处理强制转型（编译器无法检查反射调用的返回类型）。&lt;/li>
&lt;/ul>
&lt;h3 id="操作字段-动态读写属性">操作字段: 动态读写属性
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取字段（例如: Integer的MAX_VALUE）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Field&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MAX_VALUE&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 读取字段值（静态字段可传null）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出2147483647&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 修改字段值（需注意final字段可能抛出异常）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 突破private限制（慎用！）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 危险操作！可能破坏程序逻辑。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="优缺点">优缺点
&lt;/h2>&lt;h3 id="优点">优点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>动态性&lt;/strong>: 允许在运行时动态地获取和操作类的信息，而不需要在编译时知道类的具体细节&lt;/li>
&lt;li>&lt;strong>灵活性&lt;/strong>: 可以通过类名字符串来创建对象实例，可以在运行时动态调用方法和字段，以及访问和修改私有成员&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>: 可以用于实现一些高级功能，如动态代理、注解处理、依赖注入等&lt;/li>
&lt;/ul>
&lt;h3 id="缺点">缺点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>性能开销&lt;/strong>: 反射操作通常比直接调用慢，因为它需要在运行时获取和操作类的信息，需要额外的处理开销&lt;/li>
&lt;li>&lt;strong>安全问题&lt;/strong>: 反射可以访问和修改私有成员，这可能导致安全隐患和程序逻辑错误&lt;/li>
&lt;li>&lt;strong>复杂性&lt;/strong>: 使用反射可能会使代码变得复杂和难以理解，增加了维护成本&lt;/li>
&lt;/ul>
&lt;h2 id="为什么会慢">为什么会慢？
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>动态类型解析&lt;/strong>: 反射需要在运行时解析类和方法的信息，这使得编译器无法对这些代码进行优化。相比之下，直接调用方法或构造函数可以在编译时进行静态绑定和优化。&lt;/li>
&lt;li>&lt;strong>方法查找和验证&lt;/strong>: 通过反射调用方法时，Java 需要查找方法并进行可见性检查，这增加了额外的开销。&lt;/li>
&lt;li>&lt;strong>安全性检查&lt;/strong>: 反射允许访问和修改私有字段和方法，JVM 为了保证安全性，需要在反射操作时进行额外的检查，增加了性能开销。&lt;/li>
&lt;li>&lt;strong>JIT 编译优化限制&lt;/strong>: 由于反射操作的动态性，JIT 编译器无法对其进行内联等优化，导致性能低于直接调用。&lt;/li>
&lt;/ol></description></item><item><title>String &amp; StringBuffer &amp; StringBuilder</title><link>https://blog.yellster.top/p/string-stringbuffer-stringbuilder/</link><pubDate>Mon, 25 Mar 2024 14:36:56 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/string-stringbuffer-stringbuilder/</guid><description>&lt;h2 id="对比">对比
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>String&lt;/th>
&lt;th>StringBuffer&lt;/th>
&lt;th>StringBuilder&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>可变性&lt;/strong>&lt;/td>
&lt;td>不可变&lt;/td>
&lt;td>可变&lt;/td>
&lt;td>可变&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>线程安全&lt;/strong>&lt;/td>
&lt;td>是（天然不可变）&lt;/td>
&lt;td>是（synchronized方法）&lt;/td>
&lt;td>否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>性能&lt;/strong>&lt;/td>
&lt;td>低（频繁创建对象）&lt;/td>
&lt;td>中&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>内存分配&lt;/strong>&lt;/td>
&lt;td>每次修改产生新对象&lt;/td>
&lt;td>动态数组&lt;/td>
&lt;td>动态数组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>初始化容量&lt;/strong>&lt;/td>
&lt;td>不可设置&lt;/td>
&lt;td>默认16，可自定义&lt;/td>
&lt;td>默认16，可自定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>JDK版本&lt;/strong>&lt;/td>
&lt;td>1.0&lt;/td>
&lt;td>1.0&lt;/td>
&lt;td>1.5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>使用场景&lt;/strong>&lt;/td>
&lt;td>常量字符串、配置信息&lt;/td>
&lt;td>多线程环境字符串操作&lt;/td>
&lt;td>单线程环境字符串操作&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="实现分析">实现分析
&lt;/h2>&lt;p>Java字符串体系结构&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">┌───────────┐ ┌───────────────────────┐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ String │ │ AbstractStringBuilder │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│-----------│ │-----------------------│
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ - value[] │&amp;lt;──────&amp;gt;│ + value[] │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ - hash │ │ + count │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└────┬──────┘ └──────┬────────────────┘
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ▼ ▼
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">┌───────────────┐ ┌─────────────────┐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ StringBuffer │ │ StringBuilder │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│---------------│ │-----------------│
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ + sync methods│ │ - non-sync │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└───────────────┘ └─────────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="string">String
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Serializable&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/** 实际存储数据的不可变数组 */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// jdk9 之前&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// jdk9 之后&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/** 字符串的哈希码缓存 */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Default to 0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>不可变性：value数组被声明为final，任何修改都会创建新对象&lt;/li>
&lt;li>内存优化：从JDK9开始改用byte[]存储，支持LATIN1/UTF-16编码&lt;/li>
&lt;li>常量池：&lt;strong>字符串字面量&lt;/strong>自动加入常量池，减少重复创建&lt;/li>
&lt;/ul>
&lt;h3 id="stringbuffer--stringbuilder">StringBuffer &amp;amp; StringBuilder
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">abstract&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">AbstractStringBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/** 动态数组存储字符数据 */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/** 当前已使用的字符数 */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringBuffer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AbstractStringBuilder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Serializable&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 所有方法添加synchronized关键字&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuffer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringBuilder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AbstractStringBuilder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Serializable&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 非线程安全实现&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>动态扩容：初始容量16（字符数）&lt;/li>
&lt;li>线程安全：StringBuffer通过方法级同步保证线程安全（&lt;code>synchronized&lt;/code> 关键字修饰）&lt;/li>
&lt;li>继承抽象类：StringBuffer和StringBuilder都继承了AbstractStringBuilder&lt;/li>
&lt;/ul>
&lt;h4 id="扩容分析基于jdk17">扩容分析，基于jdk17
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 公开的容量确认方法&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ensureCapacity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">minimumCapacity&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">minimumCapacity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 过滤无效参数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ensureCapacityInternal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">minimumCapacity&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 调用内部扩容逻辑&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 内部扩容实现&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ensureCapacityInternal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">minimumCapacity&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 计算当前字符容量（字节长度 &amp;gt;&amp;gt; 编码位数）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oldCapacity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 需要扩容的条件判断&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">minimumCapacity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oldCapacity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 创建新数组并复制数据&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">copyOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">newCapacity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">minimumCapacity&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 新容量计算逻辑&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">newCapacity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">minCapacity&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 当前数组的字节长度&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oldLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 计算所需的最小字节长度（字符数 &amp;lt;&amp;lt; 编码位数）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">newLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">minCapacity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 需要扩展的字节数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">growth&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">newLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oldLength&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 动态计算新容量（核心扩容算法）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArraysSupport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oldLength&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">growth&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">oldLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 默认扩展量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 处理最大容量限制&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OutOfMemoryError&lt;/span>&lt;span class="p">(...);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 返回字符容量（字节长度 &amp;gt;&amp;gt; 编码位数）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>
&lt;p>&lt;strong>编码处理（coder字段）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>coder&lt;/code>取值0（LATIN1）或1（UTF16BE）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>位移操作实现字节与字符转换：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 字节长度 → 字符容量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">characters&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bytesLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 字符容量 → 字节长度&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">characters&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩容策略&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ArraysSupport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oldLength&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 当前数组长度（字节）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">minGrowth&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 至少需要增长的量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">prefGrowth&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 推荐增长量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArraysSupport&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oldLength&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">growth&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oldLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>实际扩容公式：&lt;code>新长度 = oldLength + max(minGrowth, prefGrowth)&lt;/code>&lt;/li>
&lt;li>默认扩展量计算：&lt;code>prefGrowth = oldLength + (2 &amp;lt;&amp;lt; coder)&lt;/code>
&lt;ul>
&lt;li>LATIN1编码时：+2字节（即扩容2字符）&lt;/li>
&lt;li>UTF16编码时：+4字节（即扩容2字符）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态扩容流程&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">原始数组 → 计算最小需求 →
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">┌─满足需求 → 直接返回
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└─需要扩容 → 计算新容量 →
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├─超过限制 → 抛出OOM
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └─创建新数组 → 数据复制
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能优化点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>延迟计算&lt;/strong>：只在需要扩容时进行计算&lt;/li>
&lt;li>&lt;strong>按需扩容&lt;/strong>：根据实际增长需求动态调整&lt;/li>
&lt;li>&lt;strong>位运算优化&lt;/strong>：使用位移代替乘除运算&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="扩容示例">扩容示例
&lt;/h4>&lt;p>假设原始状态：&lt;/p>
&lt;ul>
&lt;li>编码方式：UTF16（coder=1）&lt;/li>
&lt;li>当前内容：&amp;ldquo;Hello&amp;rdquo;（5字符）&lt;/li>
&lt;li>当前数组：char[16]（初始容量16字符）&lt;/li>
&lt;/ul>
&lt;p>执行append(&amp;ldquo;World!&amp;quot;)后：&lt;/p>
&lt;ol>
&lt;li>需要总字符数：5 + 6 = 11&lt;/li>
&lt;li>当前容量16足够，无需扩容&lt;/li>
&lt;/ol>
&lt;p>继续追加数据直到需要17字符：&lt;/p>
&lt;ol>
&lt;li>计算最小字节需求：17 &amp;lt;&amp;lt; 1 = 34字节&lt;/li>
&lt;li>当前数组长度：16 &amp;lt;&amp;lt; 1 = 32字节&lt;/li>
&lt;li>计算growth = 34 - 32 = 2字节&lt;/li>
&lt;li>计算prefGrowth：32 + (2 &amp;lt;&amp;lt; 1) = 36&lt;/li>
&lt;li>新长度 = 32 + max(2, 36-32) = 32 + 4 = 36字节&lt;/li>
&lt;li>新字符容量：36 &amp;gt;&amp;gt; 1 = 18字符&lt;/li>
&lt;/ol>
&lt;p>最终完成从16到18字符的扩容，实际扩容量是原始容量的1.125倍，而非传统的双倍扩容。&lt;/p>
&lt;h3 id="性能测试">性能测试
&lt;/h3>&lt;h4 id="测试场景">测试场景
&lt;/h4>&lt;p>10万次字符串追加操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">PerformanceTest&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOOP_COUNT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">100_000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// String测试&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nanoTime&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOOP_COUNT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nanoTime&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1_000_000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// StringBuffer测试&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nanoTime&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuffer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sbuf&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuffer&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOOP_COUNT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sbuf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nanoTime&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1_000_000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// StringBuilder测试&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nanoTime&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOOP_COUNT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nanoTime&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1_000_000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;String: %dms%n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;StringBuffer: %dms%n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;StringBuilder: %dms%n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="测试结果">测试结果
&lt;/h4>&lt;p>JDK17，Mac M1&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>实现方式&lt;/th>
&lt;th>耗时（ms）&lt;/th>
&lt;th>内存分配（MB）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>String&lt;/td>
&lt;td>4236&lt;/td>
&lt;td>218&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StringBuffer&lt;/td>
&lt;td>12&lt;/td>
&lt;td>0.5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StringBuilder&lt;/td>
&lt;td>8&lt;/td>
&lt;td>0.3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="最佳实践">最佳实践
&lt;/h2>&lt;h3 id="选择策略">选择策略
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>优先使用String&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>存储常量配置信息&lt;/li>
&lt;li>作为方法参数传递&lt;/li>
&lt;li>需要作为Map的Key使用时&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用StringBuilder&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>单线程环境下字符串拼接&lt;/li>
&lt;li>SQL语句动态构建&lt;/li>
&lt;li>日志消息组装&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用StringBuffer&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>多线程共享的字符串操作&lt;/li>
&lt;li>全局日志缓冲区&lt;/li>
&lt;li>需要同步修改的共享资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="性能优化技巧">性能优化技巧
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 预分配容量（减少扩容次数）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1024&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 链式调用优化&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Name: &amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;, Age: &amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getAge&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 避免在循环中使用字符串拼接&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 错误示例：&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 产生大量临时对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 正确示例：&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="特殊场景处理">特殊场景处理
&lt;/h3>&lt;p>&lt;strong>多线程安全操作&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用StringBuffer的同步控制&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SharedResource&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuffer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuffer&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">safeAppend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 或使用ThreadLocal&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ThreadLocal&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">localBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ThreadLocal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">withInitial&lt;/span>&lt;span class="p">(()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">256&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="常见误区">常见误区
&lt;/h2>&lt;h3 id="误区1stringbuilder一定比stringbuffer快">误区1：StringBuilder一定比StringBuffer快
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>真相&lt;/strong>：在单线程环境下确实如此，但差异通常在微秒级。实际开发中更应关注代码可读性&lt;/li>
&lt;/ul>
&lt;h3 id="误区2stringbuffer可以完全替代stringbuilder">误区2：StringBuffer可以完全替代StringBuilder
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>线程开销&lt;/strong>：StringBuffer的同步锁在竞争激烈时会导致性能骤降&lt;/li>
&lt;li>&lt;strong>对象复用&lt;/strong>：StringBuffer实例作为类成员时可能被错误共享&lt;/li>
&lt;/ul>
&lt;h2 id="进阶">进阶
&lt;/h2>&lt;h3 id="jdk8优化改进">JDK8优化改进
&lt;/h3>&lt;p>在 Java 8 之后，编译器对 &lt;code>String&lt;/code> 常量拼接进行了优化，主要是通过 &lt;strong>字符串常量池&lt;/strong> 和 &lt;strong>&lt;code>StringBuilder&lt;/code>&lt;/strong> 进行优化。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>常量折叠（Constant Folding）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>编译器会在编译时将 &lt;code>String&lt;/code> 的常量拼接计算出结果。这意味着在代码编译时，所有的常量字符串拼接都会被直接合并为一个常量字符串。&lt;/li>
&lt;li>这种优化可以减少运行时的计算，因为常量拼接的结果已经在编译时得到了处理。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringConcatenation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这是常量拼接&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译器会直接把 &lt;code>&amp;quot;Hello&amp;quot; + &amp;quot; &amp;quot; + &amp;quot;World&amp;quot;&lt;/code> 计算为 &lt;code>&amp;quot;Hello World&amp;quot;&lt;/code>，因此代码最终会变成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringConcatenation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>字符串拼接使用 &lt;code>StringBuilder&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于运行时的拼接，编译器会自动使用 &lt;code>StringBuilder&lt;/code> 来优化多个字符串的拼接操作，避免了重复创建临时 &lt;code>String&lt;/code> 对象。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringConcatenation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 运行时拼接&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译器会优化为使用 &lt;code>StringBuilder&lt;/code>，最终生成的字节码类似于：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringConcatenation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="jdk9优化改进">JDK9优化改进
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>紧凑字符串&lt;/strong>：根据内容自动选择Latin-1或UTF-16编码&lt;/li>
&lt;li>&lt;strong>字符串去重&lt;/strong>：G1垃圾收集器的字符串去重功能（-XX:+UseStringDeduplication）&lt;/li>
&lt;/ul>
&lt;h3 id="内存泄漏防范">内存泄漏防范
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 大字符串处理示例&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">processHugeData&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hugeString&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">readHugeFile&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 1MB字符串&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 错误用法：截取小部分但保留大数组&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subStr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hugeString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 正确做法：显式创建新字符串&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subStr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hugeString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字符串池机制">字符串池机制
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// true（常量池引用）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// false（堆中新对象）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>基础原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>优先考虑不可变性 → String&lt;/li>
&lt;li>单线程可变需求 → StringBuilder&lt;/li>
&lt;li>多线程可变需求 → StringBuffer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能关键点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>避免不必要的字符串对象创建&lt;/li>
&lt;li>预估容量减少扩容次数&lt;/li>
&lt;li>警惕大字符串的内存驻留&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>发展趋势&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>Valhalla项目的值类型（inline class）可能带来新的字符串实现&lt;/li>
&lt;li>GraalVM的字符串优化策略&lt;/li>
&lt;li>Project Loom对字符串操作的影响&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过合理选择字符串处理类，开发者可以在保证代码质量的同时，显著提升应用程序的性能表现。建议在关键路径代码中结合性能分析工具（如Async Profiler）进行针对性优化。&lt;/p></description></item><item><title>如何理解 Final 关键字？</title><link>https://blog.yellster.top/p/java-final/</link><pubDate>Thu, 21 Mar 2024 16:58:52 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/java-final/</guid><description>&lt;p>在 Java 中，&lt;code>final&lt;/code> 关键字是一个修饰符，用于定义变量、方法或类的不可变性或不可继承性。&lt;/p>
&lt;p>它的核心作用是限制修改或继承，从而增强代码的安全性、可读性和设计约束。&lt;/p>
&lt;h2 id="作用范围">作用范围
&lt;/h2>&lt;h3 id="修饰变量">修饰变量
&lt;/h3>&lt;p>局部变量：必须在声明时或使用前赋值一次，之后不可修改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// x = 20; // 编译错误：无法修改 final 变量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成员变量：必须在声明时、构造方法或初始化块中赋值一次。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MAX_VALUE&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 非静态 final 变量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MIN_VALUE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 静态 final 常量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">MyClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MAX_VALUE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 在构造方法中赋值&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>引用类型变量&lt;/p>
&lt;p>&lt;code>final&lt;/code> 修饰的是引用，而非对象本身。引用不可变，但对象内部状态可能可变。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Java&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 允许修改对象内容&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// list = new ArrayList&amp;lt;&amp;gt;(); // 编译错误：引用不可变&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修饰方法">修饰方法
&lt;/h3>&lt;p>方法不可被重写：子类无法覆盖父类的 final 方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Parent&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Parent&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// @Override // 编译错误：无法重写 final 方法&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// public void print() { ... }&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设计意图：&lt;/p>
&lt;ul>
&lt;li>防止关键方法（如算法逻辑、安全校验）被子类意外修改。&lt;/li>
&lt;/ul>
&lt;h3 id="修饰类">修饰类
&lt;/h3>&lt;p>类不可被继承：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringUtils&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 工具类通常设计为 final&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 工具方法...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// class ExtendedUtils extends StringUtils { } // 编译错误&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设计意图：&lt;/p>
&lt;ul>
&lt;li>防止继承破坏类的内部逻辑（如 &lt;code>String&lt;/code>、&lt;code>Integer&lt;/code> 等不可变类）。&lt;/li>
&lt;li>强制使用组合而非继承（如工具类）。&lt;/li>
&lt;/ul>
&lt;h2 id="设计意义">设计意义
&lt;/h2>&lt;h3 id="安全性">安全性
&lt;/h3>&lt;ul>
&lt;li>常量定义：通过 &lt;code>final&lt;/code> 变量定义全局常量（如配置参数），防止意外修改。&lt;/li>
&lt;li>不可变对象：结合私有字段和 &lt;code>final&lt;/code> 修饰符，实现线程安全的不可变对象。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ImmutablePoint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ImmutablePoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 只有 getter，没有 setter&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="性能优化">性能优化
&lt;/h3>&lt;ul>
&lt;li>编译优化：&lt;code>final&lt;/code> 常量在编译时可能被直接替换为字面量（类似宏）。&lt;/li>
&lt;li>JVM 优化：&lt;code>final&lt;/code> 方法可能被内联（Inline）以提高执行效率。&lt;/li>
&lt;/ul>
&lt;h3 id="设计约束">设计约束
&lt;/h3>&lt;ul>
&lt;li>强制规范：通过 &lt;code>final&lt;/code> 限制扩展或修改，明确类的职责（如工具类）。&lt;/li>
&lt;li>防止破坏性继承：避免子类覆盖方法导致父类逻辑失效。&lt;/li>
&lt;/ul>
&lt;h2 id="注意事项">注意事项
&lt;/h2>&lt;h3 id="引用类型变量">引用类型变量
&lt;/h3>&lt;p>&lt;code>final&lt;/code> 只能保证引用不变，但对象内部状态可能被修改（除非对象本身不可变）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 允许修改数组内容&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="final-与不可变对象">final 与不可变对象
&lt;/h3>&lt;p>&lt;code>final&lt;/code> 是实现不可变对象的必要条件，但非充分条件。需结合以下条件：&lt;/p>
&lt;ul>
&lt;li>所有字段用 final 修饰。&lt;/li>
&lt;li>字段为基本类型或不可变对象。&lt;/li>
&lt;li>不对外暴露修改内部状态的方法（如 setter）。&lt;/li>
&lt;/ul>
&lt;h3 id="final-参数">final 参数
&lt;/h3>&lt;p>方法参数可以声明为 &lt;code>final&lt;/code>，防止在方法内被意外修改（增强可读性）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// input = &amp;#34;new value&amp;#34;; // 编译错误&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="强制约束机制">强制约束机制
&lt;/h2>&lt;h3 id="对变量的强制约束">对变量的强制约束
&lt;/h3>&lt;p>&lt;strong>编译阶段检查:&lt;/strong> 编译器会严格检查 final 变量的赋值次数。以下代码会直接编译失败：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 编译错误：Variable &amp;#39;x&amp;#39; might already have been assigned&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>运行时不可修改:&lt;/strong> 即使通过字节码操作（如直接修改 .class 文件），试图改变 final 变量的值也会导致 IllegalAccessError。&lt;/p>
&lt;p>（注：常规开发中无法绕过此限制。）&lt;/p>
&lt;h3 id="对方法的强制约束">对方法的强制约束
&lt;/h3>&lt;p>&lt;strong>子类重写直接报错：&lt;/strong> 如果子类尝试重写父类的 final 方法，编译器会直接拒绝：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Parent&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Child&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Parent&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 编译错误：Cannot override the final method&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="对类的强制约束">对类的强制约束
&lt;/h3>&lt;p>&lt;strong>禁止继承的编译检查：&lt;/strong> 任何尝试继承 final 类的行为都会导致编译错误&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UtilityClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SubClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UtilityClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 编译错误：Cannot inherit from final class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="边界场景">边界场景
&lt;/h2>&lt;h3 id="反射修改-final-字段">反射修改 final 字段
&lt;/h3>&lt;p>&lt;strong>理论上的可能性：&lt;/strong> 通过反射 API（如 Field.setAccessible(true)），可以修改 final 字段的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Field&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 修改 final 字段的值&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出 20（旧版本 Java 可能允许，新版默认禁止）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实际限制：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>从 Java 12 开始，默认禁止通过反射修改 final 字段，会抛出 IllegalAccessException。&lt;/li>
&lt;li>可通过 JVM 参数 &amp;ndash;add-opens java.base/java.lang=ALL-UNNAMED 绕过，但这属于破坏性操作，违背语言设计原则。&lt;/li>
&lt;/ul>
&lt;h3 id="引用类型变量的内部可变性">引用类型变量的内部可变性
&lt;/h3>&lt;p>&lt;strong>final 仅约束引用，不约束对象内容：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Java&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 合法操作：修改对象内部状态&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// list = new ArrayList&amp;lt;&amp;gt;(); // 非法操作：修改引用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时 &lt;code>final&lt;/code> 强制的是引用不可变，但对象本身可能仍可变（除非对象自身设计为不可变，如 &lt;code>String&lt;/code>）。&lt;/p>
&lt;h2 id="final-是强制的">final 是强制的？
&lt;/h2>&lt;h3 id="语言规范定义">语言规范定义
&lt;/h3>&lt;p>Java 语言规范明确要求 &lt;code>final&lt;/code> 的约束必须被遵守，否则代码无法通过编译（&lt;a class="link" href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.12.4" target="_blank" rel="noopener"
>JLS §4.12.4&lt;/a>）。&lt;/p>
&lt;h3 id="编译器和运行时的双重保障">编译器和运行时的双重保障
&lt;/h3>&lt;ul>
&lt;li>编译器：静态检查语法合法性。&lt;/li>
&lt;li>JVM：运行时内存模型保证 &lt;code>final&lt;/code> 字段的初始化安全（如 &lt;code>final&lt;/code> 字段的写入对其他线程可见）。&lt;/li>
&lt;/ul>
&lt;h3 id="设计哲学">设计哲学
&lt;/h3>&lt;p>&lt;code>final&lt;/code> 的强制性是为了保障代码的可靠性和一致性。例如：&lt;/p>
&lt;ul>
&lt;li>不可变对象（String）依赖 &lt;code>final&lt;/code> 的强制约束。&lt;/li>
&lt;li>工具类（如 Math）通过 &lt;code>final&lt;/code> 类禁止继承，确保方法逻辑不被篡改。&lt;/li>
&lt;/ul></description></item><item><title>Spring学习笔记02 - Spring IoC</title><link>https://blog.yellster.top/p/spring-learning-02/</link><pubDate>Sun, 17 Mar 2024 14:44:31 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/spring-learning-02/</guid><description>&lt;h2 id="什么是-spring-ioc">什么是 Spring IoC?
&lt;/h2>&lt;p>Spring IoC（Inversion of Control，控制反转）是 Spring 框架的核心机制，其核心思想是将对象的创建、依赖管理和生命周期交给容器统一控制，而非由开发者手动通过 new 创建对象。&lt;/p>
&lt;p>通过 IoC，代码的耦合度降低，程序的灵活性和可维护性显著提高。&lt;/p>
&lt;p>&lt;em>例如，如果一个用户服务需要数据库连接，容器会确保数据库连接被正确注入，而无需手动创建。&lt;/em>&lt;/p>
&lt;ul>
&lt;li>负责管理对象的生命周期和依赖关系。&lt;/li>
&lt;li>它通过依赖注入（Dependency Injection, DI）来实例化、配置和组装被称为“bean”的对象。&lt;/li>
&lt;li>配置元数据可以是 XML、Java 注解或 Java 代码，增强了系统的模块化和灵活性.&lt;/li>
&lt;/ul>
&lt;h2 id="依赖查找">依赖查找
&lt;/h2>&lt;h3 id="价值">价值
&lt;/h3>&lt;ul>
&lt;li>灵活应对运行时需求：有些依赖需要根据实时条件获取，比如按不同场景或配置，动态选择不同实现，这时直接注入一个固定 bean 可能不够灵活，需要主动查找。&lt;/li>
&lt;li>工具或框架类的特殊需求：一些工具类或公共组件并不便于被注入到特定对象中，反而使用依赖查找更符合设计。比如在某些自定义 Starter 或底层框架中，可能会在初始化流程中需要访问容器本身。&lt;/li>
&lt;li>在特定场景临时获取 bean：有时你需要延迟获取某些依赖，或想在调用时才加载/初始化（如懒加载），这时依赖查找也比提前注入更合适。&lt;/li>
&lt;/ul>
&lt;h3 id="实现">实现
&lt;/h3>&lt;h4 id="通过beanfactory基础接口">通过 &lt;code>BeanFactory&lt;/code> 基础接口
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. 创建容器&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">BeanFactory&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">XmlBeanFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ClassPathResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;applicationContext.xml&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 2. 查找 Bean（按名称）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 3. 按类型查找（Spring 5+）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 4. 按注解查找&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBeansWithAnnotation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>最原始的 IoC 容器接口&lt;/li>
&lt;li>需要手动处理类型转换&lt;/li>
&lt;li>适用于简单场景（现代项目更常用 &lt;code>ApplicationContext&lt;/code>）&lt;/li>
&lt;/ul>
&lt;h4 id="通过-applicationcontext-接口">通过 &lt;code>ApplicationContext&lt;/code> 接口
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. 初始化容器（XML 配置）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">ApplicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ClassPathXmlApplicationContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;applicationContext.xml&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 2. 按名称查找&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 3. 按类型查找（推荐）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 4. 按名称+类型查找（无需强制转换）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>企业级容器接口，支持事件、国际化等扩展功能&lt;/li>
&lt;li>推荐使用 &lt;code>getBean(Class&amp;lt;T&amp;gt;)&lt;/code> 避免类型转换错误&lt;/li>
&lt;/ul>
&lt;h4 id="通过-objectprovider延迟可选依赖查找">通过 &lt;code>ObjectProvider&lt;/code>（延迟/可选依赖查找）
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 注入 ObjectProvider（Spring 4.3+）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ObjectProvider&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userServiceProvider&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 延迟获取 Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userServiceProvider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getIfAvailable&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 处理多个候选 Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userServiceProvider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getIfUnique&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 显式指定条件（如通过 @Qualifier 的变体）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userServiceProvider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getObject&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>支持延迟加载和可选依赖&lt;/li>
&lt;li>解决 &lt;code>NoUniqueBeanDefinitionException&lt;/code> 问题&lt;/li>
&lt;li>结合 &lt;code>@Lazy&lt;/code> 注解可实现懒加载&lt;/li>
&lt;/ul>
&lt;h4 id="通过-autowired--applicationcontextaware">通过 &lt;code>@Autowired&lt;/code> + &lt;code>ApplicationContextAware&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Component&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyBean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ApplicationContextAware&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ApplicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setApplicationContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ApplicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将容器上下文注入到 Bean 中&lt;/li>
&lt;li>适用于需要动态查找的场景&lt;/li>
&lt;/ul>
&lt;h4 id="通过注解扫描基于-componentscan">通过注解扫描（基于 &lt;code>@ComponentScan&lt;/code>）
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Configuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@ComponentScan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;com.example&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">AppConfig&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 初始化容器&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">ApplicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AnnotationConfigApplicationContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppConfig&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 查找带有 @Component 的 Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>结合组件扫描自动注册 Bean&lt;/li>
&lt;li>隐式依赖查找的基础&lt;/li>
&lt;/ul>
&lt;h4 id="通过-jndi-查找传统方式">通过 JNDI 查找（传统方式）
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在 Spring XML 配置中声明 JNDI 资源&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jee&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">jndi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">lookup&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;dataSource&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">jndi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;java:comp/env/jdbc/mydb&amp;#34;&lt;/span>&lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 通过容器查找&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dataSource&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dataSource&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>适用于 Java EE 环境整合&lt;/li>
&lt;li>现代项目更多使用 &lt;code>@Bean&lt;/code> 配置数据源&lt;/li>
&lt;/ul>
&lt;h4 id="通过静态方法web-环境专用">通过静态方法（Web 环境专用）
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取 WebApplicationContext（如 Servlet 环境）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">WebApplicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">WebApplicationContextUtils&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getWebApplicationContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">servletContext&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 查找 Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="对比">对比
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方式&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>BeanFactory&lt;/code>&lt;/td>
&lt;td>简单容器操作&lt;/td>
&lt;td>轻量级&lt;/td>
&lt;td>功能有限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ApplicationContext&lt;/code>&lt;/td>
&lt;td>企业级应用（主流选择）&lt;/td>
&lt;td>功能全面&lt;/td>
&lt;td>稍重&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ObjectProvider&lt;/code>&lt;/td>
&lt;td>处理延迟/可选依赖&lt;/td>
&lt;td>解决多候选 Bean 问题&lt;/td>
&lt;td>需要 Spring 4.3+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>@Autowired&lt;/code> + 上下文&lt;/td>
&lt;td>动态查找场景&lt;/td>
&lt;td>灵活&lt;/td>
&lt;td>侵入性强&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>注解扫描&lt;/td>
&lt;td>自动装配的基础&lt;/td>
&lt;td>简化配置&lt;/td>
&lt;td>需配合组件扫描&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>推荐实践&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>优先使用依赖注入（被动获取）&lt;/li>
&lt;li>仅在需要动态获取时使用依赖查找（如工厂模式、插件化架构）&lt;/li>
&lt;li>现代项目首选 &lt;code>ApplicationContext.getBean()&lt;/code> 或 &lt;code>ObjectProvider&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="依赖注入">依赖注入
&lt;/h2>&lt;p>依赖注入（Dependency Inject, DI）是 Spring 框架的核心功能，体现了控制反转（IoC）的设计原则。通过 DI，Spring IoC 容器负责创建和管理 bean 的依赖，并将这些依赖注入到目标 bean 中。注入方式包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>构造函数注入&lt;/strong>：通过构造函数传递依赖。
&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>使用 final 关键字，不可变，对象创建后，依赖不可变&lt;/li>
&lt;li>依赖关系明确，显著降低了组件之间的耦合性，使代码更易于测试和维护。&lt;/li>
&lt;li>易于测试，可以直接传递模拟依赖&lt;/li>
&lt;li>Spring 会在启动时确保所有依赖都已注入，避免运行时空指针异常&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>如果依赖多，构造函数可能过长&lt;/li>
&lt;li>缺乏灵活性，创建后无法更改依赖&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>setter 注入&lt;/strong>：通过 setter 方法设置依赖。
&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>灵活，可在对象创建后设置或更改依赖&lt;/li>
&lt;li>适合可选依赖，可能不总是需要的&lt;/li>
&lt;li>易于扩展，如果后期需要添加新依赖，只需添加新的 setter 方法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>对象可变，可能导致状态不一致&lt;/li>
&lt;li>未设置依赖，导致空指针异常&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>字段注入&lt;/strong>：通过注解（如 @Autowired）直接在字段上注入依赖，Spring 会使用反射机制在对象创建后自动设置字段的值。
&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>代码简洁，无需编写 setter 或构造函数&lt;/li>
&lt;li>使用简单，易于实现&lt;/li>
&lt;li>Spring 会在启动时确保依赖注入，减少手动配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>与 Spring 框架紧密耦合，增加依赖&lt;/li>
&lt;li>依赖关系不显眼，测试可能更复杂&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyDependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 构造函数注入&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">MyService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyDependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">dependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyDependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Setter 注入&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setDependency&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyDependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">dependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 字段注入&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyDependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="依赖来源">依赖来源
&lt;/h2>&lt;p>&lt;strong>依赖对象的来源&lt;/strong>主要就是 Spring IoC 容器（&lt;code>BeanFactory&lt;/code> 或 &lt;code>ApplicationContext&lt;/code>）本身。容器根据 XML、注解、Java Config 等方式加载 bean 定义并实例化这些对象，管理它们的生命周期，然后通过依赖注入或依赖查找将它们提供给应用使用。&lt;/p>
&lt;ul>
&lt;li>自定义 Bean
&lt;ul>
&lt;li>自己编写并交给 Spring 管理的类，比如带有 &lt;code>@Component&lt;/code>、&lt;code>@Service&lt;/code>、&lt;code>@Repository&lt;/code>、&lt;code>@Controller&lt;/code> 等注解的类，或者在 XML/JavaConfig 中显式声明的 Bean。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>容器内建的 Bean
&lt;ul>
&lt;li>Spring 容器在启动或运行过程中，会自动创建并维护一些基础设施类或辅助功能类，供框架内部或用户使用&lt;/li>
&lt;li>比如 &lt;code>ApplicationContext&lt;/code> 自身、&lt;code>Environment&lt;/code>、&lt;code>ResourceLoader&lt;/code>、&lt;code>ConversionService&lt;/code>、&lt;code>MessageSource&lt;/code>、&lt;code>BeanFactoryPostProcessor&lt;/code>、&lt;code>BeanPostProcessor&lt;/code> 以及各种内部用来处理注解、AOP、事务等功能的 Bean&lt;/li>
&lt;li>&lt;code>Environment environment = applicationContext.getBean(Environment.class);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>容器内建的依赖，（依赖注入）
&lt;ul>
&lt;li>指的是那些不一定以 Bean 形式出现，但由容器提供、可被注入或查找的依赖。例如：&lt;/li>
&lt;li>&lt;code>BeanFactory&lt;/code> / &lt;code>ApplicationContext&lt;/code>：在使用 &lt;code>@Autowired&lt;/code> 时可以直接注入 &lt;code>ApplicationContext&lt;/code>；&lt;/li>
&lt;li>环境变量、配置属性：通过 &lt;code>@Value(&amp;quot;${property}&amp;quot;)&lt;/code> 或 &lt;code>Environment&lt;/code> 对象获取；&lt;/li>
&lt;li>事件发布器（&lt;code>ApplicationEventPublisher&lt;/code>）、任务调度器（&lt;code>TaskScheduler&lt;/code>）等容器级别的基础依赖。&lt;/li>
&lt;li>这些依赖在某些情况下也会以 Bean 的形式出现，但总体上它们属于 Spring 内部或与运行环境强相关的内容，是容器层面“提供”的依赖。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="元信息">元信息
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Bean 的标识&lt;/strong>
&lt;ul>
&lt;li>包括 Bean 名称（&lt;code>id&lt;/code> 或 &lt;code>name&lt;/code>）、Bean 所对应的类名、别名等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Bean 的作用域（Scope）&lt;/strong>
&lt;ul>
&lt;li>常见的有 &lt;code>singleton&lt;/code>、&lt;code>prototype&lt;/code>、&lt;code>request&lt;/code>、&lt;code>session&lt;/code> 等。&lt;/li>
&lt;li>用于决定容器如何缓存或创建 Bean 实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>依赖注入信息&lt;/strong>
&lt;ul>
&lt;li>包括构造器参数、Setter 方法注入、字段注入等。&lt;/li>
&lt;li>哪些依赖是必须的？哪些是可选的？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>生命周期回调（Lifecycle callbacks）&lt;/strong>：
&lt;ul>
&lt;li>初始化方法（&lt;code>init-method&lt;/code> 或 &lt;code>@PostConstruct&lt;/code>）、&lt;/li>
&lt;li>销毁方法（&lt;code>destroy-method&lt;/code> 或 &lt;code>@PreDestroy&lt;/code>）等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>条件或环境&lt;/strong>：
&lt;ul>
&lt;li>比如 &lt;code>@Conditional&lt;/code> 注解可以决定是否加载某个 Bean；&lt;/li>
&lt;li>或者 &lt;code>@Profile&lt;/code> 控制在特定环境（dev, test, prod）下是否启用某些 Bean。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他配置&lt;/strong>：
&lt;ul>
&lt;li>是否使用 AOP、事务等功能；&lt;/li>
&lt;li>是否启用延迟加载（lazy-init）；&lt;/li>
&lt;li>是否是自动装配（autowire），等等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="配置元信息">配置元信息
&lt;/h3>&lt;ul>
&lt;li>Bean 定义配置
&lt;ul>
&lt;li>基于 XML 文件&lt;/li>
&lt;li>基于 Properties 文件&lt;/li>
&lt;li>基于 Java 注解&lt;/li>
&lt;li>基于 Java API&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IoC 容器配置
&lt;ul>
&lt;li>基于 XML 文件&lt;/li>
&lt;li>基于 Java 注解&lt;/li>
&lt;li>基于 Java API&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>外部化属性配置
&lt;ul>
&lt;li>基于 Java 注解，@Value&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="autowired-和-resource-的区别">@Autowired 和 @Resource 的区别
&lt;/h2>&lt;h3 id="注入机制">注入机制
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>@Autowired&lt;/strong> 是基于类型的注入。
&lt;ul>
&lt;li>它会查找与字段或参数类型匹配的 bean。例如，如果一个字段是 MyDependency 类型，Spring 会注入所有实现 MyDependency 接口的 bean。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>@Resource&lt;/strong> 是基于名称的注入。
&lt;ul>
&lt;li>它会根据字段名称或显式指定的名称查找 bean。例如，如果字段名为 dependency，它会查找名为 &amp;ldquo;dependency&amp;rdquo; 的 bean。&lt;/li>
&lt;li>@Resource 还可以用于注入资源（如 DataSource），而不仅仅是 bean，这在某些复杂场景下可能更灵活。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="是否必需">是否必需
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>@Autowired&lt;/strong> 默认是必需的。如果找不到匹配的 bean，Spring 会抛出异常。但你可以通过 required = false使它可选。&lt;/li>
&lt;li>&lt;strong>@Resource&lt;/strong> 默认是可选的。如果找不到匹配的 bean，字段会保持为 null，无需额外配置。&lt;/li>
&lt;/ul>
&lt;h3 id="标准与框架">标准与框架
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>@Autowired&lt;/strong> 是 Spring 框架专有的注解，适合深度集成 Spring 的项目。&lt;/li>
&lt;li>&lt;strong>@Resource&lt;/strong> 是 Java 标准的一部分（JSR-250），在 Java EE 环境中也常用，适合希望减少框架依赖的项目。&lt;/li>
&lt;/ul>
&lt;h3 id="使用场景">使用场景
&lt;/h3>&lt;ul>
&lt;li>如果你需要基于类型的注入，且依赖是必需的，推荐使用 @Autowired。例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyDependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 注入类型为 MyDependency 的 bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果你需要基于名称的注入，或依赖是可选的，推荐使用 @Resource。例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;specificDependency&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyDependency&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 注入名为 &amp;#34;specificDependency&amp;#34; 的 bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Spring学习笔记01 - Spring Framework</title><link>https://blog.yellster.top/p/spring-learning-01/</link><pubDate>Sun, 10 Mar 2024 19:49:27 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/spring-learning-01/</guid><description>&lt;blockquote>
&lt;p>&lt;blockquote>
&lt;/blockquote>
&lt;p>Spring Framework 为基于 Java 的现代企业应用程序提供了一个全面的编程和配置模型，适用于任何类型的部署平台。&lt;/p>
&lt;p>Spring 的一个关键要素是应用层面的基础架构支持：Spring 专注于企业应用程序的 “管道”，因此团队可以专注于应用程序级的业务逻辑，而无需与特定部署环境进行不必要的绑定。&lt;/p>
&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>Spring Framework, &lt;/span>&lt;a href="#ZgotmplZ">&lt;cite>spring.io&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>
&lt;h2 id="spring-framework-有哪些核心模块">Spring Framework 有哪些核心模块?
&lt;/h2>&lt;ul>
&lt;li>spring-core
&lt;ul>
&lt;li>Spring 基础的API模块，如资源管理、泛型处理&lt;/li>
&lt;li>提供框架的基本工具类和核心工具，如依赖注入（DI）的实现、IoC 容器的基本功能等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-beans
&lt;ul>
&lt;li>用于管理和配置应用程序中的 bean，Bean对象的创建、生命周期管理，依赖查找、依赖注入&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>sprign-context
&lt;ul>
&lt;li>事件驱动、注解驱动、模块驱动等&lt;/li>
&lt;li>建立在 Core 和 Beans 之上，提供类似于 JNDI 的功能，以及国际化、事件传播、资源加载等功能。它类似于一个轻量级的容器，便于集成不同的框架。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-expression
&lt;ul>
&lt;li>Spring 表达式 语言模块&lt;/li>
&lt;li>提供强大的表达式语言支持，可以在 XML 或注解中动态计算值，增强了配置和动态功能的灵活性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-aop
&lt;ul>
&lt;li>Spring AOP 处理，如动态代理、AOP字节码提升&lt;/li>
&lt;li>实现面向切面编程的支持，通过切面（Aspect）来定义横切关注点，如日志、安全、事务等，从而实现与业务逻辑的分离。这一模块使得应用程序能够在不修改核心业务代码的情况下添加额外的行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-jdbc
&lt;ul>
&lt;li>封装了 JDBC 操作，提供了模板化方法来简化数据库访问和异常处理，减少了样板代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-orm
&lt;ul>
&lt;li>为主流 ORM 框架（如 Hibernate、JPA、MyBatis 等）提供支持，简化数据持久化操作的配置和集成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-tx
&lt;ul>
&lt;li>提供声明式事务管理，帮助开发者在不同的数据访问技术之间保持一致的事务管理策略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-web
&lt;ul>
&lt;li>为开发 web 应用提供基本的支持，包括 WebSocket、Multipart 文件上传、以及 HTTP 请求和响应处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-webmvc
&lt;ul>
&lt;li>实现了 Model-View-Controller (MVC) 设计模式，提供了一整套用于构建基于请求-响应模型的 Web 应用程序的组件。通过该模块，可以轻松构建松耦合、可测试的 Web 应用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spring-test
&lt;ul>
&lt;li>提供对 Spring 应用的单元测试和集成测试的支持，包括对 JUnit 和 TestNG 的集成，帮助开发者在不依赖外部服务器的情况下模拟和测试应用的行为，确保代码质量和稳定性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="优势">优势
&lt;/h2>&lt;ul>
&lt;li>模块化和灵活性：Spring 允许开发者选择需要的组件，支持 XML 和基于注解的配置，适合各种项目需求。&lt;/li>
&lt;li>轻量级和便携性：无需繁重的应用服务器，可以在像 Tomcat 这样的 servlet 容器上运行，降低资源占用。&lt;/li>
&lt;li>依赖注入和控制反转（IoC）：促进组件松耦合，易于测试和扩展。&lt;/li>
&lt;li>面向切面编程（AOP）：模块化横切关注点，如日志、安全和事务管理，提升代码复用性。&lt;/li>
&lt;li>丰富的生态系统：提供数据访问、Web 服务、安全等多个模块，满足企业级应用需求。&lt;/li>
&lt;li>易于测试：依赖注入功能简化测试数据注入，确保应用可靠性。&lt;/li>
&lt;li>一致的 API：为异常处理、事务管理等提供统一接口，简化开发。&lt;/li>
&lt;li>长期维护和可靠性：Spring 历史悠久，持续更新，适合长期项目。&lt;/li>
&lt;/ul>
&lt;h2 id="不足">不足
&lt;/h2>&lt;ul>
&lt;li>学习曲线陡峭：对于新手或不熟悉 DI 和 AOP 的开发者，学习成本较高。&lt;/li>
&lt;li>复杂性：功能丰富可能导致项目复杂，尤其对小型项目不必要。&lt;/li>
&lt;li>配置冗长：尽管注解减少了 XML 配置，但某些设置仍可能繁琐。&lt;/li>
&lt;li>安全问题：Spring 提供安全特性，但配置不当可能导致如跨站脚本攻击（XSS）等漏洞，需额外注意。&lt;/li>
&lt;li>性能开销：抽象层可能引入轻微性能开销，但通常对大多数用例影响不大。&lt;/li>
&lt;/ul></description></item><item><title>为什么 String 会设计成不可变？</title><link>https://blog.yellster.top/p/java-string-immutable/</link><pubDate>Sun, 21 Jan 2024 16:15:09 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/java-string-immutable/</guid><description>&lt;p>在 Java 中，&lt;strong>字符串（&lt;code>String&lt;/code>）被设计成不可变对象&lt;/strong>，这是语言设计中的一个重要决策。这种设计的核心原因是为了&lt;strong>安全性、性能优化和简化程序逻辑&lt;/strong>。以下是具体原因和解释：&lt;/p>
&lt;h2 id="不可变性的定义">不可变性的定义
&lt;/h2>&lt;p>不可变对象（Immutable Object）是指&lt;strong>对象的状态在创建后不能被修改&lt;/strong>。对于 &lt;code>String&lt;/code> 来说：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>任何对字符串内容的修改（如拼接、替换）都会生成&lt;strong>新的字符串对象&lt;/strong>，原对象保持不变。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 生成新对象 &amp;#34;hello world&amp;#34;，s1 仍是 &amp;#34;hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="为什么-string-要设计成不可变">为什么 &lt;code>String&lt;/code> 要设计成不可变？
&lt;/h2>&lt;h3 id="线程安全性">&lt;strong>线程安全性&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>不可变对象天然线程安全&lt;/strong>。多个线程可以共享同一个字符串对象，无需担心数据被意外修改，从而&lt;strong>避免同步开销&lt;/strong>。&lt;/li>
&lt;li>如果 &lt;code>String&lt;/code> 可变，在多线程环境中必须通过同步机制（如 &lt;code>synchronized&lt;/code>）保证一致性，性能会显著下降。&lt;/li>
&lt;/ul>
&lt;h3 id="哈希码缓存hash-caching">&lt;strong>哈希码缓存（Hash Caching）&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>String&lt;/code> 是 &lt;code>HashMap&lt;/code>、&lt;code>HashSet&lt;/code> 等集合的常用键（Key）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不可变性保证字符串的&lt;strong>哈希码（&lt;code>hashCode()&lt;/code>）在创建时即可计算并缓存&lt;/strong>，后续使用直接复用，无需重复计算。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 计算一次后缓存，后续直接使用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果 &lt;code>String&lt;/code> 可变，修改内容会导致哈希码变化，破坏哈希表的正确性（例如键的哈希码改变后无法找到原值）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="字符串常量池优化">&lt;strong>字符串常量池优化&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>JVM 通过&lt;strong>字符串常量池（String Pool）&lt;/strong> 复用字符串，减少内存开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果 &lt;code>String&lt;/code> 可变，常量池中的字符串可能被意外修改，导致其他引用该字符串的代码出错。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 放入常量池&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 复用常量池中的 &amp;#34;hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 若 s1 被修改为 &amp;#34;hi&amp;#34;，s2 也会被影响（但实际不可变，所以安全）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="安全性">&lt;strong>安全性&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>字符串常用于&lt;strong>敏感操作&lt;/strong>（如文件路径、数据库连接、网络请求、类加载等）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不可变性防止恶意代码篡改字符串内容。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 假设 String 可变，攻击者可能修改路径指向恶意文件&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">filePath&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;/safe/path/config.txt&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 如果 filePath 被修改为 &amp;#34;/hack/path&amp;#34;，程序会读取错误文件&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="类加载机制">&lt;strong>类加载机制&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>JVM 使用字符串表示&lt;strong>类名、方法名、包名&lt;/strong>等元数据。&lt;/li>
&lt;li>如果类名（字符串）被修改，可能导致加载错误的类，破坏程序逻辑。&lt;/li>
&lt;/ul>
&lt;h3 id="设计哲学与性能权衡">&lt;strong>设计哲学与性能权衡&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>不可变设计简化了字符串的实现和优化。例如：
&lt;ul>
&lt;li>&lt;strong>子字符串（&lt;code>substring()&lt;/code>）&lt;/strong> 可以安全地共享原始字符数组（仅调整偏移量），无需复制数据。&lt;/li>
&lt;li>&lt;strong>编译器和 JVM 的优化&lt;/strong>（如常量折叠、内联优化）依赖不可变性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>尽管字符串不可变会在频繁修改时产生性能问题（如大量拼接操作），但 Java 提供了 &lt;code>StringBuilder&lt;/code> 和 &lt;code>StringBuffer&lt;/code> 作为补充，平衡灵活性与效率。&lt;/li>
&lt;/ul>
&lt;h2 id="如何实现不可变性">如何实现不可变性？
&lt;/h2>&lt;p>Java 通过以下机制保证 &lt;code>String&lt;/code> 不可变：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>类声明为 &lt;code>final&lt;/code>&lt;/strong>：禁止通过继承覆盖方法。&lt;/li>
&lt;li>&lt;strong>内部字符数组 &lt;code>private final char[] value&lt;/code>&lt;/strong>：外部无法直接访问或修改，且没有实现 &lt;code>setter&lt;/code> 方法。&lt;/li>
&lt;li>&lt;strong>所有修改操作返回新对象&lt;/strong>：如 &lt;code>concat()&lt;/code>、&lt;code>replace()&lt;/code> 等。&lt;/li>
&lt;/ol>
&lt;h2 id="不可变性的核心优势">不可变性的核心优势
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>优势&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>线程安全&lt;/strong>&lt;/td>
&lt;td>无需同步，天然支持多线程共享。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>哈希码缓存&lt;/strong>&lt;/td>
&lt;td>提升哈希表性能，避免重复计算。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>字符串常量池&lt;/strong>&lt;/td>
&lt;td>减少内存占用，复用相同字符串。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>安全性&lt;/strong>&lt;/td>
&lt;td>防止敏感数据被篡改。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>简化优化&lt;/strong>&lt;/td>
&lt;td>编译器、JVM 可基于不可变性进行深度优化（如常量折叠、子字符串共享）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="示例不可变性的实际影响">示例：不可变性的实际影响
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34; world&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 生成新对象 &amp;#34;hello world&amp;#34;，s1 指向新对象，s2 仍指向 &amp;#34;hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 如果 String 可变，s2 的内容会被修改，但实际不可变，s2 保持原值&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// &amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// &amp;#34;hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="常见疑问">常见疑问
&lt;/h2>&lt;h3 id="不可变是否导致性能问题">不可变是否导致性能问题？
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>是&lt;/strong>，但 Java 提供了 &lt;code>StringBuilder&lt;/code>（非线程安全）和 &lt;code>StringBuffer&lt;/code>（线程安全）来优化频繁修改字符串的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：循环拼接字符串时，优先使用 &lt;code>StringBuilder&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 避免生成大量中间对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="为什么其他语言如-python的字符串也是不可变的">为什么其他语言（如 Python）的字符串也是不可变的？
&lt;/h3>&lt;ul>
&lt;li>出于类似的理由：安全性、性能优化（如驻留机制）和简化语言设计。&lt;/li>
&lt;/ul>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>Java 将 &lt;code>String&lt;/code> 设计为不可变，是为了在&lt;strong>安全性、性能、并发性&lt;/strong>之间取得平衡。&lt;/p>
&lt;p>这种设计虽然牺牲了部分灵活性，但通过配套工具类（如 &lt;code>StringBuilder&lt;/code>）弥补了这一缺陷，成为 Java 生态稳定高效的重要基石。&lt;/p></description></item><item><title>如何理解Java的 “一次编写，到处运行”</title><link>https://blog.yellster.top/p/write-once-run-anywhere/</link><pubDate>Sat, 20 Jan 2024 15:35:28 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/write-once-run-anywhere/</guid><description>&lt;h2 id="write-once-run-anywhere">Write once, run anywhere
&lt;/h2>&lt;p>&lt;code>“一次编写，到处运行”&lt;/code>说的是Java语言跨平台的特性，Java的跨平台特性与Java虚拟机的存在密不可分，可在不同的环境中运行。比如说Windows平台和Linux平台都有相应的JDK，安装好JDK后也就有了Java语言的运行环境。其实Java语言本身与其他的编程语言没有特别大的差异，并不是说Java语言可以跨平台，而是在不同的平台都有可以让Java语言运行的环境而已，所以才有了Java一次编写，到处运行这样的效果。&lt;/p>
&lt;p>严格的讲，跨平台的语言不止Java一种，但Java是较为成熟的一种。&lt;code>“一次编写，到处运行”&lt;/code>这种效果跟编译器有关。编程语言的处理需要编译器和解释器。Java虚拟机和DOS类似，相当于一个供程序运行的平台。&lt;/p>
&lt;p>程序从源代码到运行的三个阶段：编码——编译——运行——调试。Java在编译阶段则体现了跨平台的特点。编译过程大概是这样的：首先是将Java源代码转化成&lt;code>.CLASS&lt;/code>文件字节码，这是第一次编译。 &lt;code>.class&lt;/code> 文件就是可以到处运行的文件。然后Java字节码会被转化为目标机器代码，这是是由JVM来执行的，即Java的第二次编译。&lt;/p>
&lt;p>“到处运行”的关键和前提就是JVM。因为在第二次编译中JVM起着关键作用。在可以运行Java虚拟机的地方都内含着一个JVM操作系统。从而使JAVA提供了各种不同平台上的虚拟机制，因此实现了“到处运行”的效果。需要强调的一点是，java并不是编译机制，而是解释机制。Java字节码的设计充分考虑了JIT这一即时编译方式，可以将字节码直接转化成高性能的本地机器码，这同样是虚拟机的一个构成部分。&lt;/p>
&lt;h2 id="java-是解释运行吗">Java 是解释运行吗？
&lt;/h2>&lt;p>&lt;em>&lt;strong>答案是 不是&lt;/strong>&lt;/em>&lt;/p>
&lt;h3 id="java-是如何编译的">Java 是如何编译的？
&lt;/h3>&lt;ol>
&lt;li>编译阶段：
&lt;ol>
&lt;li>Java源代码（&lt;code>.java&lt;/code>）通过&lt;code>javac编译器&lt;/code> &lt;strong>提前编译&lt;/strong> 为平台无关的字节码（&lt;code>.class&lt;/code>）&lt;/li>
&lt;li>这一步是传统的AOT（Ahead-Of-Time, 预先编译，编译在程序运行前完成）编译，生成中间代码而非机器码&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>运行时阶段：
&lt;ol>
&lt;li>&lt;strong>解释执行：&lt;/strong> JVM（如HotSpot）首先逐行解释执行字节码（&lt;code>.class&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>JIT编译：&lt;/strong> （Just in time，即时编译）对于频繁执行的代码（热点代码，方法级代码），JVM触发JIT编译器（如C1/C2）将其编译为本地机器码，大幅提升性能，属于运行时动态优化。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Iptables</title><link>https://blog.yellster.top/p/iptables/</link><pubDate>Thu, 28 Dec 2023 21:15:49 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/iptables/</guid><description>&lt;img src="https://blog.yellster.top/p/iptables/iptables.webp" alt="Featured image of post Iptables" />&lt;h2 id="iptables-是什么">&lt;strong>iptables 是什么&lt;/strong>
&lt;/h2>&lt;p>iptables 是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的处理和转发。iptables只支持处理ipv4数据包，对于ipv6数据包，则需要ip6tables。&lt;/p>
&lt;h2 id="iptables命令介绍">&lt;strong>iptables命令介绍&lt;/strong>
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># iptables --help&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iptables v1.4.21
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Usage: iptables -&lt;span class="o">[&lt;/span>ACD&lt;span class="o">]&lt;/span> chain rule-specification &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -I chain &lt;span class="o">[&lt;/span>rulenum&lt;span class="o">]&lt;/span> rule-specification &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -R chain rulenum rule-specification &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -D chain rulenum &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -&lt;span class="o">[&lt;/span>LS&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>chain &lt;span class="o">[&lt;/span>rulenum&lt;span class="o">]]&lt;/span> &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -&lt;span class="o">[&lt;/span>FZ&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>chain&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -&lt;span class="o">[&lt;/span>NX&lt;span class="o">]&lt;/span> chain
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -E old-chain-name new-chain-name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -P chain target &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -h &lt;span class="o">(&lt;/span>print this &lt;span class="nb">help&lt;/span> information&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="iptables基本命令">&lt;strong>iptables基本命令&lt;/strong>
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--append -A chain 添加一个规则到链的末尾
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--check -C chain 检查某一条链是否存在
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--delete -D chain 删除匹配的链
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--delete -D chain rulenum 删除指定链的某一条规则
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--insert -I chain &lt;span class="o">[&lt;/span>rulenum&lt;span class="o">]&lt;/span> 根据给出的规则序号向所选链中插入一条或更多规则。所以，如果规则序号为1，
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 规则会被插入链的头部。这也是不指定规则序号时的默认方式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--replace -R chain rulenum 修改指定链中的某一条规则
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--list -L &lt;span class="o">[&lt;/span>chain &lt;span class="o">[&lt;/span>rulenum&lt;span class="o">]]&lt;/span> 列出指定链中的规则
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--list-rules -S &lt;span class="o">[&lt;/span>chain &lt;span class="o">[&lt;/span>rulenum&lt;span class="o">]]&lt;/span> 打印出指定链中的规则
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--flush -F &lt;span class="o">[&lt;/span>chain&lt;span class="o">]&lt;/span> 删除指定链中的规则
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--zero -Z &lt;span class="o">[&lt;/span>chain &lt;span class="o">[&lt;/span>rulenum&lt;span class="o">]]&lt;/span> 把指定链，或者表中的所有链上的所有计数器清零
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--new -N chain 创建一条用户自定义链
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--delete-chain -X &lt;span class="o">[&lt;/span>chain&lt;span class="o">]&lt;/span> 删除一条用户自定义链
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--policy -P chain target 该表某条链的策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--rename-chain -E old-chain new-chain 修改链的名称&lt;span class="o">(&lt;/span>只有用户自定义链的名称可以被修改）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="iptables选项参数">&lt;strong>iptables选项参数&lt;/strong>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> --protocol -p proto 规则或者包检查的协议。指定协议可以是tcp、udp、icmp中的一个或全部，也可以是数值，代表这些协议中的某一个。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 当然也可以使用在/etc/protocols中定义的协议名。在协议名前加&lt;span class="s1">&amp;#39;!&amp;#39;&lt;/span>表示相反的规则。数字0相当于all。Protocol
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> all会匹配所有协议，而且这是缺省的选项。在和check命令结合时，all可以不被使用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> --source -s address&lt;span class="o">[&lt;/span>/mask&lt;span class="o">][&lt;/span>...&lt;span class="o">]&lt;/span> 指定源地址，可以是主机名、网络名或IP地址。mask说明可以是网络掩码或清楚的数字。标志--src是这个选项的简写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> --destination -d address&lt;span class="o">[&lt;/span>/mask&lt;span class="o">][&lt;/span>...&lt;span class="o">]&lt;/span> 指定目标地址。标志--dst是这个选项的简写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--jump -j target 执行指定的动作
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--goto -g chain 跳转到指定的链
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--match -m match 扩展匹配
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--numeric -n 以数字的形式显示IP地址和端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> --in-interface -i input name&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> 匹配由指定网络接口进入的数据包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> --out-interface -o output name&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> 由指定接口发出的数据包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> --fragment -f 这意味着在分片的包中，规则只询问第二及以后的片
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--exact -x 扩展数字。显示包和字节计数器的精确值，代替用K、M、G表示的约数。这个选项仅能用于-L选项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--line-numbers 当列表显示规则时，在每个规则前面加上行号，与该规则在链中的位置相对应。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="1-针对-tcp-的扩展">&lt;strong>1. 针对 tcp 的扩展&lt;/strong>
&lt;/h4>&lt;p>当 &lt;code>--protocol tcp&lt;/code>被指定，且其他匹配的扩展未被指定时，这些扩展被装载。它提供以下选项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--source-port &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>port&lt;span class="o">[&lt;/span>:port&lt;span class="o">]]&lt;/span> 源端口或端口范围指定，也可以使用服务名或端口号。如果使用端口范围，若首端口号忽略则默认为0，若尾端口号忽略则
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 默认为65535。这个选项可以简写为--sport
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--destionation-port &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>port:&lt;span class="o">[&lt;/span>port&lt;span class="o">]]&lt;/span> 目标端口或端口范围指定。这个选项可以使用--dport别名来代替
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--tcp-flags &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> mask comp 匹配指定的TCP标记。第一个参数是我们要检查的标记，一个用逗号分开的列表，第二个参数是用逗号分开的标记表,是必须
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 被设置的。标记如下：SYN ACK FIN RST URG PSH ALL NONE。例如我们有如下这条命令：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iptables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST SYN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 上面这条命令只匹配那些SYN标志被设置而ACK、FIN和RST标记没有被设置的包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> --syn 只匹配那些设置了SYN位而清除了ACK和FIN位的TCP包。这些包用于TCP连接初始化时发出请求。例如，大量的这种包进入一个
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 接口发生堵塞时会阻止进入的TCP连接，而出去的TCP连接不会受到影响。这等于：--tcp-flags SYN,RST,ACK SYN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--tcp-option &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> number 匹配设置了TCP选项的数据包
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="2-针对-udp-的扩展">&lt;strong>2. 针对 udp 的扩展&lt;/strong>
&lt;/h4>&lt;p>当 &lt;code>--protocol udp&lt;/code>被指定，且其他匹配的扩展未被指定时，这些扩展被装载。它提供以下选项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--source-port &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>port:&lt;span class="o">[&lt;/span>port&lt;span class="o">]]&lt;/span> 源端口或端口范围指定
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--destionation-port &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>port:&lt;span class="o">[&lt;/span>port&lt;span class="o">]]&lt;/span> 目标端口或端口范围指定
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="3-针对-icmp-的扩展">&lt;strong>3. 针对 ICMP 的扩展&lt;/strong>
&lt;/h4>&lt;p>当 &lt;code>--protocol icmp&lt;/code>被指定，且其他匹配的扩展未被指定时，这些扩展被装载。它提供以下选项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--icmp-type &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> typename 这个选项允许指定ICMP类型，可以是一个数值型的ICMP类型，或者是某个由命令iptables -p icmp -h所显示的ICMP类型名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4-针对-mac-的扩展">&lt;strong>4. 针对 mac 的扩展&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--mac-source &lt;span class="o">[&lt;/span>!&lt;span class="o">]&lt;/span> address 匹配物理地址。注意它只对来自以太设备并进入PREROUTING、FORWORD和INPUT链的包有效。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="5-针对-limit-的扩展">&lt;strong>5. 针对 limit 的扩展&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--limit rate 最大平均匹配速率：可赋的值有&lt;span class="s1">&amp;#39;/second&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;/minute&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;/hour&amp;#39;&lt;/span>, or &lt;span class="s1">&amp;#39;/day&amp;#39;&lt;/span>这样的单位，默认是3/hour
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--limit-burst number 待匹配包初始个数的最大值:若前面指定的极限还没达到这个数值,则概数字加1.默认值为5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="iptables-targets-介绍">&lt;strong>iptables targets 介绍&lt;/strong>
&lt;/h2>&lt;p>iptables的 &lt;code>-j&lt;/code>选项后面对应的是要执行的target。其中有些target具有一些扩展选项，下面我们会一并介绍：&lt;/p>
&lt;h3 id="1-accept">&lt;strong>1. ACCEPT&lt;/strong>
&lt;/h3>&lt;p>表示接收匹配的数据包&lt;/p>
&lt;h3 id="2-drop">&lt;strong>2. DROP&lt;/strong>
&lt;/h3>&lt;p>表示丢弃匹配的数据包&lt;/p>
&lt;h3 id="3-reject">&lt;strong>3. REJECT&lt;/strong>
&lt;/h3>&lt;p>作为对匹配的包的响应，返回一个错误的包：其他情况下与DROP 相同&lt;/p>
&lt;p>此目标只适用于INPUT、FORWORD和OUTPUT，和调用这些的用户自定义链。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--reject-with &lt;span class="nb">type&lt;/span> type可以是icmp-net-unreachable、icmp-host-unreachable、icmp-port-nreachable、icmp-proto-unreachable、
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> icmp-net-prohibited或者icmp-host-prohibited，该类型会返回相应的ICMP错误信息（默认是port-unreachable）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--echo-reply 它只能用于指定ICMP ping包的规则中，生成ping的回应
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--tcp-reset 可以用于在INPUT链中,或自INPUT链调用的规则，只匹配TCP协议：将回应一个TCP RST包。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-redirect">&lt;strong>4. REDIRECT&lt;/strong>
&lt;/h3>&lt;p>表示重定向匹配的数据包，只适用于nat表的PREROUTING和OUTPUT，和只调用它们的用户自定义链。它修改包的目标IP地址来发送包到机器自身（本地生成的包被安置为地址127.0.0.1）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--to-ports &lt;span class="o">[&lt;/span>port-port&lt;span class="o">]&lt;/span> 指定使用的目的端口或端口范围：不指定的话，目标端口不会被修改。只能用于指定了-p tcp 或 -p udp的规则。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="iptables常用命令">&lt;strong>iptables常用命令&lt;/strong>
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 新增规则# 指定 ip 访问指定端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iptables -I INPUT -s &amp;lt;ip&amp;gt; -p tcp -m tcp --dport &amp;lt;port&amp;gt; -j ACCEPT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 允许所有ip访问指定端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iptables -I INPUT -p tcp -m tcp --dport &amp;lt;port&amp;gt; -j ACCEPT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看所有规则&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iptables -n -L
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看所有规则，带 序号&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iptables -n -L --line-number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除规则# 删除 INPUT 的 序号为 1 的规则&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iptables -D INPUT &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Certbot免费申请SSL证书</title><link>https://blog.yellster.top/p/certbot-ssl/</link><pubDate>Tue, 19 Dec 2023 20:15:06 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/certbot-ssl/</guid><description>&lt;img src="https://blog.yellster.top/p/certbot-ssl/certbot.png" alt="Featured image of post Certbot免费申请SSL证书" />&lt;h2 id="certbot简介">certbot简介
&lt;/h2>&lt;p>本质上来说，&lt;a class="link" href="https://github.com/certbot/certbot" target="_blank" rel="noopener"
>certbot&lt;/a> 就是一个 ACME client，这也是 &lt;a class="link" href="https://letsencrypt.org/getting-started/" target="_blank" rel="noopener"
>Let’s Encrypt&lt;/a> 官网推荐的签发证书的方式，适用于对自己的 domain 具有 shell 访问能力的情况，使用所谓的 ACME 协议来自动化的签发证书，很大程度上简化了证书签发的步骤。&lt;/p>
&lt;h2 id="安装步骤">安装步骤
&lt;/h2>&lt;p>以 &lt;code>Ubuntu&lt;/code>为例，安装certbot&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install certbot python3-certbot-nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="为nginx生成证书">为nginx生成证书
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo certbot --nginx -d www.yourdomain.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>www.yourdomain.com&lt;/code>替换为您的实际域名。Certbot将自动配置Nginx以使用生成的证书。&lt;/p>
&lt;blockquote>
&lt;p>证书将在90天后过期，因此我们需要设置自动续期。Certbot包含一个名为certbot renew的命令，用于检查证书是否需要更新，如果需要，则自动更新它们。&lt;/p>&lt;/blockquote>
&lt;h3 id="自动续期">自动续期
&lt;/h3>&lt;p>为了设置自动续期，我们将创建一个定时任务（cron job）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">crontab -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 每月1号执行一次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> */1 * /usr/bin/certbot renew --quiet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>访问网站缺少样式</title><link>https://blog.yellster.top/p/missing-styles/</link><pubDate>Mon, 23 Oct 2023 15:14:25 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/missing-styles/</guid><description>&lt;img src="https://blog.yellster.top/p/missing-styles/unsafe_link.png" alt="Featured image of post 访问网站缺少样式" />&lt;h2 id="现状">现状
&lt;/h2>&lt;p>某些网站打开，因为当前网络等其他原因，无法正常访问页面，只能显示网站的基本文字，而没有图片，样式等&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/missing-styles/stackoverflow.png"
width="1872"
height="1009"
srcset="https://blog.yellster.top/p/missing-styles/stackoverflow_hu_c2a8e32698bf36e.png 480w, https://blog.yellster.top/p/missing-styles/stackoverflow_hu_baee5d9fd8301d8a.png 1024w"
loading="lazy"
alt="stackoverflow无法显示样式"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;h2 id="产生原因">产生原因
&lt;/h2>&lt;p>当前网站的样式地址、静态文件地址，无法访问，或者不安全被浏览器拦截&lt;/p>
&lt;p>&lt;img src="https://blog.yellster.top/p/missing-styles/unsafe_link.png"
width="836"
height="578"
srcset="https://blog.yellster.top/p/missing-styles/unsafe_link_hu_a49e9a68e70d05c4.png 480w, https://blog.yellster.top/p/missing-styles/unsafe_link_hu_c6c14e1e13d3f64e.png 1024w"
loading="lazy"
alt="您的链接不是私密链接"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;h2 id="解决办法">解决办法
&lt;/h2>&lt;ol>
&lt;li>打开无法正常访问的网站&lt;/li>
&lt;li>F12，打开审查，切换到 &lt;code>Network&lt;/code> tab页，刷新页面，会发现很多地址都是显示红色
&lt;img src="https://blog.yellster.top/p/missing-styles/not_access.png"
width="1167"
height="722"
srcset="https://blog.yellster.top/p/missing-styles/not_access_hu_72b813cf8e6a741c.png 480w, https://blog.yellster.top/p/missing-styles/not_access_hu_28976e8a69818606.png 1024w"
loading="lazy"
alt="F12"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/li>
&lt;li>选择任意一个红色的无法访问的地址，双击打开，会发现浏览器出现隐私错误提示
&lt;img src="https://blog.yellster.top/p/missing-styles/unsafe_link.png"
width="836"
height="578"
srcset="https://blog.yellster.top/p/missing-styles/unsafe_link_hu_a49e9a68e70d05c4.png 480w, https://blog.yellster.top/p/missing-styles/unsafe_link_hu_c6c14e1e13d3f64e.png 1024w"
loading="lazy"
alt="您的链接不是私密链接"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/li>
&lt;li>高级，仍然访问，(或者直接在当前页面上键盘输入 &lt;code>thisisunsafe&lt;/code>)&lt;/li>
&lt;li>当前页面会刷新重新访问，并正常访问&lt;/li>
&lt;li>这时，继续切换到 该网站 的标签页，刷新，会发现当前页面可以正常访问了
&lt;img src="https://blog.yellster.top/p/missing-styles/success.png"
width="1915"
height="1007"
srcset="https://blog.yellster.top/p/missing-styles/success_hu_8642798c149c8012.png 480w, https://blog.yellster.top/p/missing-styles/success_hu_30fedbb631d12831.png 1024w"
loading="lazy"
alt="正常访问"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/li>
&lt;/ol>
&lt;h2 id="猜测">猜测
&lt;/h2>&lt;p>猜测该类网站无法访问，是因为Chrome不信任这些静态资源地址 &lt;code>自签名ssl证书&lt;/code>，为了安全起见，直接禁止访问了&lt;/p></description></item><item><title>Git Lfs</title><link>https://blog.yellster.top/p/gitlfs/</link><pubDate>Tue, 12 Sep 2023 15:41:12 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/gitlfs/</guid><description>&lt;p>在GitHub或者GitLab提交超过50M的大文件的时候，无法上传
&lt;img src="https://blog.yellster.top/p/gitlfs/git-maximum-file-size.png"
width="1067"
height="84"
srcset="https://blog.yellster.top/p/gitlfs/git-maximum-file-size_hu_f9e5a5fac8900ea7.png 480w, https://blog.yellster.top/p/gitlfs/git-maximum-file-size_hu_e1654590ee041f20.png 1024w"
loading="lazy"
alt="git-maximum-file-size"
class="gallery-image"
data-flex-grow="1270"
data-flex-basis="3048px"
>&lt;/p>
&lt;h2 id="什么是git-lfs">什么是Git LFS
&lt;/h2>&lt;blockquote>
&lt;p>Git 是分布式版本控制系统，这意味着在克隆过程中会将仓库的整个历史记录传输到客户端。
对于包涵大文件（尤其是经常被修改的大文件）的项目，初始克隆需要大量时间，因为客户端会下载每个文件的每个版本。
Git LFS（Large File Storage）是由 Atlassian, GitHub 以及其他开源贡献者开发的 Git 扩展，它通过延迟地（lazily）下载大文件的相关版本来减少大文件在仓库中的影响，具体来说，大文件是在 checkout 的过程中下载的，而不是 clone 或 fetch 过程中下载的（这意味着你在后台定时 fetch 远端仓库内容到本地时，并不会下载大文件内容，而是在你 checkout 到工作区的时候才会真正去下载大文件的内容）。&lt;/p>&lt;/blockquote>
&lt;!-- ![git-lfs](git-lfs.gif) -->
&lt;h2 id="参考文献">参考文献
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.atlassian.com/git/tutorials/git-lfs" target="_blank" rel="noopener"
>Atlassian官方LFS文章&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Hello World</title><link>https://blog.yellster.top/p/hello-world/</link><pubDate>Sun, 12 Feb 2023 19:31:57 +0800</pubDate><author>xyp_selune@163.com (Yellster)</author><guid>https://blog.yellster.top/p/hello-world/</guid><description>&lt;img src="https://blog.yellster.top/p/hello-world/hello-world.png" alt="Featured image of post Hello World" />&lt;blockquote>
&lt;p>“Yeah It&amp;rsquo;s on. ”&lt;/p>&lt;/blockquote></description></item></channel></rss>